@startuml

title __VEHICLESFACTORY's Class Diagram__\n

  namespace vehiclesfactory {
    class vehiclesfactory.Car {
        + Car()
        + drive()
    }
  }
  

  namespace vehiclesfactory {
    class vehiclesfactory.TestDrive {
        + TestDrive()
        {static} + main()
    }
  }
  

  namespace vehiclesfactory {
    class vehiclesfactory.Truck {
        + Truck()
        + drive()
    }
  }
  

  namespace vehiclesfactory {
    interface vehiclesfactory.Vehicle {
        {abstract} + drive()
    }
  }
  

  namespace vehiclesfactory {
    class VehicleFactory {
      vehicles
    }
  }
  

  namespace vehiclesfactory {
    enum VehicleTypes {
      Car
      Truck
    }
  }
  

  vehiclesfactory.Car .up.|> vehiclesfactory.Vehicle
  vehiclesfactory.Truck .up.|> vehiclesfactory.Vehicle

vehiclesfactory.TestDrive -> vehiclesfactory.VehicleFactory: uses
vehiclesfactory.VehicleFactory -> vehiclesfactory.Vehicle: uses
vehiclesfactory.VehicleFactory --> vehiclesfactory.VehicleTypes: uses
vehiclesfactory.TestDrive --> vehiclesfactory.VehicleTypes: uses

note top of vehiclesfactory.VehicleFactory
private Map<String, Vehicle> vehicles = new HashMap<String, Vehicle>();
	/**
	 * Method to create vehicle types
	 * @param vehicleType
	 * @return Vehicle
	 * @throws Exception
	 */
	public Vehicle createVehicle(String vehicleType)
			throws Exception {
		Vehicle vehicle = vehicles.get(vehicleType);
		if (vehicle != null) {
				return vehicle;
		} else {
			try {
				String name = Vehicle.class.getPackage().getName();
				vehicle = (Vehicle) Class.forName(name+"."+vehicleType).newInstance();
				vehicles.put(vehicleType, vehicle);
				return vehicle;
			} catch (Exception e) {
					throw new Exception("The vehicle type is unknown!");
			}
		}

	}
	end note

right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
