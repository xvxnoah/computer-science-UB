@startuml

title __STATE's Class Diagram__\n

  namespace document.state {
    enum Actions {
      Approved
      Publish
      ReviewFailed
    }
  }
  

  namespace document.state {
    class document.state.Document {
        ~ data : Date
        ~ title : String
        + Document()
        + changeState()
        + render()
        + toString()
        + update()
    }
  }
  

  namespace document.state {
    class document.state.DocumentTestDrive {
        {static} + main()
    }
  }
  

  namespace document.state {
    class document.state.DraftState {
        + DraftState()
        + setDocument()
        + render()
        + update()
    }
  }
  

  namespace document.state {
    class document.state.ModerationState {
        + ModerationState()
        + setDocument()
        + render()
        + update()
    }
  }
  

  namespace document.state {
    class document.state.PublishedState {
        + PublishedState()
        + setDocument()
        + render()
        + update()
    }
  }
  

  namespace document.state {
    enum Rol {
      Admin
      User
    }
  }
  

  namespace document.state {
    interface document.state.State {
        {abstract} + setDocument()
        {abstract} + render()
        {abstract} + update()
    }
  }
  

  document.state.Document o-up- document.state.State : currentState
  document.state.DraftState .down.|> document.state.State
  document.state.DraftState o-- document.state.Document : doc
  document.state.ModerationState .down.|> document.state.State
  document.state.ModerationState o-- document.state.Document : doc
  document.state.PublishedState .down.|> document.state.State
  document.state.PublishedState o-- document.state.Document : doc
document.state.DocumentTestDrive -right->document.state.Document: uses
document.state.Document o-right- document.state.Rol :uses
document.state.Document o-down- document.state.Actions :uses

note left of document.state.Document
    State currentState;
    Date data;
    String title;
    ...
        public Document(String title, Date data, State currentState) {
                this.title = title;
                this.data = data;
                this.currentState = currentState;
                currentState.setDocument(this);
            }
        public void update(Rol role, Actions action ) {
            currentState.update(role, action);
        }
        public void changeState(State state) {
            currentState = state;
            state.setDocument(this);
        }
        public void render() {
           System.out.println(this);
           currentState.render();
        }
end note

note left of document.state.DraftState
    Document doc;

    public DraftState( ) {
    }

    @Override
    public void setDocument(Document doc) {
         this.doc = doc;
    }
    @Override
    public void render() {
        System.out.println("Draft");
    }

    @Override
    public void update(Rol role, Actions action) {
        if (role == Rol.User)
            doc.changeState(new ModerationState(doc));
        else if (role == Rol.Admin)
            doc.changeState(new PublishedState(doc));
    }
end note

note bottom of document.state.DocumentTestDrive
public static void main(String[] args) {
  ...
  date = formatter.parse(date_string);
  doc = new Document("Prova de canvis d'estat", date, new DraftState());

  doc.render();
  doc.update(Rol.User, Actions.Publish);
}
end note
right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
