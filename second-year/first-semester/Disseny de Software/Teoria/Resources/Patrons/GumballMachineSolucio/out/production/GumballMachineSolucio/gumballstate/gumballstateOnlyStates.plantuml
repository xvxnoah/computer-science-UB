@startuml

title __GUMBALLSTATE's Class Diagram__\n


      class gumballstate.GumballMachine {
          ~ count : int
          + GumballMachine()
          + ejectQuarter()
          + getHasQuarterState()
          + getNoQuarterState()
          + getSoldOutState()
          + getSoldState()
          + getState()
          + insertQuarter()
          + toString()
          + turnCrank()
          ~ getCount()
          ~ refill()
          ~ releaseBall()
          ~ setState()
      }

      class gumballstate.GumballMachineTestDrive {
          {static} + main()
      }

      class gumballstate.HasQuarterState {
          + HasQuarterState()
          + dispense()
          + ejectQuarter()
          + insertQuarter()
          + toString()
          + turnCrank()
      }

      class gumballstate.NoQuarterState {
          + NoQuarterState()
          + dispense()
          + ejectQuarter()
          + insertQuarter()
          + toString()
          + turnCrank()
      }

      class gumballstate.SoldOutState {
          + SoldOutState()
          + dispense()
          + ejectQuarter()
          + insertQuarter()
          + toString()
          + turnCrank()
      }

      class gumballstate.SoldState {
          + SoldState()
          + dispense()
          + ejectQuarter()
          + insertQuarter()
          + toString()
          + turnCrank()
      }

      interface gumballstate.State {
          {abstract} + dispense()
          {abstract} + ejectQuarter()
          {abstract} + insertQuarter()
          {abstract} + turnCrank()
      }


  gumballstate.GumballMachine o-- gumballstate.State : state
  gumballstate.HasQuarterState .up.|> gumballstate.State


  gumballstate.SoldOutState .up.|> gumballstate.State

  gumballstate.SoldState .up.|> gumballstate.State
 gumballstate.NoQuarterState .up.|> gumballstate.State

gumballstate.GumballMachineTestDrive -right-> gumballstate.GumballMachine: uses


note bottom of gumballstate.NoQuarterState
public class NoQuarterState implements State {
    GumballMachine gumballMachine;

    public NoQuarterState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }

	public void insertQuarter() {
		System.out.println("You inserted a quarter");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}

	public void ejectQuarter() {
		System.out.println("You haven't inserted a quarter");
	}

	public void turnCrank() {
		System.out.println("You turned, but there's no quarter");
	 }

	public void dispense() {
		System.out.println("You need to pay first");
	}

	public String toString() {
		return "waiting for quarter";
	}
}

end note
right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
