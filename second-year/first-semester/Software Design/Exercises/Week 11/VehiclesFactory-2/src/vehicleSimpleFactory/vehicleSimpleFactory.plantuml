@startuml

title __VEHICLESIMPLEFACTORY's Class Diagram__\n

  namespace vehicleSimpleFactory {
    class vehicleSimpleFactory.Car {
        + Car()
        + drive()
    }
  }
  

  namespace vehicleSimpleFactory {
    class vehicleSimpleFactory.TestDrive {
        {static} + main()
    }
  }
  

  namespace vehicleSimpleFactory {
    class vehicleSimpleFactory.Truck {
        + Truck()
        + drive()
    }
  }
  

  namespace vehicleSimpleFactory {
    abstract class vehicleSimpleFactory.Vehicle {
        {abstract} + drive()
    }
  }
  

  namespace vehicleSimpleFactory {
    enum VehicleFactory {
      INSTANCE
    }
  }
  

  namespace vehicleSimpleFactory {
    enum VehicleTypes {
      Car
      Truck
    }
  }
  

  vehicleSimpleFactory.Car -up-|> vehicleSimpleFactory.Vehicle
  vehicleSimpleFactory.Truck -up-|> vehicleSimpleFactory.Vehicle
vehicleSimpleFactory.VehicleFactory -> vehicleSimpleFactory.Vehicle: uses
vehicleSimpleFactory.TestDrive -> vehicleSimpleFactory.VehicleFactory: uses
vehicleSimpleFactory.VehicleFactory -down-> vehicleSimpleFactory.VehicleTypes: uses

note top of vehicleSimpleFactory.VehicleFactory
public enum VehicleFactory {
	INSTANCE;

	public Vehicle createVehicle (VehicleTypes name) {
		Vehicle vehicle = null;
		switch (name) {
			case Car:
				vehicle = new Car();
				break;
			case Truck:
				vehicle = new Truck();
				break;
		}
		return vehicle;

	}
}
end note
right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
