#!/bin/sh
# Generate lists of all coreutils programs, to be fed both to Autoconf
# and Automake, and with further distinctions about how and when these
# programs should be built.  This is useful to avoid duplicating these
# list definitions among several files ('configure.ac' and
# 'src/local.mk' at least); such duplication had proved a source of
# inconsistencies and bugs in the past.

set -u
set -e

# These are the names of programs that are neither built nor installed
# by default.  This list is *not* intended for programs like 'who',
# 'nice', 'chroot', etc., that are built only when certain requisite
# system features are detected.
# If you would like to install programs from this list anyway, say A and B,
# use "--enable-install-program=A,B" when invoking configure.
disabled_by_default_progs='
    arch
    coreutils
    hostname
'

# Programs that can be built only when certain requisite system
# features are detected at configure time.
build_if_possible_progs='
    chroot
    df
    hostid
    libstdbuf.so
    nice
    pinky
    stdbuf
    stty
    uptime
    users
    who
'

# All the other programs, to be built by default, and that should
# be buildable without problems on any target system.
normal_progs='
    [
    base64
    base32
    basename
    cat
    chcon
    chgrp
    chmod
    chown
    cksum
    comm
    cp
    csplit
    cut
    date
    dd
    dir
    dircolors
    dirname
    du
    echo
    env
    expand
    expr
    factor
    false
    fmt
    fold
    ginstall
    groups
    head
    id
    join
    kill
    link
    ln
    logname
    ls
    md5sum
    mkdir
    mkfifo
    mknod
    mktemp
    mv
    nl
    nproc
    nohup
    numfmt
    od
    paste
    pathchk
    pr
    printenv
    printf
    ptx
    pwd
    readlink
    realpath
    rm
    rmdir
    runcon
    seq
    sha1sum
    sha224sum
    sha256sum
    sha384sum
    sha512sum
    shred
    shuf
    sleep
    sort
    split
    stat
    sum
    sync
    tac
    tail
    tee
    test
    timeout
    touch
    tr
    true
    truncate
    tsort
    tty
    uname
    unexpand
    uniq
    unlink
    vdir
    wc
    whoami
    yes
'

me=`echo "$0" | sed 's,.*/,,'`
msg="Automatically generated by $me.  DO NOT EDIT BY HAND!"

case $#,$1 in
  1,--autoconf|1,--for-autoconf)
    echo "dnl $msg"
    for p in $normal_progs; do
      test x"$p" = x"[" && p='@<:@'
      echo "gl_ADD_PROG([optional_bin_progs], [$p])"
    done
    # Extra 'echo' to normalize whitespace.
    echo "no_install_progs_default='`echo $disabled_by_default_progs`'"
    sed 's/^ *//' <<END
        # Given the name of a variable containing a space-separated
        # list of install-by-default programs and the actual list of
        # do-not-install-by-default programs, modify the former variable
        # to reflect any "do-install" and "don't-install" requests.
        # That is, add any program specified via --enable-install-program,
        # and remove any program specified via --enable-no-install-program.
        # Note how the second argument below is a literal, with ","
        # separators.  That is required due to the way the macro works,
        # and since the corresponding ./configure option argument is
        # comma-separated on input.
        gl_INCLUDE_EXCLUDE_PROG([optional_bin_progs], [`\
          echo $disabled_by_default_progs \
                                    | sed 's/ /,/g'`])
END
    ;;
  1,--automake|1,--for-automake)
    echo "## $msg"
    progsdir=src
    echo no_install__progs =
    for p in $disabled_by_default_progs; do
      echo no_install__progs += $progsdir/$p
    done
    echo build_if_possible__progs =
    for p in $build_if_possible_progs; do
      echo build_if_possible__progs += $progsdir/$p
    done
    echo default__progs =
    for p in $normal_progs; do
      echo default__progs += $progsdir/$p
    done
    ;;
  1,--list-progs)
    for p in $disabled_by_default_progs $build_if_possible_progs \
        $normal_progs; do
      echo $p
    done
    ;;
  *)
    echo "$0: invalid usage" >&2; exit 2
    ;;
esac

exit 0
#!/bin/sh

# Generate the list of rules for the single-binary option based on all the other
# binaries found in src/local.mk.
#
# We need to duplicate the specific rules to build each program into a new
# static library target. We can't reuse the existing target since we need to
# create a .a file instead of linking the program. We can't do this at
# ./configure since the file names need to be available when automake runs
# to let it generate all the required rules in Makefile.in.  The configure
# step will select which ones will be used to build, but they need to be
# generated beforehand.
#
# Instead of maintaining a duplicated list of rules, we generate the
# single-binary required rules based on the normal configuration found on
# src/local.mk with this script.

if test "x$1" = "x"; then
  echo "Usage: $0 path/to/src/local.mk" >&2
  exit 1
fi

set -e

LOCAL_MK=$1
GEN_LISTS_OF_PROGRAMS="`dirname "$0"`/gen-lists-of-programs.sh"

ALL_PROGRAMS=$($GEN_LISTS_OF_PROGRAMS --list-progs \
    | grep -v -F -e coreutils -e libstdbuf.so \
    | tr '[' '_')

# Compute default SOURCES. automake will assume the source file for the
# src_${cmd} target to be src/${cmd}.c, but we will add rules to generate
# the lib src_libsinglebin_${cmd}_a which won't match the autogenerated source
# file. This loop will initialize the default source file and will be reset
# later if needed.
for cmd in $ALL_PROGRAMS; do
  eval "src_${cmd}_SOURCES=src/${cmd}.c"
done

# Load actual values from src/local.mk. This will read all the variables from
# the local.mk matching the src_${cmd}_... case.
while read l; do
  if echo "$l" | grep -E '^src_\w+ +\+?=' > /dev/null; then
    var=$(echo $l | cut -f 1 -d ' ')
    value=$(echo $l | cut -f 2- -d =)
    if [ "$value" != " \$(LDADD)" ]; then
      oldvalue=""
      if echo $l | grep -F '+=' >/dev/null; then
        eval "oldvalue=\${$var}"
      fi
      value=$(echo "$value" | sed "s/'/'\"'\"'/g")
      eval "$var='$oldvalue "$value"'"
    fi
  fi
done < $LOCAL_MK

me=`echo "$0" | sed 's,.*/,,'`
echo "## Automatically generated by $me.  DO NOT EDIT BY HAND!"

# Override the sources for dir and vdir. We use a smaller version of dir and
# vdir that relies on the ls main.
src_dir_SOURCES="src/coreutils-dir.c"
src_dir_LDADD="$src_dir_LDADD src/libsinglebin_ls.a"
echo src_libsinglebin_dir_a_DEPENDENCIES = src/libsinglebin_ls.a
src_vdir_SOURCES="src/coreutils-vdir.c"
src_vdir_LDADD="$src_vdir_LDADD src/libsinglebin_ls.a"
echo src_libsinglebin_vdir_a_DEPENDENCIES = src/libsinglebin_ls.a

# Override the sources for arch likewise, using the main from uname.
src_arch_SOURCES="src/coreutils-arch.c"
src_arch_LDADD="$src_arch_LDADD src/libsinglebin_uname.a"
echo src_libsinglebin_arch_a_DEPENDENCIES = src/libsinglebin_uname.a

for cmd in $ALL_PROGRAMS; do
  echo "# Command $cmd"
  echo noinst_LIBRARIES += src/libsinglebin_${cmd}.a
  base="src_libsinglebin_${cmd}_a"
  # SOURCES
  var=src_${cmd}_SOURCES
  eval "value=\$$var"
  echo "${base}_SOURCES = $value"

  # LDADD
  var=src_${cmd}_LDADD
  eval "value=\$$var"
  if [ "x$value" != "x" ]; then
    echo "${base}_ldadd = $value"
  fi

  # CFLAGS
  # Hack any other program defining a main() replacing its main by
  # single_binary_main_$PROGRAM_NAME.
  echo "${base}_CFLAGS = \"-Dmain=single_binary_main_${cmd} (int, char **);" \
       " int single_binary_main_${cmd}\" " \
       "-Dusage=_usage_${cmd} \$(src_coreutils_CFLAGS)"
  var=src_${cmd}_CFLAGS
  eval "value=\$$var"
  if [ "x$value" != "x" ]; then
    echo "${base}_CFLAGS += $value"
  fi

  # CPPFLAGS
  var=src_${cmd}_CPPFLAGS
  eval "value=\$$var"
  if [ "x$value" != "x" ]; then
    echo "${base}_CPPFLAGS = $value"
  fi
done

exit 0
#!/bin/sh -e
# gendocs.sh -- generate a GNU manual in many formats.  This script is
#   mentioned in maintain.texi.  See the help message below for usage details.

scriptversion=2016-01-01.00

# Copyright 2003-2016 Free Software Foundation, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Original author: Mohit Agarwal.
# Send bug reports and any other correspondence to bug-gnulib@gnu.org.
#
# The latest version of this script, and the companion template, is
# available from the Gnulib repository:
#
# http://git.savannah.gnu.org/cgit/gnulib.git/tree/build-aux/gendocs.sh
# http://git.savannah.gnu.org/cgit/gnulib.git/tree/doc/gendocs_template

# TODO:
# - image importing was only implemented for HTML generated by
#   makeinfo.  But it should be simple enough to adjust.
# - images are not imported in the source tarball.  All the needed
#   formats (PDF, PNG, etc.) should be included.

prog=`basename "$0"`
srcdir=`pwd`

scripturl="http://git.savannah.gnu.org/cgit/gnulib.git/plain/build-aux/gendocs.sh"
templateurl="http://git.savannah.gnu.org/cgit/gnulib.git/plain/doc/gendocs_template"

: ${SETLANG="env LANG= LC_MESSAGES= LC_ALL= LANGUAGE="}
: ${MAKEINFO="makeinfo"}
: ${TEXI2DVI="texi2dvi"}
: ${DOCBOOK2HTML="docbook2html"}
: ${DOCBOOK2PDF="docbook2pdf"}
: ${DOCBOOK2TXT="docbook2txt"}
: ${GENDOCS_TEMPLATE_DIR="."}
: ${PERL='perl'}
: ${TEXI2HTML="texi2html"}
unset CDPATH
unset use_texi2html

version="gendocs.sh $scriptversion

Copyright 2016 Free Software Foundation, Inc.
There is NO warranty.  You may redistribute this software
under the terms of the GNU General Public License.
For more information about these matters, see the files named COPYING."

usage="Usage: $prog [OPTION]... PACKAGE MANUAL-TITLE

Generate output in various formats from PACKAGE.texinfo (or .texi or
.txi) source.  See the GNU Maintainers document for a more extensive
discussion:
  http://www.gnu.org/prep/maintain_toc.html

Options:
  --email ADR use ADR as contact in generated web pages; always give this.

  -s SRCFILE   read Texinfo from SRCFILE, instead of PACKAGE.{texinfo|texi|txi}
  -o OUTDIR    write files into OUTDIR, instead of manual/.
  -I DIR       append DIR to the Texinfo search path.
  --common ARG pass ARG in all invocations.
  --html ARG   pass ARG to makeinfo or texi2html for HTML targets,
                 instead of --css-ref=/software/gnulib/manual.css.
  --info ARG   pass ARG to makeinfo for Info, instead of --no-split.
  --no-ascii   skip generating the plain text output.
  --no-html    skip generating the html output.
  --no-info    skip generating the info output.
  --no-tex     skip generating the dvi and pdf output.
  --source ARG include ARG in tar archive of sources.
  --split HOW  make split HTML by node, section, chapter; default node.
  --tex ARG    pass ARG to texi2dvi for DVI and PDF, instead of -t @finalout.

  --texi2html  use texi2html to make HTML target, with all split versions.
  --docbook    convert through DocBook too (xml, txt, html, pdf).

  --help       display this help and exit successfully.
  --version    display version information and exit successfully.

Simple example: $prog --email bug-gnu-emacs@gnu.org emacs \"GNU Emacs Manual\"

Typical sequence:
  cd PACKAGESOURCE/doc
  wget \"$scripturl\"
  wget \"$templateurl\"
  $prog --email BUGLIST MANUAL \"GNU MANUAL - One-line description\"

Output will be in a new subdirectory \"manual\" (by default;
use -o OUTDIR to override).  Move all the new files into your web CVS
tree, as explained in the Web Pages node of maintain.texi.

Please use the --email ADDRESS option so your own bug-reporting
address will be used in the generated HTML pages.

MANUAL-TITLE is included as part of the HTML <title> of the overall
manual/index.html file.  It should include the name of the package being
documented.  manual/index.html is created by substitution from the file
$GENDOCS_TEMPLATE_DIR/gendocs_template.  (Feel free to modify the
generic template for your own purposes.)

If you have several manuals, you'll need to run this script several
times with different MANUAL values, specifying a different output
directory with -o each time.  Then write (by hand) an overall index.html
with links to them all.

If a manual's Texinfo sources are spread across several directories,
first copy or symlink all Texinfo sources into a single directory.
(Part of the script's work is to make a tar.gz of the sources.)

As implied above, by default monolithic Info files are generated.
If you want split Info, or other Info options, use --info to override.

You can set the environment variables MAKEINFO, TEXI2DVI, TEXI2HTML,
and PERL to control the programs that get executed, and
GENDOCS_TEMPLATE_DIR to control where the gendocs_template file is
looked for.  With --docbook, the environment variables DOCBOOK2HTML,
DOCBOOK2PDF, and DOCBOOK2TXT are also consulted.

By default, makeinfo and texi2dvi are run in the default (English)
locale, since that's the language of most Texinfo manuals.  If you
happen to have a non-English manual and non-English web site, see the
SETLANG setting in the source.

Email bug reports or enhancement requests to bug-gnulib@gnu.org.
"

MANUAL_TITLE=
PACKAGE=
EMAIL=webmasters@gnu.org  # please override with --email
commonarg= # passed to all makeinfo/texi2html invcations.
dirargs=   # passed to all tools (-I dir).
dirs=      # -I directories.
htmlarg=--css-ref=/software/gnulib/manual.css
infoarg=--no-split
generate_ascii=true
generate_html=true
generate_info=true
generate_tex=true
outdir=manual
source_extra=
split=node
srcfile=
texarg="-t @finalout"

while test $# -gt 0; do
  case $1 in
    -s)          shift; srcfile=$1;;
    -o)          shift; outdir=$1;;
    -I)          shift; dirargs="$dirargs -I '$1'"; dirs="$dirs $1";;
    --common)    shift; commonarg=$1;;
    --docbook)   docbook=yes;;
    --email)     shift; EMAIL=$1;;
    --html)      shift; htmlarg=$1;;
    --info)      shift; infoarg=$1;;
    --no-ascii)  generate_ascii=false;;
    --no-html)   generate_ascii=false;;
    --no-info)   generate_info=false;;
    --no-tex)    generate_tex=false;;
    --source)    shift; source_extra=$1;;
    --split)     shift; split=$1;;
    --tex)       shift; texarg=$1;;
    --texi2html) use_texi2html=1;;

    --help)      echo "$usage"; exit 0;;
    --version)   echo "$version"; exit 0;;
    -*)
      echo "$0: Unknown option \`$1'." >&2
      echo "$0: Try \`--help' for more information." >&2
      exit 1;;
    *)
      if test -z "$PACKAGE"; then
        PACKAGE=$1
      elif test -z "$MANUAL_TITLE"; then
        MANUAL_TITLE=$1
      else
        echo "$0: extra non-option argument \`$1'." >&2
        exit 1
      fi;;
  esac
  shift
done

# makeinfo uses the dirargs, but texi2dvi doesn't.
commonarg=" $dirargs $commonarg"

# For most of the following, the base name is just $PACKAGE
base=$PACKAGE

if test -n "$srcfile"; then
  # but here, we use the basename of $srcfile
  base=`basename "$srcfile"`
  case $base in
    *.txi|*.texi|*.texinfo) base=`echo "$base"|sed 's/\.[texinfo]*$//'`;;
  esac
  PACKAGE=$base
elif test -s "$srcdir/$PACKAGE.texinfo"; then
  srcfile=$srcdir/$PACKAGE.texinfo
elif test -s "$srcdir/$PACKAGE.texi"; then
  srcfile=$srcdir/$PACKAGE.texi
elif test -s "$srcdir/$PACKAGE.txi"; then
  srcfile=$srcdir/$PACKAGE.txi
else
  echo "$0: cannot find .texinfo or .texi or .txi for $PACKAGE in $srcdir." >&2
  exit 1
fi

if test ! -r $GENDOCS_TEMPLATE_DIR/gendocs_template; then
  echo "$0: cannot read $GENDOCS_TEMPLATE_DIR/gendocs_template." >&2
  echo "$0: it is available from $templateurl." >&2
  exit 1
fi

# Function to return size of $1 in something resembling kilobytes.
calcsize()
{
  size=`ls -ksl $1 | awk '{print $1}'`
  echo $size
}

# copy_images OUTDIR HTML-FILE...
# -------------------------------
# Copy all the images needed by the HTML-FILEs into OUTDIR.
# Look for them in . and the -I directories; this is simpler than what
# makeinfo supports with -I, but hopefully it will suffice.
copy_images()
{
  local odir
  odir=$1
  shift
  $PERL -n -e "
BEGIN {
  \$me = '$prog';
  \$odir = '$odir';
  @dirs = qw(. $dirs);
}
" -e '
/<img src="(.*?)"/g && ++$need{$1};

END {
  #print "$me: @{[keys %need]}\n";  # for debugging, show images found.
  FILE: for my $f (keys %need) {
    for my $d (@dirs) {
      if (-f "$d/$f") {
        use File::Basename;
        my $dest = dirname ("$odir/$f");
        #
        use File::Path;
        -d $dest || mkpath ($dest)
          || die "$me: cannot mkdir $dest: $!\n";
        #
        use File::Copy;
        copy ("$d/$f", $dest)
          || die "$me: cannot copy $d/$f to $dest: $!\n";
        next FILE;
      }
    }
    die "$me: $ARGV: cannot find image $f\n";
  }
}
' -- "$@" || exit 1
}

case $outdir in
  /*) abs_outdir=$outdir;;
  *)  abs_outdir=$srcdir/$outdir;;
esac

echo "Making output for $srcfile"
echo " in `pwd`"
mkdir -p "$outdir/"

# 
if $generate_info; then
  cmd="$SETLANG $MAKEINFO -o $PACKAGE.info $commonarg $infoarg \"$srcfile\""
  echo "Generating info... ($cmd)"
  rm -f $PACKAGE.info* # get rid of any strays
  eval "$cmd"
  tar czf "$outdir/$PACKAGE.info.tar.gz" $PACKAGE.info*
  ls -l "$outdir/$PACKAGE.info.tar.gz"
  info_tgz_size=`calcsize "$outdir/$PACKAGE.info.tar.gz"`
  # do not mv the info files, there's no point in having them available
  # separately on the web.
fi  # end info

# 
if $generate_tex; then
  cmd="$SETLANG $TEXI2DVI $dirargs $texarg \"$srcfile\""
  printf "\nGenerating dvi... ($cmd)\n"
  eval "$cmd"
  # compress/finish dvi:
  gzip -f -9 $PACKAGE.dvi
  dvi_gz_size=`calcsize $PACKAGE.dvi.gz`
  mv $PACKAGE.dvi.gz "$outdir/"
  ls -l "$outdir/$PACKAGE.dvi.gz"

  cmd="$SETLANG $TEXI2DVI --pdf $dirargs $texarg \"$srcfile\""
  printf "\nGenerating pdf... ($cmd)\n"
  eval "$cmd"
  pdf_size=`calcsize $PACKAGE.pdf`
  mv $PACKAGE.pdf "$outdir/"
  ls -l "$outdir/$PACKAGE.pdf"
fi # end tex (dvi + pdf)

# 
if $generate_ascii; then
  opt="-o $PACKAGE.txt --no-split --no-headers $commonarg"
  cmd="$SETLANG $MAKEINFO $opt \"$srcfile\""
  printf "\nGenerating ascii... ($cmd)\n"
  eval "$cmd"
  ascii_size=`calcsize $PACKAGE.txt`
  gzip -f -9 -c $PACKAGE.txt >"$outdir/$PACKAGE.txt.gz"
  ascii_gz_size=`calcsize "$outdir/$PACKAGE.txt.gz"`
  mv $PACKAGE.txt "$outdir/"
  ls -l "$outdir/$PACKAGE.txt" "$outdir/$PACKAGE.txt.gz"
fi

# 

if $generate_html; then
# Split HTML at level $1.  Used for texi2html.
html_split()
{
  opt="--split=$1 --node-files $commonarg $htmlarg"
  cmd="$SETLANG $TEXI2HTML --output $PACKAGE.html $opt \"$srcfile\""
  printf "\nGenerating html by $1... ($cmd)\n"
  eval "$cmd"
  split_html_dir=$PACKAGE.html
  (
    cd ${split_html_dir} || exit 1
    ln -sf ${PACKAGE}.html index.html
    tar -czf "$abs_outdir/${PACKAGE}.html_$1.tar.gz" -- *.html
  )
  eval html_$1_tgz_size=`calcsize "$outdir/${PACKAGE}.html_$1.tar.gz"`
  rm -f "$outdir"/html_$1/*.html
  mkdir -p "$outdir/html_$1/"
  mv ${split_html_dir}/*.html "$outdir/html_$1/"
  rmdir ${split_html_dir}
}

if test -z "$use_texi2html"; then
  opt="--no-split --html -o $PACKAGE.html $commonarg $htmlarg"
  cmd="$SETLANG $MAKEINFO $opt \"$srcfile\""
  printf "\nGenerating monolithic html... ($cmd)\n"
  rm -rf $PACKAGE.html  # in case a directory is left over
  eval "$cmd"
  html_mono_size=`calcsize $PACKAGE.html`
  gzip -f -9 -c $PACKAGE.html >"$outdir/$PACKAGE.html.gz"
  html_mono_gz_size=`calcsize "$outdir/$PACKAGE.html.gz"`
  copy_images "$outdir/" $PACKAGE.html
  mv $PACKAGE.html "$outdir/"
  ls -l "$outdir/$PACKAGE.html" "$outdir/$PACKAGE.html.gz"

  # Before Texinfo 5.0, makeinfo did not accept a --split=HOW option,
  # it just always split by node.  So if we're splitting by node anyway,
  # leave it out.
  if test "x$split" = xnode; then
    split_arg=
  else
    split_arg=--split=$split
  fi
  #
  opt="--html -o $PACKAGE.html $split_arg $commonarg $htmlarg"
  cmd="$SETLANG $MAKEINFO $opt \"$srcfile\""
  printf "\nGenerating html by $split... ($cmd)\n"
  eval "$cmd"
  split_html_dir=$PACKAGE.html
  copy_images $split_html_dir/ $split_html_dir/*.html
  (
    cd $split_html_dir || exit 1
    tar -czf "$abs_outdir/$PACKAGE.html_$split.tar.gz" -- *
  )
  eval \
    html_${split}_tgz_size=`calcsize "$outdir/$PACKAGE.html_$split.tar.gz"`
  rm -rf "$outdir/html_$split/"
  mv $split_html_dir "$outdir/html_$split/"
  du -s "$outdir/html_$split/"
  ls -l "$outdir/$PACKAGE.html_$split.tar.gz"

else # use texi2html:
  opt="--output $PACKAGE.html $commonarg $htmlarg"
  cmd="$SETLANG $TEXI2HTML $opt \"$srcfile\""
  printf "\nGenerating monolithic html with texi2html... ($cmd)\n"
  rm -rf $PACKAGE.html  # in case a directory is left over
  eval "$cmd"
  html_mono_size=`calcsize $PACKAGE.html`
  gzip -f -9 -c $PACKAGE.html >"$outdir/$PACKAGE.html.gz"
  html_mono_gz_size=`calcsize "$outdir/$PACKAGE.html.gz"`
  mv $PACKAGE.html "$outdir/"

  html_split node
  html_split chapter
  html_split section
fi
fi # end html

# 
printf "\nMaking .tar.gz for sources...\n"
d=`dirname $srcfile`
(
  cd "$d"
  srcfiles=`ls -d *.texinfo *.texi *.txi *.eps $source_extra 2>/dev/null` || true
  tar czfh "$abs_outdir/$PACKAGE.texi.tar.gz" $srcfiles
  ls -l "$abs_outdir/$PACKAGE.texi.tar.gz"
)
texi_tgz_size=`calcsize "$outdir/$PACKAGE.texi.tar.gz"`

# 
# Do everything again through docbook.
if test -n "$docbook"; then
  opt="-o - --docbook $commonarg"
  cmd="$SETLANG $MAKEINFO $opt \"$srcfile\" >${srcdir}/$PACKAGE-db.xml"
  printf "\nGenerating docbook XML... ($cmd)\n"
  eval "$cmd"
  docbook_xml_size=`calcsize $PACKAGE-db.xml`
  gzip -f -9 -c $PACKAGE-db.xml >"$outdir/$PACKAGE-db.xml.gz"
  docbook_xml_gz_size=`calcsize "$outdir/$PACKAGE-db.xml.gz"`
  mv $PACKAGE-db.xml "$outdir/"

  split_html_db_dir=html_node_db
  opt="$commonarg -o $split_html_db_dir"
  cmd="$DOCBOOK2HTML $opt \"${outdir}/$PACKAGE-db.xml\""
  printf "\nGenerating docbook HTML... ($cmd)\n"
  eval "$cmd"
  (
    cd ${split_html_db_dir} || exit 1
    tar -czf "$abs_outdir/${PACKAGE}.html_node_db.tar.gz" -- *.html
  )
  html_node_db_tgz_size=`calcsize "$outdir/${PACKAGE}.html_node_db.tar.gz"`
  rm -f "$outdir"/html_node_db/*.html
  mkdir -p "$outdir/html_node_db"
  mv ${split_html_db_dir}/*.html "$outdir/html_node_db/"
  rmdir ${split_html_db_dir}

  cmd="$DOCBOOK2TXT \"${outdir}/$PACKAGE-db.xml\""
  printf "\nGenerating docbook ASCII... ($cmd)\n"
  eval "$cmd"
  docbook_ascii_size=`calcsize $PACKAGE-db.txt`
  mv $PACKAGE-db.txt "$outdir/"

  cmd="$DOCBOOK2PDF \"${outdir}/$PACKAGE-db.xml\""
  printf "\nGenerating docbook PDF... ($cmd)\n"
  eval "$cmd"
  docbook_pdf_size=`calcsize $PACKAGE-db.pdf`
  mv $PACKAGE-db.pdf "$outdir/"
fi

# 
printf "\nMaking index.html for $PACKAGE...\n"
if test -z "$use_texi2html"; then
  CONDS="/%%IF  *HTML_SECTION%%/,/%%ENDIF  *HTML_SECTION%%/d;\
         /%%IF  *HTML_CHAPTER%%/,/%%ENDIF  *HTML_CHAPTER%%/d"
else
  # should take account of --split here.
  CONDS="/%%ENDIF.*%%/d;/%%IF  *HTML_SECTION%%/d;/%%IF  *HTML_CHAPTER%%/d"
fi

curdate=`$SETLANG date '+%B %d, %Y'`
sed \
   -e "s!%%TITLE%%!$MANUAL_TITLE!g" \
   -e "s!%%EMAIL%%!$EMAIL!g" \
   -e "s!%%PACKAGE%%!$PACKAGE!g" \
   -e "s!%%DATE%%!$curdate!g" \
   -e "s!%%HTML_MONO_SIZE%%!$html_mono_size!g" \
   -e "s!%%HTML_MONO_GZ_SIZE%%!$html_mono_gz_size!g" \
   -e "s!%%HTML_NODE_TGZ_SIZE%%!$html_node_tgz_size!g" \
   -e "s!%%HTML_SECTION_TGZ_SIZE%%!$html_section_tgz_size!g" \
   -e "s!%%HTML_CHAPTER_TGZ_SIZE%%!$html_chapter_tgz_size!g" \
   -e "s!%%INFO_TGZ_SIZE%%!$info_tgz_size!g" \
   -e "s!%%DVI_GZ_SIZE%%!$dvi_gz_size!g" \
   -e "s!%%PDF_SIZE%%!$pdf_size!g" \
   -e "s!%%ASCII_SIZE%%!$ascii_size!g" \
   -e "s!%%ASCII_GZ_SIZE%%!$ascii_gz_size!g" \
   -e "s!%%TEXI_TGZ_SIZE%%!$texi_tgz_size!g" \
   -e "s!%%DOCBOOK_HTML_NODE_TGZ_SIZE%%!$html_node_db_tgz_size!g" \
   -e "s!%%DOCBOOK_ASCII_SIZE%%!$docbook_ascii_size!g" \
   -e "s!%%DOCBOOK_PDF_SIZE%%!$docbook_pdf_size!g" \
   -e "s!%%DOCBOOK_XML_SIZE%%!$docbook_xml_size!g" \
   -e "s!%%DOCBOOK_XML_GZ_SIZE%%!$docbook_xml_gz_size!g" \
   -e "s,%%SCRIPTURL%%,$scripturl,g" \
   -e "s!%%SCRIPTNAME%%!$prog!g" \
   -e "$CONDS" \
$GENDOCS_TEMPLATE_DIR/gendocs_template >"$outdir/index.html"

echo "Done, see $outdir/ subdirectory for new files."

# Local variables:
# eval: (add-hook 'write-file-hooks 'time-stamp)
# time-stamp-start: "scriptversion="
# time-stamp-format: "%:y-%02m-%02d.%02H"
# time-stamp-end: "$"
# End:
# source this file; set up for tests

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Using this file in a test
# =========================
#
# The typical skeleton of a test looks like this:
#
#   #!/bin/sh
#   . "${srcdir=.}/init.sh"; path_prepend_ .
#   Execute some commands.
#   Note that these commands are executed in a subdirectory, therefore you
#   need to prepend "../" to relative filenames in the build directory.
#   Note that the "path_prepend_ ." is useful only if the body of your
#   test invokes programs residing in the initial directory.
#   For example, if the programs you want to test are in src/, and this test
#   script is named tests/test-1, then you would use "path_prepend_ ../src",
#   or perhaps export PATH='$(abs_top_builddir)/src$(PATH_SEPARATOR)'"$$PATH"
#   to all tests via automake's TESTS_ENVIRONMENT.
#   Set the exit code 0 for success, 77 for skipped, or 1 or other for failure.
#   Use the skip_ and fail_ functions to print a diagnostic and then exit
#   with the corresponding exit code.
#   Exit $?

# Executing a test that uses this file
# ====================================
#
# Running a single test:
#   $ make check TESTS=test-foo.sh
#
# Running a single test, with verbose output:
#   $ make check TESTS=test-foo.sh VERBOSE=yes
#
# Running a single test, with single-stepping:
#   1. Go into a sub-shell:
#   $ bash
#   2. Set relevant environment variables from TESTS_ENVIRONMENT in the
#      Makefile:
#   $ export srcdir=../../tests # this is an example
#   3. Execute the commands from the test, copy&pasting them one by one:
#   $ . "$srcdir/init.sh"; path_prepend_ .
#   ...
#   4. Finally
#   $ exit

ME_=`expr "./$0" : '.*/\(.*\)$'`

# We use a trap below for cleanup.  This requires us to go through
# hoops to get the right exit status transported through the handler.
# So use 'Exit STATUS' instead of 'exit STATUS' inside of the tests.
# Turn off errexit here so that we don't trip the bug with OSF1/Tru64
# sh inside this function.
Exit () { set +e; (exit $1); exit $1; }

# Print warnings (e.g., about skipped and failed tests) to this file number.
# Override by defining to say, 9, in init.cfg, and putting say,
#   export ...ENVVAR_SETTINGS...; $(SHELL) 9>&2
# in the definition of TESTS_ENVIRONMENT in your tests/Makefile.am file.
# This is useful when using automake's parallel tests mode, to print
# the reason for skip/failure to console, rather than to the .log files.
: ${stderr_fileno_=2}

# Note that correct expansion of "$*" depends on IFS starting with ' '.
# Always write the full diagnostic to stderr.
# When stderr_fileno_ is not 2, also emit the first line of the
# diagnostic to that file descriptor.
warn_ ()
{
  # If IFS does not start with ' ', set it and emit the warning in a subshell.
  case $IFS in
    ' '*) printf '%s\n' "$*" >&2
          test $stderr_fileno_ = 2 \
            || { printf '%s\n' "$*" | sed 1q >&$stderr_fileno_ ; } ;;
    *) (IFS=' '; warn_ "$@");;
  esac
}
fail_ () { warn_ "$ME_: failed test: $@"; Exit 1; }
skip_ () { warn_ "$ME_: skipped test: $@"; Exit 77; }
fatal_ () { warn_ "$ME_: hard error: $@"; Exit 99; }
framework_failure_ () { warn_ "$ME_: set-up failure: $@"; Exit 99; }

# This is used to simplify checking of the return value
# which is useful when ensuring a command fails as desired.
# I.e., just doing `command ... &&fail=1` will not catch
# a segfault in command for example.  With this helper you
# instead check an explicit exit code like
#   returns_ 1 command ... || fail
returns_ () {
  # Disable tracing so it doesn't interfere with stderr of the wrapped command
  { set +x; } 2>/dev/null

  local exp_exit="$1"
  shift
  "$@"
  test $? -eq $exp_exit && ret_=0 || ret_=1

  if test "$VERBOSE" = yes && test "$gl_set_x_corrupts_stderr_" = false; then
    set -x
  fi
  { return $ret_; } 2>/dev/null
}

# Sanitize this shell to POSIX mode, if possible.
DUALCASE=1; export DUALCASE
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
    *posix*) set -o posix ;;
  esac
fi

# We require $(...) support unconditionally.
# We require a few additional shell features only when $EXEEXT is nonempty,
# in order to support automatic $EXEEXT emulation:
# - hyphen-containing alias names
# - we prefer to use ${var#...} substitution, rather than having
#   to work around lack of support for that feature.
# The following code attempts to find a shell with support for these features.
# If the current shell passes the test, we're done.  Otherwise, test other
# shells until we find one that passes.  If one is found, re-exec it.
# If no acceptable shell is found, skip the current test.
#
# The "...set -x; P=1 true 2>err..." test is to disqualify any shell that
# emits "P=1" into err, as /bin/sh from SunOS 5.11 and OpenBSD 4.7 do.
#
# Use "9" to indicate success (rather than 0), in case some shell acts
# like Solaris 10's /bin/sh but exits successfully instead of with status 2.

# Eval this code in a subshell to determine a shell's suitability.
# 10 - passes all tests; ok to use
#  9 - ok, but enabling "set -x" corrupts app stderr; prefer higher score
#  ? - not ok
gl_shell_test_script_='
test $(echo y) = y || exit 1
f_local_() { local v=1; }; f_local_ || exit 1
score_=10
if test "$VERBOSE" = yes; then
  test -n "$( (exec 3>&1; set -x; P=1 true 2>&3) 2> /dev/null)" && score_=9
fi
test -z "$EXEEXT" && exit $score_
shopt -s expand_aliases
alias a-b="echo zoo"
v=abx
     test ${v%x} = ab \
  && test ${v#a} = bx \
  && test $(a-b) = zoo \
  && exit $score_
'

if test "x$1" = "x--no-reexec"; then
  shift
else
  # Assume a working shell.  Export to subshells (setup_ needs this).
  gl_set_x_corrupts_stderr_=false
  export gl_set_x_corrupts_stderr_

  # Record the first marginally acceptable shell.
  marginal_=

  # Search for a shell that meets our requirements.
  for re_shell_ in __current__ "${CONFIG_SHELL:-no_shell}" \
      /bin/sh bash dash zsh pdksh fail
  do
    test "$re_shell_" = no_shell && continue

    # If we've made it all the way to the sentinel, "fail" without
    # finding even a marginal shell, skip this test.
    if test "$re_shell_" = fail; then
      test -z "$marginal_" && skip_ failed to find an adequate shell
      re_shell_=$marginal_
      break
    fi

    # When testing the current shell, simply "eval" the test code.
    # Otherwise, run it via $re_shell_ -c ...
    if test "$re_shell_" = __current__; then
      # 'eval'ing this code makes Solaris 10's /bin/sh exit with
      # $? set to 2.  It does not evaluate any of the code after the
      # "unexpected" first '('.  Thus, we must run it in a subshell.
      ( eval "$gl_shell_test_script_" ) > /dev/null 2>&1
    else
      "$re_shell_" -c "$gl_shell_test_script_" 2>/dev/null
    fi

    st_=$?

    # $re_shell_ works just fine.  Use it.
    if test $st_ = 10; then
      gl_set_x_corrupts_stderr_=false
      break
    fi

    # If this is our first marginally acceptable shell, remember it.
    if test "$st_:$marginal_" = 9: ; then
      marginal_="$re_shell_"
      gl_set_x_corrupts_stderr_=true
    fi
  done

  if test "$re_shell_" != __current__; then
    # Found a usable shell.  Preserve -v and -x.
    case $- in
      *v*x* | *x*v*) opts_=-vx ;;
      *v*) opts_=-v ;;
      *x*) opts_=-x ;;
      *) opts_= ;;
    esac
    re_shell=$re_shell_
    export re_shell
    exec "$re_shell_" $opts_ "$0" --no-reexec "$@"
    echo "$ME_: exec failed" 1>&2
    exit 127
  fi
fi

# If this is bash, turn off all aliases.
test -n "$BASH_VERSION" && unalias -a

# Note that when supporting $EXEEXT (transparently mapping from PROG_NAME to
# PROG_NAME.exe), we want to support hyphen-containing names like test-acos.
# That is part of the shell-selection test above.  Why use aliases rather
# than functions?  Because support for hyphen-containing aliases is more
# widespread than that for hyphen-containing function names.
test -n "$EXEEXT" && shopt -s expand_aliases

# Enable glibc's malloc-perturbing option.
# This is useful for exposing code that depends on the fact that
# malloc-related functions often return memory that is mostly zeroed.
# If you have the time and cycles, use valgrind to do an even better job.
: ${MALLOC_PERTURB_=87}
export MALLOC_PERTURB_

# This is a stub function that is run upon trap (upon regular exit and
# interrupt).  Override it with a per-test function, e.g., to unmount
# a partition, or to undo any other global state changes.
cleanup_ () { :; }

# Emit a header similar to that from diff -u;  Print the simulated "diff"
# command so that the order of arguments is clear.  Don't bother with @@ lines.
emit_diff_u_header_ ()
{
  printf '%s\n' "diff -u $*" \
    "--- $1	1970-01-01" \
    "+++ $2	1970-01-01"
}

# Arrange not to let diff or cmp operate on /dev/null,
# since on some systems (at least OSF/1 5.1), that doesn't work.
# When there are not two arguments, or no argument is /dev/null, return 2.
# When one argument is /dev/null and the other is not empty,
# cat the nonempty file to stderr and return 1.
# Otherwise, return 0.
compare_dev_null_ ()
{
  test $# = 2 || return 2

  if test "x$1" = x/dev/null; then
    test -s "$2" || return 0
    emit_diff_u_header_ "$@"; sed 's/^/+/' "$2"
    return 1
  fi

  if test "x$2" = x/dev/null; then
    test -s "$1" || return 0
    emit_diff_u_header_ "$@"; sed 's/^/-/' "$1"
    return 1
  fi

  return 2
}

if diff_out_=`exec 2>/dev/null; diff -u "$0" "$0" < /dev/null` \
   && diff -u Makefile "$0" 2>/dev/null | grep '^[+]#!' >/dev/null; then
  # diff accepts the -u option and does not (like AIX 7 'diff') produce an
  # extra space on column 1 of every content line.
  if test -z "$diff_out_"; then
    compare_ () { diff -u "$@"; }
  else
    compare_ ()
    {
      if diff -u "$@" > diff.out; then
        # No differences were found, but Solaris 'diff' produces output
        # "No differences encountered". Hide this output.
        rm -f diff.out
        true
      else
        cat diff.out
        rm -f diff.out
        false
      fi
    }
  fi
elif diff_out_=`exec 2>/dev/null; diff -c "$0" "$0" < /dev/null`; then
  if test -z "$diff_out_"; then
    compare_ () { diff -c "$@"; }
  else
    compare_ ()
    {
      if diff -c "$@" > diff.out; then
        # No differences were found, but AIX and HP-UX 'diff' produce output
        # "No differences encountered" or "There are no differences between the
        # files.". Hide this output.
        rm -f diff.out
        true
      else
        cat diff.out
        rm -f diff.out
        false
      fi
    }
  fi
elif cmp -s /dev/null /dev/null 2>/dev/null; then
  compare_ () { cmp -s "$@"; }
else
  compare_ () { cmp "$@"; }
fi

# Usage: compare EXPECTED ACTUAL
#
# Given compare_dev_null_'s preprocessing, defer to compare_ if 2 or more.
# Otherwise, propagate $? to caller: any diffs have already been printed.
compare ()
{
  # This looks like it can be factored to use a simple "case $?"
  # after unchecked compare_dev_null_ invocation, but that would
  # fail in a "set -e" environment.
  if compare_dev_null_ "$@"; then
    return 0
  else
    case $? in
      1) return 1;;
      *) compare_ "$@";;
    esac
  fi
}

# An arbitrary prefix to help distinguish test directories.
testdir_prefix_ () { printf gt; }

# Run the user-overridable cleanup_ function, remove the temporary
# directory and exit with the incoming value of $?.
remove_tmp_ ()
{
  __st=$?
  cleanup_
  # cd out of the directory we're about to remove
  cd "$initial_cwd_" || cd / || cd /tmp
  chmod -R u+rwx "$test_dir_"
  # If removal fails and exit status was to be 0, then change it to 1.
  rm -rf "$test_dir_" || { test $__st = 0 && __st=1; }
  exit $__st
}

# Given a directory name, DIR, if every entry in it that matches *.exe
# contains only the specified bytes (see the case stmt below), then print
# a space-separated list of those names and return 0.  Otherwise, don't
# print anything and return 1.  Naming constraints apply also to DIR.
find_exe_basenames_ ()
{
  feb_dir_=$1
  feb_fail_=0
  feb_result_=
  feb_sp_=
  for feb_file_ in $feb_dir_/*.exe; do
    # If there was no *.exe file, or there existed a file named "*.exe" that
    # was deleted between the above glob expansion and the existence test
    # below, just skip it.
    test "x$feb_file_" = "x$feb_dir_/*.exe" && test ! -f "$feb_file_" \
      && continue
    # Exempt [.exe, since we can't create a function by that name, yet
    # we can't invoke [ by PATH search anyways due to shell builtins.
    test "x$feb_file_" = "x$feb_dir_/[.exe" && continue
    case $feb_file_ in
      *[!-a-zA-Z/0-9_.+]*) feb_fail_=1; break;;
      *) # Remove leading file name components as well as the .exe suffix.
         feb_file_=${feb_file_##*/}
         feb_file_=${feb_file_%.exe}
         feb_result_="$feb_result_$feb_sp_$feb_file_";;
    esac
    feb_sp_=' '
  done
  test $feb_fail_ = 0 && printf %s "$feb_result_"
  return $feb_fail_
}

# Consider the files in directory, $1.
# For each file name of the form PROG.exe, create an alias named
# PROG that simply invokes PROG.exe, then return 0.  If any selected
# file name or the directory name, $1, contains an unexpected character,
# define no alias and return 1.
create_exe_shims_ ()
{
  case $EXEEXT in
    '') return 0 ;;
    .exe) ;;
    *) echo "$0: unexpected \$EXEEXT value: $EXEEXT" 1>&2; return 1 ;;
  esac

  base_names_=`find_exe_basenames_ $1` \
    || { echo "$0 (exe_shim): skipping directory: $1" 1>&2; return 0; }

  if test -n "$base_names_"; then
    for base_ in $base_names_; do
      alias "$base_"="$base_$EXEEXT"
    done
  fi

  return 0
}

# Use this function to prepend to PATH an absolute name for each
# specified, possibly-$initial_cwd_-relative, directory.
path_prepend_ ()
{
  while test $# != 0; do
    path_dir_=$1
    case $path_dir_ in
      '') fail_ "invalid path dir: '$1'";;
      /*) abs_path_dir_=$path_dir_;;
      *) abs_path_dir_=$initial_cwd_/$path_dir_;;
    esac
    case $abs_path_dir_ in
      *:*) fail_ "invalid path dir: '$abs_path_dir_'";;
    esac
    PATH="$abs_path_dir_:$PATH"

    # Create an alias, FOO, for each FOO.exe in this directory.
    create_exe_shims_ "$abs_path_dir_" \
      || fail_ "something failed (above): $abs_path_dir_"
    shift
  done
  export PATH
}

setup_ ()
{
  if test "$VERBOSE" = yes; then
    # Test whether set -x may cause the selected shell to corrupt an
    # application's stderr.  Many do, including zsh-4.3.10 and the /bin/sh
    # from SunOS 5.11, OpenBSD 4.7 and Irix 5.x and 6.5.
    # If enabling verbose output this way would cause trouble, simply
    # issue a warning and refrain.
    if $gl_set_x_corrupts_stderr_; then
      warn_ "using SHELL=$SHELL with 'set -x' corrupts stderr"
    else
      set -x
    fi
  fi

  initial_cwd_=$PWD
  fail=0

  pfx_=`testdir_prefix_`
  test_dir_=`mktempd_ "$initial_cwd_" "$pfx_-$ME_.XXXX"` \
    || fail_ "failed to create temporary directory in $initial_cwd_"
  cd "$test_dir_" || fail_ "failed to cd to temporary directory"

  # As autoconf-generated configure scripts do, ensure that IFS
  # is defined initially, so that saving and restoring $IFS works.
  gl_init_sh_nl_='
'
  IFS=" ""	$gl_init_sh_nl_"

  # This trap statement, along with a trap on 0 below, ensure that the
  # temporary directory, $test_dir_, is removed upon exit as well as
  # upon receipt of any of the listed signals.
  for sig_ in 1 2 3 13 15; do
    eval "trap 'Exit $(expr $sig_ + 128)' $sig_"
  done
}

# Create a temporary directory, much like mktemp -d does.
# Written by Jim Meyering.
#
# Usage: mktempd_ /tmp phoey.XXXXXXXXXX
#
# First, try to use the mktemp program.
# Failing that, we'll roll our own mktemp-like function:
#  - try to get random bytes from /dev/urandom
#  - failing that, generate output from a combination of quickly-varying
#      sources and gzip.  Ignore non-varying gzip header, and extract
#      "random" bits from there.
#  - given those bits, map to file-name bytes using tr, and try to create
#      the desired directory.
#  - make only $MAX_TRIES_ attempts

# Helper function.  Print $N pseudo-random bytes from a-zA-Z0-9.
rand_bytes_ ()
{
  n_=$1

  # Maybe try openssl rand -base64 $n_prime_|tr '+/=\012' abcd first?
  # But if they have openssl, they probably have mktemp, too.

  chars_=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
  dev_rand_=/dev/urandom
  if test -r "$dev_rand_"; then
    # Note: 256-length($chars_) == 194; 3 copies of $chars_ is 186 + 8 = 194.
    dd ibs=$n_ count=1 if=$dev_rand_ 2>/dev/null \
      | LC_ALL=C tr -c $chars_ 01234567$chars_$chars_$chars_
    return
  fi

  n_plus_50_=`expr $n_ + 50`
  cmds_='date; date +%N; free; who -a; w; ps auxww; ps ef; netstat -n'
  data_=` (eval "$cmds_") 2>&1 | gzip `

  # Ensure that $data_ has length at least 50+$n_
  while :; do
    len_=`echo "$data_"|wc -c`
    test $n_plus_50_ -le $len_ && break;
    data_=` (echo "$data_"; eval "$cmds_") 2>&1 | gzip `
  done

  echo "$data_" \
    | dd bs=1 skip=50 count=$n_ 2>/dev/null \
    | LC_ALL=C tr -c $chars_ 01234567$chars_$chars_$chars_
}

mktempd_ ()
{
  case $# in
  2);;
  *) fail_ "Usage: mktempd_ DIR TEMPLATE";;
  esac

  destdir_=$1
  template_=$2

  MAX_TRIES_=4

  # Disallow any trailing slash on specified destdir:
  # it would subvert the post-mktemp "case"-based destdir test.
  case $destdir_ in
  /) ;;
  */) fail_ "invalid destination dir: remove trailing slash(es)";;
  esac

  case $template_ in
  *XXXX) ;;
  *) fail_ \
       "invalid template: $template_ (must have a suffix of at least 4 X's)";;
  esac

  # First, try to use mktemp.
  d=`unset TMPDIR; { mktemp -d -t -p "$destdir_" "$template_"; } 2>/dev/null` \
    || fail=1

  # The resulting name must be in the specified directory.
  case $d in "$destdir_"*);; *) fail=1;; esac

  # It must have created the directory.
  test -d "$d" || fail=1

  # It must have 0700 permissions.  Handle sticky "S" bits.
  perms=`ls -dgo "$d" 2>/dev/null|tr S -` || fail=1
  case $perms in drwx------*) ;; *) fail=1;; esac

  test $fail = 0 && {
    echo "$d"
    return
  }

  # If we reach this point, we'll have to create a directory manually.

  # Get a copy of the template without its suffix of X's.
  base_template_=`echo "$template_"|sed 's/XX*$//'`

  # Calculate how many X's we've just removed.
  template_length_=`echo "$template_" | wc -c`
  nx_=`echo "$base_template_" | wc -c`
  nx_=`expr $template_length_ - $nx_`

  err_=
  i_=1
  while :; do
    X_=`rand_bytes_ $nx_`
    candidate_dir_="$destdir_/$base_template_$X_"
    err_=`mkdir -m 0700 "$candidate_dir_" 2>&1` \
      && { echo "$candidate_dir_"; return; }
    test $MAX_TRIES_ -le $i_ && break;
    i_=`expr $i_ + 1`
  done
  fail_ "$err_"
}

# If you want to override the testdir_prefix_ function,
# or to add more utility functions, use this file.
test -f "$srcdir/init.cfg" \
  && . "$srcdir/init.cfg"

setup_ "$@"
# This trap is here, rather than in the setup_ function, because some
# shells run the exit trap at shell function exit, rather than script exit.
trap remove_tmp_ 0
#!/bin/sh

tmpfiles=""
trap 'rm -fr $tmpfiles' 1 2 3 15

tmpfiles="$tmpfiles t-bin-out0.tmp t-bin-out1.tmp t-bin-out2.tmp"
./test-binary-io${EXEEXT} 1 > t-bin-out1.tmp || exit 1
cmp t-bin-out0.tmp t-bin-out1.tmp > /dev/null || exit 1
./test-binary-io${EXEEXT} 2 > t-bin-out2.tmp || exit 1
cmp t-bin-out0.tmp t-bin-out2.tmp > /dev/null || exit 1

rm -fr $tmpfiles

exit 0
#!/bin/sh

# Test in an ISO-8859-1 or ISO-8859-15 locale.
: ${LOCALE_FR=fr_FR}
if test $LOCALE_FR = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no traditional french locale is installed"
  else
    echo "Skipping test: no traditional french locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_FR \
./test-btowc${EXEEXT} 1
#!/bin/sh

# Test whether a specific UTF-8 locale is installed.
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
if test $LOCALE_FR_UTF8 = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no french Unicode locale is installed"
  else
    echo "Skipping test: no french Unicode locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_FR_UTF8 \
./test-btowc${EXEEXT} 2
#!/bin/sh

# Test in the C locale.
./test-c-strcasecmp${EXEEXT} || exit 1
./test-c-strncasecmp${EXEEXT} || exit 1

# Test in an ISO-8859-1 or ISO-8859-15 locale.
: ${LOCALE_FR=fr_FR}
if test $LOCALE_FR != none; then
  LC_ALL=$LOCALE_FR ./test-c-strcasecmp${EXEEXT} locale || exit 1
  LC_ALL=$LOCALE_FR ./test-c-strncasecmp${EXEEXT} locale || exit 1
fi

# Test in a Turkish UTF-8 locale.
: ${LOCALE_TR_UTF8=tr_TR.UTF-8}
if test $LOCALE_TR_UTF8 != none; then
  LC_ALL=$LOCALE_TR_UTF8 ./test-c-strcasecmp${EXEEXT} locale || exit 1
  LC_ALL=$LOCALE_TR_UTF8 ./test-c-strncasecmp${EXEEXT} locale || exit 1
fi

exit 0
#!/bin/sh
: ${srcdir=.}
. "$srcdir/init.sh"; path_prepend_ .

echo Hello world > in.tmp
echo world > xout.tmp

fail=0
# Test with seekable stdin; follow-on process must see remaining data
(test-closein; cat) < in.tmp > out1.tmp || fail=1
cmp out1.tmp in.tmp || fail=1

(test-closein consume; cat) < in.tmp > out2.tmp || fail=1
cmp out2.tmp xout.tmp || fail=1

# Test for lack of error on pipe.  Ignore any EPIPE failures from cat.
cat in.tmp 2>/dev/null | test-closein || fail=1

cat in.tmp 2>/dev/null | test-closein consume || fail=1

# Test for lack of error when nothing is read
test-closein </dev/null || fail=1

test-closein <&- || fail=1

# Test for no error when EOF is read early
test-closein consume </dev/null || fail=1

# Test for error when read fails because no file available
test-closein consume close <&- 2>/dev/null && fail=1

Exit $fail
#!/bin/sh

# Test copy-acl on the file system of /var/tmp, which usually is a local
# file system.

if test -d /var/tmp; then
  TMPDIR=/var/tmp
else
  TMPDIR=/tmp
fi
export TMPDIR

exec "${srcdir}/test-copy-acl.sh"
#!/bin/sh

# Test copy-acl on the file system of the build directory, which may be
# a local file system or NFS mounted.

TMPDIR=`pwd`
export TMPDIR

exec "${srcdir}/test-copy-acl.sh"
#!/bin/sh

# Show all commands when run with environment variable VERBOSE=yes.
test -z "$VERBOSE" || set -x

test "$USE_ACL" = 0 &&
  {
    echo "Skipping test: insufficient ACL support"
    exit 77
  }

# func_tmpdir
# creates a temporary directory.
# Sets variable
# - tmp             pathname of freshly created temporary directory
func_tmpdir ()
{
  # Use the environment variable TMPDIR, falling back to /tmp. This allows
  # users to specify a different temporary directory, for example, if their
  # /tmp is filled up or too small.
  : ${TMPDIR=/tmp}
  {
    # Use the mktemp program if available. If not available, hide the error
    # message.
    tmp=`(umask 077 && mktemp -d "$TMPDIR/glXXXXXX") 2>/dev/null` &&
    test -n "$tmp" && test -d "$tmp"
  } ||
  {
    # Use a simple mkdir command. It is guaranteed to fail if the directory
    # already exists.  $RANDOM is bash specific and expands to empty in shells
    # other than bash, ksh and zsh.  Its use does not increase security;
    # rather, it minimizes the probability of failure in a very cluttered /tmp
    # directory.
    tmp=$TMPDIR/gl$$-$RANDOM
    (umask 077 && mkdir "$tmp")
  } ||
  {
    echo "$0: cannot create a temporary directory in $TMPDIR" >&2
    exit 1
  }
}

func_tmpdir
builddir=`pwd`
cd "$builddir" ||
  {
    echo "$0: cannot determine build directory (unreadable parent dir?)" >&2
    exit 1
  }
# Switch to a temporary directory, to increase the likelihood that ACLs are
# supported on the current file system. (/tmp is usually locally mounted,
# whereas the build dir is sometimes NFS-mounted.)
( cd "$tmp"

  # Prepare tmpfile0.
  rm -f tmpfile[0-9] tmpaclout[0-2]
  echo "Simple contents" > tmpfile0
  chmod 600 tmpfile0

  # Classification of the platform according to the programs available for
  # manipulating ACLs.
  # Possible values are:
  #   linux, cygwin, freebsd, solaris, hpux, hpuxjfs, osf1, aix, macosx, irix, none.
  # TODO: Support also native Windows platforms (mingw).
  acl_flavor=none
  if (getfacl tmpfile0 >/dev/null) 2>/dev/null; then
    # Platforms with the getfacl and setfacl programs.
    # Linux, FreeBSD, Solaris, Cygwin.
    if (setfacl --help >/dev/null) 2>/dev/null; then
      # Linux, Cygwin.
      if (LC_ALL=C setfacl --help | grep ' --set-file' >/dev/null) 2>/dev/null; then
        # Linux.
        acl_flavor=linux
      else
        acl_flavor=cygwin
      fi
    else
      # FreeBSD, Solaris.
      if (LC_ALL=C setfacl 2>&1 | grep '\-x entries' >/dev/null) 2>/dev/null; then
        # FreeBSD.
        acl_flavor=freebsd
      else
        # Solaris.
        acl_flavor=solaris
      fi
    fi
  else
    if (lsacl / >/dev/null) 2>/dev/null; then
      # Platforms with the lsacl and chacl programs.
      # HP-UX, sometimes also IRIX.
      if (getacl tmpfile0 >/dev/null) 2>/dev/null; then
        # HP-UX 11.11 or newer.
        acl_flavor=hpuxjfs
      else
        # HP-UX 11.00.
        acl_flavor=hpux
      fi
    else
      if (getacl tmpfile0 >/dev/null) 2>/dev/null; then
        # Tru64, NonStop Kernel.
        if (getacl -m tmpfile0 >/dev/null) 2>/dev/null; then
          # Tru64.
          acl_flavor=osf1
        else
          # NonStop Kernel.
          acl_flavor=nsk
        fi
      else
        if (aclget tmpfile0 >/dev/null) 2>/dev/null; then
          # AIX.
          acl_flavor=aix
        else
          if (fsaclctl -v >/dev/null) 2>/dev/null; then
            # Mac OS X.
            acl_flavor=macosx
          else
            if test -f /sbin/chacl; then
              # IRIX.
              acl_flavor=irix
            fi
          fi
        fi
      fi
    fi
  fi

  # Define a function to test for the same ACLs, from the point of view of
  # the programs.
  # func_test_same_acls file1 file2
  case $acl_flavor in
    linux | cygwin | freebsd | solaris)
      func_test_same_acls ()
      {
        getfacl "$1" | sed -e "s/$1/FILENAME/g" > tmpaclout1
        getfacl "$2" | sed -e "s/$2/FILENAME/g" > tmpaclout2
        cmp tmpaclout1 tmpaclout2 > /dev/null
      }
      ;;
    hpux)
      func_test_same_acls ()
      {
        lsacl "$1" | sed -e "s/$1/FILENAME/g" > tmpaclout1
        lsacl "$2" | sed -e "s/$2/FILENAME/g" > tmpaclout2
        cmp tmpaclout1 tmpaclout2 > /dev/null
      }
      ;;
    hpuxjfs)
      func_test_same_acls ()
      {
        { lsacl "$1" | sed -e "s/$1/FILENAME/g" > tmpaclout1
          lsacl "$2" | sed -e "s/$2/FILENAME/g" > tmpaclout2
          cmp tmpaclout1 tmpaclout2 > /dev/null
        } &&
        { getacl "$1" | sed -e "s/$1/FILENAME/g" > tmpaclout1
          getacl "$2" | sed -e "s/$2/FILENAME/g" > tmpaclout2
          cmp tmpaclout1 tmpaclout2 > /dev/null
        }
      }
      ;;
    osf1 | nsk)
      func_test_same_acls ()
      {
        getacl "$1" | sed -e "s/$1/FILENAME/g" > tmpaclout1
        getacl "$2" | sed -e "s/$2/FILENAME/g" > tmpaclout2
        cmp tmpaclout1 tmpaclout2 > /dev/null
      }
      ;;
    aix)
      func_test_same_acls ()
      {
        aclget "$1" > tmpaclout1
        aclget "$2" > tmpaclout2
        cmp tmpaclout1 tmpaclout2 > /dev/null
      }
      ;;
    macosx)
      func_test_same_acls ()
      {
        /bin/ls -le "$1" | sed -e "s/$1/FILENAME/g" > tmpaclout1
        /bin/ls -le "$2" | sed -e "s/$2/FILENAME/g" > tmpaclout2
        cmp tmpaclout1 tmpaclout2 > /dev/null
      }
      ;;
    irix)
      func_test_same_acls ()
      {
        /bin/ls -lD "$1" | sed -e "s/$1/FILENAME/g" > tmpaclout1
        /bin/ls -lD "$2" | sed -e "s/$2/FILENAME/g" > tmpaclout2
        cmp tmpaclout1 tmpaclout2 > /dev/null
      }
      ;;
    none)
      func_test_same_acls ()
      {
        :
      }
      ;;
  esac

  # func_test_copy file1 file2
  # copies file1 to file2 and verifies the permissions and ACLs are the same
  # on both.
  func_test_copy ()
  {
    echo "Simple contents" > "$2"
    chmod 600 "$2"
    "$builddir"/test-copy-acl${EXEEXT} "$1" "$2" || exit 1
    "$builddir"/test-sameacls${EXEEXT} "$1" "$2" || exit 1
    func_test_same_acls                "$1" "$2" || exit 1
  }

  func_test_copy tmpfile0 tmpfile1

  if test $acl_flavor != none; then
    # A POSIX compliant 'id' program.
    if test -f /usr/xpg4/bin/id; then
      ID=/usr/xpg4/bin/id
    else
      ID=id
    fi
    # Use a user and group id different from the current one, to avoid
    # redundant/ambiguous ACLs.
    myuid=`$ID -u`
    mygid=`$ID -g`
    auid=1
    if test "$auid" = "$myuid"; then auid=2; fi
    agid=1
    if test "$agid" = "$mygid"; then agid=2; fi

    case $acl_flavor in
      linux | freebsd | solaris)

        # Set an ACL for a user.
        setfacl -m user:$auid:1 tmpfile0

        func_test_copy tmpfile0 tmpfile2

        # Set an ACL for a group.
        setfacl -m group:$agid:4 tmpfile0

        func_test_copy tmpfile0 tmpfile3

        # Set an ACL for other.
        case $acl_flavor in
          freebsd) setfacl -m other::4 tmpfile0 ;;
          solaris) chmod o+r tmpfile0 ;;
          *)       setfacl -m other:4 tmpfile0 ;;
        esac

        func_test_copy tmpfile0 tmpfile4

        # Remove the ACL for the user.
        case $acl_flavor in
          linux)   setfacl -x user:$auid tmpfile0 ;;
          freebsd) setfacl -x user:$auid:1 tmpfile0 ;;
          *)       setfacl -d user:$auid:1 tmpfile0 ;;
        esac

        func_test_copy tmpfile0 tmpfile5

        # Remove the ACL for other.
        case $acl_flavor in
          linux | solaris) ;; # impossible
          freebsd) setfacl -x other::4 tmpfile0 ;;
          *)       setfacl -d other:4 tmpfile0 ;;
        esac

        func_test_copy tmpfile0 tmpfile6

        # Remove the ACL for the group.
        case $acl_flavor in
          linux)   setfacl -x group:$agid tmpfile0 ;;
          freebsd) setfacl -x group:$agid:4 tmpfile0 ;;
          *)       setfacl -d group:$agid:4 tmpfile0 ;;
        esac

        func_test_copy tmpfile0 tmpfile7

        # Delete all optional ACLs.
        case $acl_flavor in
          linux | freebsd)
            setfacl -m user:$auid:1 tmpfile0
            setfacl -b tmpfile0
            ;;
          *)
            setfacl -s user::6,group::0,other:0 tmpfile0 ;;
        esac

        func_test_copy tmpfile0 tmpfile8

        # Copy ACLs from a file that has no ACLs.
        echo > tmpfile9
        chmod a+x tmpfile9
        case $acl_flavor in
          linux)   getfacl tmpfile9 | setfacl --set-file=- tmpfile0 ;;
          freebsd) ;;
          *)       getfacl tmpfile9 | setfacl -f - tmpfile0 ;;
        esac
        rm -f tmpfile9

        func_test_copy tmpfile0 tmpfile9

        ;;

      cygwin)

        # Set an ACL for a group.
        setfacl -m group:0:1 tmpfile0

        func_test_copy tmpfile0 tmpfile2

        # Set an ACL for other.
        setfacl -m other:4 tmpfile0

        func_test_copy tmpfile0 tmpfile4

        # Remove the ACL for the group.
        setfacl -d group:0 tmpfile0

        func_test_copy tmpfile0 tmpfile5

        # Remove the ACL for other.
        setfacl -d other:4 tmpfile0

        func_test_copy tmpfile0 tmpfile6

        # Delete all optional ACLs.
        setfacl -s user::6,group::0,other:0 tmpfile0

        func_test_copy tmpfile0 tmpfile8

        # Copy ACLs from a file that has no ACLs.
        echo > tmpfile9
        chmod a+x tmpfile9
        getfacl tmpfile9 | setfacl -f - tmpfile0
        rm -f tmpfile9

        func_test_copy tmpfile0 tmpfile9

        ;;

      hpux)

        # Set an ACL for a user.
        orig=`lsacl tmpfile0 | sed -e 's/ tmpfile0$//'`
        chacl -r "${orig}($auid.%,--x)" tmpfile0

        func_test_copy tmpfile0 tmpfile2

        # Set an ACL for a group.
        orig=`lsacl tmpfile0 | sed -e 's/ tmpfile0$//'`
        chacl -r "${orig}(%.$agid,r--)" tmpfile0

        func_test_copy tmpfile0 tmpfile3

        # Set an ACL for other.
        orig=`lsacl tmpfile0 | sed -e 's/ tmpfile0$//'`
        chacl -r "${orig}(%.%,r--)" tmpfile0

        func_test_copy tmpfile0 tmpfile4

        # Remove the ACL for the user.
        chacl -d "($auid.%,--x)" tmpfile0

        func_test_copy tmpfile0 tmpfile5

        # Remove the ACL for the group.
        chacl -d "(%.$agid,r--)" tmpfile0

        func_test_copy tmpfile0 tmpfile6

        # Delete all optional ACLs.
        chacl -z tmpfile0

        func_test_copy tmpfile0 tmpfile8

        # Copy ACLs from a file that has no ACLs.
        echo > tmpfile9
        chmod a+x tmpfile9
        orig=`lsacl tmpfile9 | sed -e 's/ tmpfile9$//'`
        rm -f tmpfile9
        chacl -r "${orig}" tmpfile0

        func_test_copy tmpfile0 tmpfile9

        ;;

      hpuxjfs)

        # Set an ACL for a user.
        orig=`lsacl tmpfile0 | sed -e 's/ tmpfile0$//'`
        chacl -r "${orig}($auid.%,--x)" tmpfile0 \
          || setacl -m user:$auid:1 tmpfile0

        func_test_copy tmpfile0 tmpfile2

        # Set an ACL for a group.
        orig=`lsacl tmpfile0 | sed -e 's/ tmpfile0$//'`
        chacl -r "${orig}(%.$agid,r--)" tmpfile0 \
          || setacl -m group:$agid:4 tmpfile0

        func_test_copy tmpfile0 tmpfile3

        # Set an ACL for other.
        orig=`lsacl tmpfile0 | sed -e 's/ tmpfile0$//'`
        chacl -r "${orig}(%.%,r--)" tmpfile0 \
          || setacl -m other:4 tmpfile0

        func_test_copy tmpfile0 tmpfile4

        # Remove the ACL for the user.
        chacl -d "($auid.%,--x)" tmpfile0 \
          || setacl -d user:$auid tmpfile0

        func_test_copy tmpfile0 tmpfile5

        # Remove the ACL for the group.
        chacl -d "(%.$agid,r--)" tmpfile0 \
          || setacl -d group:$agid tmpfile0

        func_test_copy tmpfile0 tmpfile6

        # Delete all optional ACLs.
        chacl -z tmpfile0 \
          || { setacl -m user:$auid:1 tmpfile0
               setacl -s user::6,group::0,class:7,other:0 tmpfile0
             }

        func_test_copy tmpfile0 tmpfile8

        # Copy ACLs from a file that has no ACLs.
        echo > tmpfile9
        chmod a+x tmpfile9
        orig=`lsacl tmpfile9 | sed -e 's/ tmpfile9$//'`
        getacl tmpfile9 > tmpaclout0
        rm -f tmpfile9
        chacl -r "${orig}" tmpfile0 \
          || setacl -f tmpaclout0 tmpfile0

        func_test_copy tmpfile0 tmpfile9

        ;;

      osf1)

        # Set an ACL for a user.
        setacl -u user:$auid:1 tmpfile0

        func_test_copy tmpfile0 tmpfile2

        # Set an ACL for a group.
        setacl -u group:$agid:4 tmpfile0

        func_test_copy tmpfile0 tmpfile3

        # Set an ACL for other.
        setacl -u other::4 tmpfile0

        func_test_copy tmpfile0 tmpfile4

        # Remove the ACL for the user.
        setacl -x user:$auid:1 tmpfile0

        func_test_copy tmpfile0 tmpfile5

        if false; then # would give an error "can't set ACL: Invalid argument"
          # Remove the ACL for other.
          setacl -x other::4 tmpfile0

          func_test_copy tmpfile0 tmpfile6
        fi

        # Remove the ACL for the group.
        setacl -x group:$agid:4 tmpfile0

        func_test_copy tmpfile0 tmpfile7

        # Delete all optional ACLs.
        setacl -u user:$auid:1 tmpfile0
        setacl -b tmpfile0

        func_test_copy tmpfile0 tmpfile8

        # Copy ACLs from a file that has no ACLs.
        echo > tmpfile9
        chmod a+x tmpfile9
        getacl tmpfile9 > tmpaclout0
        setacl -b -U tmpaclout0 tmpfile0
        rm -f tmpfile9

        func_test_copy tmpfile0 tmpfile9

        ;;

      nsk)

        # Set an ACL for a user.
        setacl -m user:$auid:1 tmpfile0

        func_test_copy tmpfile0 tmpfile2

        # Set an ACL for a group.
        setacl -m group:$agid:4 tmpfile0

        func_test_copy tmpfile0 tmpfile3

        # Set an ACL for other.
        setacl -m other:4 tmpfile0

        func_test_copy tmpfile0 tmpfile4

        # Remove the ACL for the user.
        setacl -d user:$auid tmpfile0

        func_test_copy tmpfile0 tmpfile5

        # Remove the ACL for the group.
        setacl -d group:$agid tmpfile0

        func_test_copy tmpfile0 tmpfile6

        # Delete all optional ACLs.
        setacl -m user:$auid:1 tmpfile0
        setacl -s user::6,group::0,class:7,other:0 tmpfile0

        func_test_copy tmpfile0 tmpfile8

        # Copy ACLs from a file that has no ACLs.
        echo > tmpfile9
        chmod a+x tmpfile9
        getacl tmpfile9 > tmpaclout0
        setacl -f tmpaclout0 tmpfile0
        rm -f tmpfile9

        func_test_copy tmpfile0 tmpfile9

        ;;

      aix)

        # Set an ACL for a user.
        { aclget tmpfile0 | sed -e 's/disabled$/enabled/'; echo "        permit --x u:$auid"; } | aclput tmpfile0

        func_test_copy tmpfile0 tmpfile2

        # Set an ACL for a group.
        { aclget tmpfile0 | sed -e 's/disabled$/enabled/'; echo "        permit r-- g:$agid"; } | aclput tmpfile0

        func_test_copy tmpfile0 tmpfile3

        # Set an ACL for other.
        chmod o+r tmpfile0

        func_test_copy tmpfile0 tmpfile4

        # Remove the ACL for the user.
        aclget tmpfile0 | grep -v ' u:[^ ]*$' | aclput tmpfile0

        func_test_copy tmpfile0 tmpfile5

        # Remove the ACL for the group.
        aclget tmpfile0 | grep -v ' g:[^ ]*$' | aclput tmpfile0

        func_test_copy tmpfile0 tmpfile7

        # Delete all optional ACLs.
        aclget tmpfile0 | sed -e 's/enabled$/disabled/' | sed -e '/disabled$/q' | aclput tmpfile0

        func_test_copy tmpfile0 tmpfile8

        # Copy ACLs from a file that has no ACLs.
        echo > tmpfile9
        chmod a+x tmpfile9
        aclget tmpfile9 | aclput tmpfile0
        rm -f tmpfile9

        func_test_copy tmpfile0 tmpfile9

        ;;

      macosx)

        # Set an ACL for a user.
        /bin/chmod +a "user:daemon allow execute" tmpfile0

        func_test_copy tmpfile0 tmpfile2

        # Set an ACL for a group.
        /bin/chmod +a "group:daemon allow read" tmpfile0

        func_test_copy tmpfile0 tmpfile3

        # Set an ACL for other.
        chmod o+r tmpfile0

        func_test_copy tmpfile0 tmpfile4

        # Remove the ACL for the user.
        /bin/chmod -a "user:daemon allow execute" tmpfile0

        func_test_copy tmpfile0 tmpfile5

        # Remove the ACL for the group.
        /bin/chmod -a "group:daemon allow read" tmpfile0

        func_test_copy tmpfile0 tmpfile7

        # Delete all optional ACLs.
        /bin/chmod -N tmpfile0

        func_test_copy tmpfile0 tmpfile8

        # Copy ACLs from a file that has no ACLs.
        echo > tmpfile9
        chmod a+x tmpfile9
        { /bin/ls -le tmpfile9 | sed -n -e 's/^ [0-9][0-9]*: //p'; echo; } | /bin/chmod -E tmpfile0
        rm -f tmpfile9

        func_test_copy tmpfile0 tmpfile9

        ;;

      irix)

        # Set an ACL for a user.
        /sbin/chacl user::rw-,group::---,other::---,user:$auid:--x tmpfile0

        func_test_copy tmpfile0 tmpfile2

        # Set an ACL for a group.
        /sbin/chacl user::rw-,group::---,other::---,user:$auid:--x,group:$agid:r-- tmpfile0

        func_test_copy tmpfile0 tmpfile3

        # Set an ACL for other.
        /sbin/chacl user::rw-,group::---,user:$auid:--x,group:$agid:r--,other::r-- tmpfile0

        func_test_copy tmpfile0 tmpfile4

        # Remove the ACL for the user.
        /sbin/chacl user::rw-,group::---,group:$agid:r--,other::r-- tmpfile0

        func_test_copy tmpfile0 tmpfile5

        # Remove the ACL for the group.
        /sbin/chacl user::rw-,group::---,other::r-- tmpfile0

        func_test_copy tmpfile0 tmpfile7

        ;;

    esac
  fi

  rm -f tmpfile[0-9] tmpaclout[0-2]
) || exit 1

rm -rf "$tmp"
exit 0
#! /bin/sh
# Test suite for exclude.
# Copyright (C) 2009-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/init.sh"; path_prepend_ .
fail=0

# Test literal matches

cat > in <<EOT
foo*
bar
Baz
EOT

cat > expected <<EOT
foo: 0
foo*: 1
bar: 1
foobar: 0
baz: 0
bar/qux: 0
EOT

test-exclude in -- foo 'foo*' bar foobar baz bar/qux > out || exit $?

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
case $(echo r | tr -d '\r') in '') cr='\015';; *) cr='\r';; esac

# normalize output
LC_ALL=C tr -d "$cr" < out > k && mv k out

compare expected out || fail=1

Exit $fail
#! /bin/sh
# Test suite for exclude.
# Copyright (C) 2009-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/init.sh"; path_prepend_ .
fail=0

cat > in <<EOT
foo*
bar
Baz
EOT

# Test case-insensitive literal matches

cat > expected <<EOT
foo: 0
foo*: 1
bar: 1
foobar: 0
baz: 1
bar/qux: 0
EOT

test-exclude -casefold in -- foo 'foo*' bar foobar baz bar/qux > out || exit $?

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
case $(echo r | tr -d '\r') in '') cr='\015';; *) cr='\r';; esac

# normalize output
LC_ALL=C tr -d "$cr" < out > k && mv k out

compare expected out || fail=1

Exit $fail
#! /bin/sh
# Test suite for exclude.
# Copyright (C) 2009-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/init.sh"; path_prepend_ .
fail=0

# Test include

cat > in <<EOT
foo*
bar
Baz
EOT

cat > expected <<EOT
foo: 1
foo*: 0
bar: 0
foobar: 1
baz: 1
bar/qux: 1
EOT

test-exclude -include in -- foo 'foo*' bar foobar baz bar/qux > out || exit $?

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
case $(echo r | tr -d '\r') in '') cr='\015';; *) cr='\r';; esac

# normalize output
LC_ALL=C tr -d "$cr" < out > k && mv k out

compare expected out || fail=1

Exit $fail
#! /bin/sh
# Test suite for exclude.
# Copyright (C) 2009-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/init.sh"; path_prepend_ .
fail=0

# Test wildcard matching

cat > in <<EOT
foo*
bar
Baz
EOT

cat > expected <<EOT
foobar: 1
EOT

test-exclude -wildcards in -- foobar > out || exit $?

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
case $(echo r | tr -d '\r') in '') cr='\015';; *) cr='\r';; esac

# normalize output
LC_ALL=C tr -d "$cr" < out > k && mv k out

compare expected out || fail=1

Exit $fail
#! /bin/sh
# Test suite for exclude.
# Copyright (C) 2009-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/init.sh"; path_prepend_ .
fail=0

# Test FNM_LEADING_DIR

cat > in <<EOT
foo*
bar
Baz
EOT

cat > expected <<EOT
bar: 1
bar/qux: 1
barz: 0
foo/bar: 1
EOT

test-exclude -leading_dir in -- bar bar/qux barz foo/bar > out || exit $?

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
case $(echo r | tr -d '\r') in '') cr='\015';; *) cr='\r';; esac

# normalize output
LC_ALL=C tr -d "$cr" < out > k && mv k out

compare expected out || fail=1

Exit $fail
#! /bin/sh
# Test suite for exclude.
# Copyright (C) 2009-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/init.sh"; path_prepend_ .
fail=0

# Test anchored

cat > in <<EOT
foo*
bar
Baz
EOT

cat > expected <<EOT
bar: 1
foo/bar: 0
EOT

test-exclude -anchored in -- bar foo/bar > out || exit $?

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
case $(echo r | tr -d '\r') in '') cr='\015';; *) cr='\r';; esac

# normalize output
LC_ALL=C tr -d "$cr" < out > k && mv k out

compare expected out || fail=1

Exit $fail
#! /bin/sh
# Test suite for exclude.
# Copyright (C) 2009-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/init.sh"; path_prepend_ .
fail=0

# Test exclude precedence

cat > in <<EOT
foo*
bar
Baz
EOT

cat > expected <<EOT
bar: 0
bar: 1
EOT

test-exclude in -include in -- bar > out || exit $?
test-exclude -include in -no-include in -- bar >> out || exit $?

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
case $(echo r | tr -d '\r') in '') cr='\015';; *) cr='\r';; esac

# normalize output
LC_ALL=C tr -d "$cr" < out > k && mv k out

compare expected out || fail=1

Exit $fail
#! /bin/sh
# Test suite for exclude.
# Copyright (C) 2010-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/init.sh"; path_prepend_ .
fail=0

# Test escaped metacharacters.

cat > in <<'EOT'
f\*e
b[a\*]r
EOT

cat > expected <<'EOT'
f*e: 1
file: 0
bar: 1
EOT

test-exclude -wildcards in -- 'f*e' 'file' 'bar' > out || exit $?

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
case $(echo r | tr -d '\r') in '') cr='\015';; *) cr='\r';; esac

# normalize output
LC_ALL=C tr -d "$cr" < out > k && mv k out

compare expected out || fail=1

Exit $fail
#!/bin/sh

# Execute the test only with seekable input stream.
# The behaviour of fflush() on a non-seekable input stream is undefined.
./test-fflush2${EXEEXT} 1 < "$srcdir/test-fflush2.sh" || exit $?
./test-fflush2${EXEEXT} 2 < "$srcdir/test-fflush2.sh" || exit $?
#cat "$srcdir/test-fflush2.sh" | ./test-fflush2${EXEEXT} || exit $?

exit 0
#!/bin/sh

# Test file-has-acl on the file system of /var/tmp, which usually is a local
# file system.

if test -d /var/tmp; then
  TMPDIR=/var/tmp
else
  TMPDIR=/tmp
fi
export TMPDIR

exec "${srcdir}/test-file-has-acl.sh"
#!/bin/sh

# Test file-has-acl on the file system of the build directory, which may be
# a local file system or NFS mounted.

TMPDIR=`pwd`
export TMPDIR

exec "${srcdir}/test-file-has-acl.sh"
#!/bin/sh

# Show all commands when run with environment variable VERBOSE=yes.
test -z "$VERBOSE" || set -x

test "$USE_ACL" = 0 &&
  {
    echo "Skipping test: insufficient ACL support"
    exit 77
  }

# func_tmpdir
# creates a temporary directory.
# Sets variable
# - tmp             pathname of freshly created temporary directory
func_tmpdir ()
{
  # Use the environment variable TMPDIR, falling back to /tmp. This allows
  # users to specify a different temporary directory, for example, if their
  # /tmp is filled up or too small.
  : ${TMPDIR=/tmp}
  {
    # Use the mktemp program if available. If not available, hide the error
    # message.
    tmp=`(umask 077 && mktemp -d "$TMPDIR/glXXXXXX") 2>/dev/null` &&
    test -n "$tmp" && test -d "$tmp"
  } ||
  {
    # Use a simple mkdir command. It is guaranteed to fail if the directory
    # already exists.  $RANDOM is bash specific and expands to empty in shells
    # other than bash, ksh and zsh.  Its use does not increase security;
    # rather, it minimizes the probability of failure in a very cluttered /tmp
    # directory.
    tmp=$TMPDIR/gl$$-$RANDOM
    (umask 077 && mkdir "$tmp")
  } ||
  {
    echo "$0: cannot create a temporary directory in $TMPDIR" >&2
    exit 1
  }
}

func_tmpdir
builddir=`pwd`
cd "$builddir" ||
  {
    echo "$0: cannot determine build directory (unreadable parent dir?)" >&2
    exit 1
  }
# Switch to a temporary directory, to increase the likelihood that ACLs are
# supported on the current file system. (/tmp is usually locally mounted,
# whereas the build dir is sometimes NFS-mounted.)
( cd "$tmp"

  # Prepare tmpfile0.
  rm -f tmpfile[0-9] tmp.err
  echo "Simple contents" > tmpfile0
  chmod 600 tmpfile0

  # Classification of the platform according to the programs available for
  # manipulating ACLs.
  # Possible values are:
  #   linux, cygwin, freebsd, solaris, hpux, hpuxjfs, osf1, aix, macosx, irix, none.
  # TODO: Support also native Windows platforms (mingw).
  acl_flavor=none
  if (getfacl tmpfile0 >/dev/null) 2>/dev/null; then
    # Platforms with the getfacl and setfacl programs.
    # Linux, FreeBSD, Solaris, Cygwin.
    if (setfacl --help >/dev/null) 2>/dev/null; then
      # Linux, Cygwin.
      if (LC_ALL=C setfacl --help | grep ' --set-file' >/dev/null) 2>/dev/null; then
        # Linux.
        acl_flavor=linux
      else
        acl_flavor=cygwin
      fi
    else
      # FreeBSD, Solaris.
      if (LC_ALL=C setfacl 2>&1 | grep '\-x entries' >/dev/null) 2>/dev/null; then
        # FreeBSD.
        acl_flavor=freebsd
      else
        # Solaris.
        acl_flavor=solaris
      fi
    fi
  else
    if (lsacl / >/dev/null) 2>/dev/null; then
      # Platforms with the lsacl and chacl programs.
      # HP-UX, sometimes also IRIX.
      if (getacl tmpfile0 >/dev/null) 2>/dev/null; then
        # HP-UX 11.11 or newer.
        acl_flavor=hpuxjfs
      else
        # HP-UX 11.00.
        acl_flavor=hpux
      fi
    else
      if (getacl tmpfile0 >/dev/null) 2>/dev/null; then
        # Tru64, NonStop Kernel.
        if (getacl -m tmpfile0 >/dev/null) 2>/dev/null; then
          # Tru64.
          acl_flavor=osf1
        else
          # NonStop Kernel.
          acl_flavor=nsk
        fi
      else
        if (aclget tmpfile0 >/dev/null) 2>/dev/null; then
          # AIX.
          acl_flavor=aix
        else
          if (fsaclctl -v >/dev/null) 2>/dev/null; then
            # Mac OS X.
            acl_flavor=macosx
          else
            if test -f /sbin/chacl; then
              # IRIX.
              acl_flavor=irix
            fi
          fi
        fi
      fi
    fi
  fi

  # func_test_file_has_acl file expected
  # tests the result of the file_has_acl function on file, and checks that it
  # matches the expected value.
  func_test_file_has_acl ()
  {
    res=`"$builddir"/test-file-has-acl${EXEEXT} "$1"`
    test "$res" = "$2" || {
      echo "file_has_acl(\"$1\") returned $res, expected $2" 1>&2
      exit 1
    }
  }

  # func_test_has_acl file expected
  # tests the result of the file_has_acl function on file, and checks that it
  # matches the expected value, also taking into account the system's 'ls'
  # program.
  case $acl_flavor in
    freebsd | solaris | hpux | macosx)
      case $acl_flavor in
        freebsd | solaris | hpux) acl_ls_option="-ld" ;;
        macosx)                   acl_ls_option="-lde" ;;
      esac
      func_test_has_acl ()
      {
        func_test_file_has_acl "$1" "$2"
        case `/bin/ls $acl_ls_option "$1" | sed 1q` in
          ??????????+*)
            test "$2" = yes || {
              echo "/bin/ls $acl_ls_option $1 shows an ACL, but expected $2" 1>&2
              exit 1
            }
            ;;
          ??????????" "*)
            test "$2" = no || {
              echo "/bin/ls $acl_ls_option $1 shows no ACL, but expected $2" 1>&2
              exit 1
            }
            ;;
        esac
      }
      ;;
    irix)
      func_test_has_acl ()
      {
        func_test_file_has_acl "$1" "$2"
        case `/bin/ls -ldD "$1" | sed 1q` in
          *" []")
            test "$2" = no || {
              echo "/bin/ls -ldD $1 shows no ACL, but expected $2" 1>&2
              exit 1
            }
            ;;
          *)
            test "$2" = yes || {
              echo "/bin/ls -ldD $1 shows an ACL, but expected $2" 1>&2
              exit 1
            }
            ;;
        esac
      }
      ;;
    *)
      func_test_has_acl ()
      {
        func_test_file_has_acl "$1" "$2"
      }
      ;;
  esac

  func_test_has_acl tmpfile0 no

  mkdir tmpdir0
  func_test_has_acl tmpdir0 no

  if test $acl_flavor != none; then
    # A POSIX compliant 'id' program.
    if test -f /usr/xpg4/bin/id; then
      ID=/usr/xpg4/bin/id
    else
      ID=id
    fi
    # Use a user and group id different from the current one, to avoid
    # redundant/ambiguous ACLs.
    myuid=`$ID -u`
    mygid=`$ID -g`
    auid=1
    if test "$auid" = "$myuid"; then auid=2; fi
    agid=1
    if test "$agid" = "$mygid"; then agid=2; fi

    case $acl_flavor in
      linux | freebsd | solaris)

        # Set an ACL for a user.
        if setfacl -m user:$auid:1 tmpfile0; then

          func_test_has_acl tmpfile0 yes

          # Remove the ACL for the user.
          case $acl_flavor in
            linux)   setfacl -x user:$auid tmpfile0 ;;
            freebsd) setfacl -x user:$auid:1 tmpfile0 ;;
            *)       setfacl -d user:$auid:1 tmpfile0 ;;
          esac

          # On Linux and FreeBSD, the ACL for the mask is implicitly added.
          # On Solaris, it is always there.
          case $acl_flavor in
            linux | freebsd) func_test_has_acl tmpfile0 yes ;;
            *)               func_test_has_acl tmpfile0 no ;;
          esac

          # Remove the ACL for the mask, if it was implicitly added.
          case $acl_flavor in
            linux | freebsd) setfacl -x mask: tmpfile0 ;;
            *)               setfacl -d mask: tmpfile0 ;;
          esac

          func_test_has_acl tmpfile0 no

        fi
        ;;

      cygwin)

        # Set an ACL for a group.
        if setfacl -m group:0:1 tmpfile0; then

          func_test_has_acl tmpfile0 yes

          # Remove the ACL for the group.
          setfacl -d group:0 tmpfile0

          func_test_has_acl tmpfile0 no

        fi
        ;;

      hpux | hpuxjfs)

        # Set an ACL for a user.
        orig=`lsacl tmpfile0 | sed -e 's/ tmpfile0$//'`
        if chacl -r "${orig}($auid.%,--x)" tmpfile0; then

          func_test_has_acl tmpfile0 yes

          # Remove the ACL for the user.
          chacl -d "($auid.%,--x)" tmpfile0

          func_test_has_acl tmpfile0 no

        else
          if test $acl_flavor = hpuxjfs; then

            # Set an ACL for a user.
            setacl -m user:$auid:1 tmpfile0

            func_test_has_acl tmpfile0 yes

            # Remove the ACL for the user.
            setacl -d user:$auid tmpfile0

            func_test_has_acl tmpfile0 no

          fi
        fi
        ;;

      osf1)

        # Set an ACL for a user.
        setacl -u user:$auid:1 tmpfile0 2> tmp.err
        cat tmp.err 1>&2
        if grep 'Error:' tmp.err > /dev/null \
           || grep 'Operation not supported' tmp.err > /dev/null; then
          :
        else

          func_test_has_acl tmpfile0 yes

          # Remove the ACL for the user.
          setacl -x user:$auid:1 tmpfile0

          func_test_has_acl tmpfile0 no

        fi
        ;;

      nsk)

        # Set an ACL for a user.
        setacl -m user:$auid:1 tmpfile0

        func_test_has_acl tmpfile0 yes

        # Remove the ACL for the user.
        setacl -d user:$auid tmpfile0

        func_test_has_acl tmpfile0 no

        ;;

      aix)

        # Set an ACL for a user.
        { aclget tmpfile0 | sed -e 's/disabled$/enabled/'; echo "        permit --x u:$auid"; } | aclput tmpfile0
        if aclget tmpfile0 | grep enabled > /dev/null; then

          func_test_has_acl tmpfile0 yes

          # Remove the ACL for the user.
          aclget tmpfile0 | grep -v ' u:[^ ]*$' | aclput tmpfile0

          func_test_has_acl tmpfile0 no

        fi
        ;;

      macosx)

        # Set an ACL for a user.
        /bin/chmod +a "user:daemon allow execute" tmpfile0

        func_test_has_acl tmpfile0 yes

        # Remove the ACL for the user.
        /bin/chmod -a "user:daemon allow execute" tmpfile0

        func_test_has_acl tmpfile0 no

        ;;

      irix)

        # Set an ACL for a user.
        /sbin/chacl user::rw-,group::---,other::---,user:$auid:--x tmpfile0 2> tmp.err
        cat tmp.err 1>&2
        if test -s tmp.err; then :; else

          func_test_has_acl tmpfile0 yes

          # Remove the ACL for the user.
          /sbin/chacl user::rw-,group::---,other::--- tmpfile0

          func_test_has_acl tmpfile0 no

        fi
        ;;

    esac
  fi

  rm -f tmpfile[0-9] tmp.err
  rm -rf tmpdir0
) || exit 1

rm -rf "$tmp"
exit 0
#!/bin/sh

tmpfile=
trap 'rm -fr $tmpfile' 1 2 3 15

tmpfile=test-fpending.t

./test-fpending${EXEEXT} > $tmpfile || exit 1

rm -fr $tmpfile

exit 0
#!/bin/sh

./test-freadahead${EXEEXT} 0 < "$srcdir/test-freadahead.sh" || exit 1
./test-freadahead${EXEEXT} 5 < "$srcdir/test-freadahead.sh" || exit 1
exit 0
#!/bin/sh

./test-freadptr${EXEEXT} 5 < "$srcdir/test-freadptr.sh" || exit 1
cat "$srcdir/test-freadptr.sh" | ./test-freadptr${EXEEXT} 5 || exit 1
exit 0
#!/bin/sh

./test-freadptr2${EXEEXT} 0 < "$srcdir/test-freadptr2.sh" || exit 1
./test-freadptr2${EXEEXT} 5 < "$srcdir/test-freadptr2.sh" || exit 1
exit 0
#!/bin/sh

./test-freadseek${EXEEXT} 5 19 6 7 18 9 19 < "$srcdir/test-freadseek.sh" || exit 1
cat "$srcdir/test-freadseek.sh" | ./test-freadseek${EXEEXT} 5 19 6 7 18 9 19 || exit 1
exit 0
#!/bin/sh

./test-fseek${EXEEXT} 1 < "$srcdir/test-fseek.sh" || exit 1
echo hi | ./test-fseek${EXEEXT} || exit 1
exit 0
#!/bin/sh

exec ./test-fseek${EXEEXT} 1 2 < "$srcdir/test-fseek2.sh"
#!/bin/sh

./test-fseeko${EXEEXT} 1 < "$srcdir/test-fseeko.sh" || exit 1
echo hi | ./test-fseeko${EXEEXT} || exit 1
exit 0
#!/bin/sh

exec ./test-fseeko${EXEEXT} 1 2 < "$srcdir/test-fseeko2.sh"
#!/bin/sh

./test-fseeko3${EXEEXT} 0 "$srcdir/test-fseeko3.sh" || exit 1

./test-fseeko3${EXEEXT} 1 "$srcdir/test-fseeko3.sh" || exit 1

exit 0
#!/bin/sh

./test-fseeko4${EXEEXT} "$srcdir/test-fseeko4.sh" || exit 1

exit 0
#!/bin/sh

./test-ftell${EXEEXT} 1 < "$srcdir/test-ftell.sh" || exit 1
echo hi | ./test-ftell${EXEEXT} || exit 1
exit 0
#!/bin/sh

exec ./test-ftell${EXEEXT} 1 2 < "$srcdir/test-ftell2.sh"
#!/bin/sh

./test-ftello${EXEEXT} 1 < "$srcdir/test-ftello.sh" || exit 1
echo hi | ./test-ftello${EXEEXT} || exit 1
exit 0
#!/bin/sh

exec ./test-ftello${EXEEXT} 1 2 < "$srcdir/test-ftello2.sh"
#!/bin/sh

./test-ftello4${EXEEXT} "$srcdir/test-ftello4.sh" || exit 1

exit 0
#!/bin/sh

exec ./test-ftruncate${EXEEXT} "$srcdir/test-ftruncate.sh"
#!/bin/sh

. "${srcdir=.}/init.sh"; path_prepend_ .

test-getcwd

Exit $?
#!/bin/sh
# Unit tests for init.sh
# Copyright (C) 2011-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

: ${srcdir=.}
. "$srcdir/init.sh"; path_prepend_ .

fail=0

test_compare()
{
  touch empty || fail=1
  echo xyz > in || fail=1

  compare /dev/null /dev/null >out 2>err || fail=1
  test -s out && fail_ "out not empty: $(cat out)"
  # "err" should be empty, too, but has "set -x" output when VERBOSE=yes
  case $- in *x*) ;; *) test -s err && fail_ "err not empty: $(cat err)";; esac

  compare /dev/null empty >out 2>err || fail=1
  test -s out && fail_ "out not empty: $(cat out)"
  case $- in *x*) ;; *) test -s err && fail_ "err not empty: $(cat err)";; esac

  compare in in >out 2>err || fail=1
  test -s out && fail_ "out not empty: $(cat out)"
  case $- in *x*) ;; *) test -s err && fail_ "err not empty: $(cat err)";; esac

  compare /dev/null in >out 2>err && fail=1
  cat <<\EOF > exp
diff -u /dev/null in
--- /dev/null	1970-01-01
+++ in	1970-01-01
+xyz
EOF
  compare exp out || fail=1
  case $- in *x*) ;; *) test -s err && fail_ "err not empty: $(cat err)";; esac

  compare empty in >out 2>err && fail=1
  # Compare against expected output only if compare is using diff -u.
  if grep @ out >/dev/null; then
    # Remove the TAB-date suffix on each --- and +++ line,
    # for both the expected and the actual output files.
    # Also remove the @@ line, since Solaris 5.10 and GNU diff formats differ:
    # -@@ -0,0 +1 @@
    # +@@ -1,0 +1,1 @@
    sed 's/	.*//;/^@@/d' out > k && mv k out
    cat <<\EOF > exp
--- empty
+++ in
+xyz
EOF
    compare exp out || fail=1
  fi
  case $- in *x*) ;; *) test -s err && fail_ "err not empty: $(cat err)";; esac
}

test_compare

Exit $fail
#!/bin/sh

tmpfiles=
trap 'rm -fr $tmpfiles' 1 2 3 15

tmpfiles=t-lseek.tmp
# seekable files
./test-lseek${EXEEXT} 0 < "$srcdir/test-lseek.sh" > t-lseek.tmp || exit 1

# pipes
echo hi | { ./test-lseek${EXEEXT} 1; echo $? > t-lseek.tmp; cat > /dev/null; } | cat
test "`cat t-lseek.tmp`" = "0" || exit 1

# closed descriptors
./test-lseek${EXEEXT} 2 <&- >&- || exit 1

rm -rf $tmpfiles
exit 0
#!/bin/sh

# Test a CP1252 locale.
./test-mbrtowc-w32${EXEEXT} French_France 1252
#!/bin/sh

# Test a CP1256 locale.
./test-mbrtowc-w32${EXEEXT} "Arabic_Saudi Arabia" 1256
#!/bin/sh

# Test a CP932 locale.
./test-mbrtowc-w32${EXEEXT} Japanese_Japan 932
#!/bin/sh

# Test a CP950 locale.
./test-mbrtowc-w32${EXEEXT} Chinese_Taiwan 950
#!/bin/sh

# Test a CP936 locale.
./test-mbrtowc-w32${EXEEXT} Chinese_China 936
#!/bin/sh

# Test in an ISO-8859-1 or ISO-8859-15 locale.
: ${LOCALE_FR=fr_FR}
if test $LOCALE_FR = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no traditional french locale is installed"
  else
    echo "Skipping test: no traditional french locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_FR \
./test-mbrtowc${EXEEXT} 1
#!/bin/sh

# Test whether a specific UTF-8 locale is installed.
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
if test $LOCALE_FR_UTF8 = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no french Unicode locale is installed"
  else
    echo "Skipping test: no french Unicode locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_FR_UTF8 \
./test-mbrtowc${EXEEXT} 2
#!/bin/sh

# Test whether a specific EUC-JP locale is installed.
: ${LOCALE_JA=ja_JP}
if test $LOCALE_JA = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no traditional japanese locale is installed"
  else
    echo "Skipping test: no traditional japanese locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_JA \
./test-mbrtowc${EXEEXT} 3
#!/bin/sh

# Test whether a specific GB18030 locale is installed.
: ${LOCALE_ZH_CN=zh_CN.GB18030}
if test $LOCALE_ZH_CN = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no transitional chinese locale is installed"
  else
    echo "Skipping test: no transitional chinese locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_ZH_CN \
./test-mbrtowc${EXEEXT} 4
#!/bin/sh

# Test whether a specific Turkish locale is installed.
: ${LOCALE_TR_UTF8=tr_TR.UTF-8}
if test $LOCALE_TR_UTF8 = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no turkish Unicode locale is installed"
  else
    echo "Skipping test: no turkish Unicode locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_TR_UTF8 \
./test-mbscasecmp${EXEEXT}
#!/bin/sh

# Test whether a specific UTF-8 locale is installed.
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
if test $LOCALE_FR_UTF8 = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no french Unicode locale is installed"
  else
    echo "Skipping test: no french Unicode locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_FR_UTF8 \
./test-mbsinit${EXEEXT}
#!/bin/sh

# Test in an ISO-8859-1 or ISO-8859-15 locale.
: ${LOCALE_FR=fr_FR}
if test $LOCALE_FR = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no traditional french locale is installed"
  else
    echo "Skipping test: no traditional french locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_FR \
./test-mbsrtowcs${EXEEXT} 1
#!/bin/sh

# Test whether a specific UTF-8 locale is installed.
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
if test $LOCALE_FR_UTF8 = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no french Unicode locale is installed"
  else
    echo "Skipping test: no french Unicode locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_FR_UTF8 \
./test-mbsrtowcs${EXEEXT} 2
#!/bin/sh

# Test whether a specific EUC-JP locale is installed.
: ${LOCALE_JA=ja_JP}
if test $LOCALE_JA = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no traditional japanese locale is installed"
  else
    echo "Skipping test: no traditional japanese locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_JA \
./test-mbsrtowcs${EXEEXT} 3
#!/bin/sh

# Test whether a specific GB18030 locale is installed.
: ${LOCALE_ZH_CN=zh_CN.GB18030}
if test $LOCALE_ZH_CN = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no transitional chinese locale is installed"
  else
    echo "Skipping test: no transitional chinese locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_ZH_CN \
./test-mbsrtowcs${EXEEXT} 4
#!/bin/sh

# Test whether a specific UTF-8 locale is installed.
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
if test $LOCALE_FR_UTF8 = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no french Unicode locale is installed"
  else
    echo "Skipping test: no french Unicode locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_FR_UTF8 \
./test-mbsstr2${EXEEXT}
#!/bin/sh

# Test whether a specific GB18030 locale is installed.
: ${LOCALE_ZH_CN=zh_CN.GB18030}
if test $LOCALE_ZH_CN = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no chinese GB18030 locale is installed"
  else
    echo "Skipping test: no chinese GB18030 locale is supported"
  fi
  exit 77
fi

LC_ALL=$LOCALE_ZH_CN \
./test-mbsstr3${EXEEXT}
#!/bin/sh

LC_ALL=C ./test-nl_langinfo${EXEEXT} 0 || exit 1

# Test whether a specific traditional locale is installed.
: ${LOCALE_FR=fr_FR}
if test $LOCALE_FR != none; then
  LC_ALL=$LOCALE_FR ./test-nl_langinfo${EXEEXT} 1 || exit 1
fi

# Test whether a specific UTF-8 locale is installed.
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
if test $LOCALE_FR_UTF8 != none; then
  LC_ALL=$LOCALE_FR_UTF8 ./test-nl_langinfo${EXEEXT} 2 || exit 1
fi

exit 0
#!/bin/sh
: ${srcdir=.}
. "$srcdir/init.sh"; path_prepend_ .

# Test NULL prefix. Result should not contain a number.
test-perror 2>&1 >/dev/null | LC_ALL=C tr -d '\r' > t-perror.tmp
grep '[0-9]' t-perror.tmp > /dev/null \
  && fail_ "result should not contain a number"

# Test empty prefix. Result should be the same.
test-perror '' 2>&1 >/dev/null | LC_ALL=C tr -d '\r' > t-perror1.tmp
diff t-perror.tmp t-perror1.tmp \
  || fail_ "empty prefix should behave like NULL argument"

# Test non-empty prefix.
test-perror foo 2>&1 >/dev/null | LC_ALL=C tr -d '\r' > t-perror3.tmp
sed -e 's/^/foo: /' < t-perror.tmp > t-perror2.tmp
diff t-perror2.tmp t-perror3.tmp || fail_ "prefix applied incorrectly"

# Test exit status.
test-perror >out 2>/dev/null || fail_ "unexpected exit status"
test -s out && fail_ "unexpected output"

Exit 0
#!/bin/sh
. "${srcdir=.}/init.sh"; path_prepend_ .

fail=0

test-readtokens || fail=1

# Simplest case.
echo a:b:c: > exp || fail=1
printf a:b:c | test-readtokens : > out 2>&1 || fail=1
compare exp out || fail=1

# Use NUL as the delimiter.
echo a:b:c: > exp || fail=1
printf 'a\0b\0c' | test-readtokens '\0' > out 2>&1 || fail=1
compare exp out || fail=1

# Two delimiter bytes, and adjacent delimiters in the input.
echo a:b:c: > exp || fail=1
printf a:-:b-:c:: | test-readtokens :- > out 2>&1 || fail=1
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test select() on file descriptors opened for reading.

# This test is known to fail on Solaris 2.6 and older, due to its handling
# of /dev/null.

tmpfiles=""
trap 'rm -fr $tmpfiles' 1 2 3 15

tmpfiles="$tmpfiles t-select-in.tmp"

# Regular files.

rm -f t-select-in.tmp
./test-select-fd${EXEEXT} r 0 t-select-in.tmp < ./test-select-fd${EXEEXT}
test `cat t-select-in.tmp` = "1" || exit 1

# Pipes.

rm -f t-select-in.tmp
{ sleep 1; echo abc; } | \
  { ./test-select-fd${EXEEXT} r 0 t-select-in.tmp; cat > /dev/null; }
test `cat t-select-in.tmp` = "0" || exit 1

rm -f t-select-in.tmp
echo abc | { sleep 1; ./test-select-fd${EXEEXT} r 0 t-select-in.tmp; }
test `cat t-select-in.tmp` = "1" || exit 1

# Special files.
# This part of the test is known to fail on Solaris 2.6 and older.

rm -f t-select-in.tmp
./test-select-fd${EXEEXT} r 0 t-select-in.tmp < /dev/null
test `cat t-select-in.tmp` = "1" || exit 1

rm -fr $tmpfiles

exit 0
#!/bin/sh
# Test select() on file descriptors opened for writing.

tmpfiles=""
trap 'rm -fr $tmpfiles' 1 2 3 15

tmpfiles="$tmpfiles t-select-out.out t-select-out.tmp"

# Regular files.

rm -f t-select-out.tmp
./test-select-fd${EXEEXT} w 1 t-select-out.tmp > t-select-out.out
test `cat t-select-out.tmp` = "1" || exit 1

# Pipes.

if false; then # This test fails on some platforms.
  rm -f t-select-out.tmp
  ( { echo abc; ./test-select-fd${EXEEXT} w 1 t-select-out.tmp; } | { sleep 1; cat; } ) > /dev/null
  test `cat t-select-out.tmp` = "0" || exit 1
fi

rm -f t-select-out.tmp
( { sleep 1; echo abc; ./test-select-fd${EXEEXT} w 1 t-select-out.tmp; } | cat) > /dev/null
test `cat t-select-out.tmp` = "1" || exit 1

# Special files.

rm -f t-select-out.tmp
./test-select-fd${EXEEXT} w 1 t-select-out.tmp > /dev/null
test `cat t-select-out.tmp` = "1" || exit 1

rm -fr $tmpfiles

exit 0
#!/bin/sh

# Test set-mode-acl on the file system of /var/tmp, which usually is a local
# file system.

if test -d /var/tmp; then
  TMPDIR=/var/tmp
else
  TMPDIR=/tmp
fi
export TMPDIR

exec "${srcdir}/test-set-mode-acl.sh"
#!/bin/sh

# Test set-mode-acl on the file system of the build directory, which may be
# a local file system or NFS mounted.

TMPDIR=`pwd`
export TMPDIR

exec "${srcdir}/test-set-mode-acl.sh"
#!/bin/sh

# Show all commands when run with environment variable VERBOSE=yes.
test -z "$VERBOSE" || set -x

test "$USE_ACL" = 0 &&
  {
    echo "Skipping test: insufficient ACL support"
    exit 77
  }

# func_tmpdir
# creates a temporary directory.
# Sets variable
# - tmp             pathname of freshly created temporary directory
func_tmpdir ()
{
  # Use the environment variable TMPDIR, falling back to /tmp. This allows
  # users to specify a different temporary directory, for example, if their
  # /tmp is filled up or too small.
  : ${TMPDIR=/tmp}
  {
    # Use the mktemp program if available. If not available, hide the error
    # message.
    tmp=`(umask 077 && mktemp -d "$TMPDIR/glXXXXXX") 2>/dev/null` &&
    test -n "$tmp" && test -d "$tmp"
  } ||
  {
    # Use a simple mkdir command. It is guaranteed to fail if the directory
    # already exists.  $RANDOM is bash specific and expands to empty in shells
    # other than bash, ksh and zsh.  Its use does not increase security;
    # rather, it minimizes the probability of failure in a very cluttered /tmp
    # directory.
    tmp=$TMPDIR/gl$$-$RANDOM
    (umask 077 && mkdir "$tmp")
  } ||
  {
    echo "$0: cannot create a temporary directory in $TMPDIR" >&2
    exit 1
  }
}

func_tmpdir
builddir=`pwd`
cd "$builddir" ||
  {
    echo "$0: cannot determine build directory (unreadable parent dir?)" >&2
    exit 1
  }
# Switch to a temporary directory, to increase the likelihood that ACLs are
# supported on the current file system. (/tmp is usually locally mounted,
# whereas the build dir is sometimes NFS-mounted.)
( cd "$tmp"

  # Prepare tmpfile0.
  rm -f tmpfile[0-9]
  echo "Simple contents" > tmpfile0
  chmod 600 tmpfile0

  # Classification of the platform according to the programs available for
  # manipulating ACLs.
  # Possible values are:
  #   linux, cygwin, freebsd, solaris, hpux, hpuxjfs, osf1, aix, macosx, irix, none.
  # TODO: Support also native Windows platforms (mingw).
  acl_flavor=none
  if (getfacl tmpfile0 >/dev/null) 2>/dev/null; then
    # Platforms with the getfacl and setfacl programs.
    # Linux, FreeBSD, Solaris, Cygwin.
    if (setfacl --help >/dev/null) 2>/dev/null; then
      # Linux, Cygwin.
      if (LC_ALL=C setfacl --help | grep ' --set-file' >/dev/null) 2>/dev/null; then
        # Linux.
        acl_flavor=linux
      else
        acl_flavor=cygwin
      fi
    else
      # FreeBSD, Solaris.
      if (LC_ALL=C setfacl 2>&1 | grep '\-x entries' >/dev/null) 2>/dev/null; then
        # FreeBSD.
        acl_flavor=freebsd
      else
        # Solaris.
        acl_flavor=solaris
      fi
    fi
  else
    if (lsacl / >/dev/null) 2>/dev/null; then
      # Platforms with the lsacl and chacl programs.
      # HP-UX, sometimes also IRIX.
      if (getacl tmpfile0 >/dev/null) 2>/dev/null; then
        # HP-UX 11.11 or newer.
        acl_flavor=hpuxjfs
      else
        # HP-UX 11.00.
        acl_flavor=hpux
      fi
    else
      if (getacl tmpfile0 >/dev/null) 2>/dev/null; then
        # Tru64, NonStop Kernel.
        if (getacl -m tmpfile0 >/dev/null) 2>/dev/null; then
          # Tru64.
          acl_flavor=osf1
        else
          # NonStop Kernel.
          acl_flavor=nsk
        fi
      else
        if (aclget tmpfile0 >/dev/null) 2>/dev/null; then
          # AIX.
          acl_flavor=aix
        else
          if (fsaclctl -v >/dev/null) 2>/dev/null; then
            # Mac OS X.
            acl_flavor=macosx
          else
            if test -f /sbin/chacl; then
              # IRIX.
              acl_flavor=irix
            fi
          fi
        fi
      fi
    fi
  fi

  if test $acl_flavor != none; then
    # A POSIX compliant 'id' program.
    if test -f /usr/xpg4/bin/id; then
      ID=/usr/xpg4/bin/id
    else
      ID=id
    fi
    # Use a user and group id different from the current one, to avoid
    # redundant/ambiguous ACLs.
    myuid=`$ID -u`
    mygid=`$ID -g`
    auid=1
    if test "$auid" = "$myuid"; then auid=2; fi
    agid=1
    if test "$agid" = "$mygid"; then agid=2; fi
  fi

  for mode in 700 400 200 100 644 650 605 011 4700 2070; do
    rm -f tmpfile0 tmpfile1 tmpfile2

    # Prepare a file with no ACL.
    echo "Anything" > tmpfile0
    # If a mode is not supported (e.g. 2070 on FreeBSD), we skip testing it.
    if chmod $mode tmpfile0 2>/dev/null; then
      modestring0=`ls -l tmpfile0 | dd ibs=1 count=10 2>/dev/null`

      # Prepare a file with no ACL.
      echo "Some contents" > tmpfile1
      chmod 600 tmpfile1

      # Try to set the ACL to only the given mode.
      "$builddir"/test-set-mode-acl${EXEEXT} tmpfile1 $mode
      # Verify that tmpfile1 has no ACL and has the desired mode.
      modestring=`ls -l tmpfile1 | dd ibs=1 count=10 2>/dev/null`
      if test "x$modestring" != "x$modestring0"; then
        echo "mode = $mode: tmpfile1 has wrong mode: $modestring" 1>&2
        exit 1
      fi
      if test `"$builddir"/test-file-has-acl${EXEEXT} tmpfile1` != no; then
        echo "mode = $mode: tmpfile1 got an ACL" 1>&2
        exit 1
      fi

      if test $acl_flavor != none; then

        # Prepare a file with an ACL.
        echo "Special contents" > tmpfile2
        chmod 600 tmpfile2
        # Set an ACL for a user (or group).
        case $acl_flavor in
          linux | freebsd | solaris)
            setfacl -m user:$auid:1 tmpfile0
            ;;
          cygwin)
            setfacl -m group:0:1 tmpfile0
            ;;
          hpux)
            orig=`lsacl tmpfile0 | sed -e 's/ tmpfile0$//'`
            chacl -r "${orig}($auid.%,--x)" tmpfile0
            ;;
          hpuxjfs)
            orig=`lsacl tmpfile0 | sed -e 's/ tmpfile0$//'`
            chacl -r "${orig}($auid.%,--x)" tmpfile0 \
              || setacl -m user:$auid:1 tmpfile0
            ;;
          osf1)
            setacl -u user:$auid:1 tmpfile0
            ;;
          nsk)
            setacl -m user:$auid:1 tmpfile0
            ;;
          aix)
            { aclget tmpfile0 | sed -e 's/disabled$/enabled/'; echo "        permit --x u:$auid"; } | aclput tmpfile0
            ;;
          macosx)
            /bin/chmod +a "user:daemon allow execute" tmpfile0
            ;;
          irix)
            /sbin/chacl user::rw-,group::---,other::---,user:$auid:--x tmpfile0
            ;;
        esac

        # Try to set the ACL to only the given mode.
        "$builddir"/test-set-mode-acl${EXEEXT} tmpfile2 $mode
        # Verify that tmpfile2 has no ACL and has the desired mode.
        modestring=`ls -l tmpfile2 | dd ibs=1 count=10 2>/dev/null`
        if test "x$modestring" != "x$modestring0"; then
          echo "mode = $mode: tmpfile2 has wrong mode: $modestring" 1>&2
          exit 1
        fi
        if test `"$builddir"/test-file-has-acl${EXEEXT} tmpfile2` != no; then
          echo "mode = $mode: tmpfile2 still has an ACL" 1>&2
          exit 1
        fi
      fi
    fi
  done

  rm -f tmpfile[0-9]
) || exit 1

rm -rf "$tmp"
exit 0
#!/bin/sh

: ${LOCALE_FR=fr_FR}
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
: ${LOCALE_JA=ja_JP}
: ${LOCALE_ZH_CN=zh_CN.GB18030}

if test $LOCALE_FR = none && test $LOCALE_FR_UTF8 = none \
   && test $LOCALE_JA = none && test $LOCALE_ZH_CN = none; then
  if test -f /usr/bin/localedef; then
    echo "Skipping test: no locale for testing is installed"
  else
    echo "Skipping test: no locale for testing is supported"
  fi
  exit 77
fi

if test $LOCALE_FR != none; then
  LC_ALL=$LOCALE_FR      ./test-setlocale1${EXEEXT} || exit 1
fi

if test $LOCALE_FR_UTF8 != none; then
  LC_ALL=$LOCALE_FR_UTF8 ./test-setlocale1${EXEEXT} || exit 1
fi

if test $LOCALE_JA != none; then
  LC_ALL=$LOCALE_JA      ./test-setlocale1${EXEEXT} || exit 1
fi

if test $LOCALE_ZH_CN != none; then
  LC_ALL=$LOCALE_ZH_CN   ./test-setlocale1${EXEEXT} || exit 1
fi

exit 0
#!/bin/sh

# Test locale names with likely unsupported encoding in Unix syntax.
for name in ar_SA.ISO-8859-1 fr_FR.CP1251 zh_TW.GB18030 zh_CN.BIG5; do
  env LC_ALL=$name ./test-setlocale2${EXEEXT} 1 || exit 1
done

# Test locale names with likely unsupported encoding in native Windows syntax.
for name in "Arabic_Saudi Arabia.1252" "Arabic_Saudi Arabia.65001" \
            French_France.65001 Japanese_Japan.65001 Turkish_Turkey.65001 \
            Chinese_Taiwan.65001 Chinese_China.54936 Chinese_China.65001; do
  # Here we use 'env' to set the LC_ALL environment variable, because on
  # Solaris 11 2011-11, the /bin/sh refuses to do it for Turkish_Turkey.65001.
  env LC_ALL="$name" ./test-setlocale2${EXEEXT} 1 || exit 1
done

exit 0
#!/bin/sh
# Test suite for update-copyright.
# Copyright (C) 2009-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

diffout=`diff -u /dev/null /dev/null 2>&1`
if test x"$diffout" = x"" && test $? -eq 0; then
  compare() { diff -u "$@"; }
else
  compare() { cmp "$@"; }
fi

# Ensure the update-copyright program gets found.
PATH=$abs_aux_dir:$PATH
export PATH

TMP_BASE=update-copyright.test
trap 'rm -f $TMP_BASE*' 0 1 2 3 15

## --------------------------------- ##
## Skip if user does not have perl.  ##
## --------------------------------- ##

TMP=$TMP_BASE
s=$TMP-script
cat <<\EOF > $s
eval '(exit $?0)' && eval 'exec perl -wS -0777 -pi "$0" "$@"'
  & eval 'exec perl -wS -0777 -pi "$0" $argv:q'
    if 0;
s/a/b/
EOF
chmod a+x $s
echo a > $TMP-in
./$s $TMP-in 2>/dev/null && test b = "`cat $TMP-in 2>/dev/null`" ||
  {
    printf '%s\n' "$0: skipping this test;" \
      'your system has insufficient support for Perl' 1>&2
    exit 77
  }

# Skip this test if Perl is too old.  FIXME: 5.8.0 is just a guess.
# We have a report that 5.6.1 is inadequate and that 5.8.0 works.
perl -e 'require 5.8.0' || {
  echo '$0: skipping this test; Perl version is too old' 1>&2
  exit 77
}

# Do not let a different envvar setting perturb results.
UPDATE_COPYRIGHT_MAX_LINE_LENGTH=72
export UPDATE_COPYRIGHT_MAX_LINE_LENGTH

## ----------------------------- ##
## Examples from documentation.  ##
## ----------------------------- ##

TMP=$TMP_BASE-ex
cat > $TMP.1 <<EOF
Copyright @copyright{} 1990-2005, 2007-2009 Free Software
Foundation, Inc.
EOF
cat > $TMP.2 <<EOF
# Copyright (C) 1990-2005, 2007-2009 Free Software
# Foundation, Inc.
EOF
cat > $TMP.3 <<EOF
/*
 * Copyright &copy; 90,2005,2007-2009
 * Free Software Foundation, Inc.
 */
EOF
cat > $TMP.4 <<EOF
## Copyright (C) 1990-2005, 2007-2009 Free Software
#  Foundation, Inc.
EOF
cat > $TMP.5 <<EOF
Copyright (C) 1990-2005, 2007-2009 Acme, Inc.
EOF
cat > $TMP.6 <<EOF
## Copyright (C) 1990-2005, 2007-2009 Free Software
#  Foundation, Inc.

Copyright (C) 1990-2005, 2007-2009 Free Software Foundation,
Inc.
EOF
cat > $TMP.7 <<EOF
Copyright (C) 1990-2005, 2007-2009 Acme, Inc.

# Copyright (C) 1990-2005, 2007-2009 Free Software
# Foundation, Inc.
EOF

UPDATE_COPYRIGHT_YEAR=2009 \
  update-copyright $TMP.? 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare - $TMP-stderr <<EOF || exit 1
$TMP.4: warning: copyright statement not found
$TMP.5: warning: copyright statement not found
EOF
compare - $TMP.1 <<EOF || exit 1
Copyright @copyright{} 1990-2005, 2007-2009 Free Software
Foundation, Inc.
EOF
compare - $TMP.2 <<EOF || exit 1
# Copyright (C) 1990-2005, 2007-2009 Free Software
# Foundation, Inc.
EOF
compare - $TMP.3 <<EOF || exit 1
/*
 * Copyright &copy; 90,2005,2007-2009
 * Free Software Foundation, Inc.
 */
EOF
compare - $TMP.4 <<EOF || exit 1
## Copyright (C) 1990-2005, 2007-2009 Free Software
#  Foundation, Inc.
EOF
compare - $TMP.5 <<EOF || exit 1
Copyright (C) 1990-2005, 2007-2009 Acme, Inc.
EOF
compare - $TMP.6 <<EOF || exit 1
## Copyright (C) 1990-2005, 2007-2009 Free Software
#  Foundation, Inc.

Copyright (C) 1990-2005, 2007-2009 Free Software Foundation,
Inc.
EOF
compare - $TMP.7 <<EOF || exit 1
Copyright (C) 1990-2005, 2007-2009 Acme, Inc.

# Copyright (C) 1990-2005, 2007-2009 Free Software
# Foundation, Inc.
EOF

UPDATE_COPYRIGHT_YEAR=2010 UPDATE_COPYRIGHT_USE_INTERVALS=1 \
  update-copyright $TMP.? 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare - $TMP-stderr <<EOF || exit 1
$TMP.4: warning: copyright statement not found
$TMP.5: warning: copyright statement not found
EOF
compare - $TMP.1 <<EOF || exit 1
Copyright @copyright{} 1990-2005, 2007-2010 Free Software Foundation,
Inc.
EOF
compare - $TMP.2 <<EOF || exit 1
# Copyright (C) 1990-2005, 2007-2010 Free Software Foundation, Inc.
EOF
compare - $TMP.3 <<EOF || exit 1
/*
 * Copyright &copy; 1990, 2005, 2007-2010 Free Software Foundation, Inc.
 */
EOF
compare - $TMP.4 <<EOF || exit 1
## Copyright (C) 1990-2005, 2007-2009 Free Software
#  Foundation, Inc.
EOF
compare - $TMP.5 <<EOF || exit 1
Copyright (C) 1990-2005, 2007-2009 Acme, Inc.
EOF
compare - $TMP.6 <<EOF || exit 1
## Copyright (C) 1990-2005, 2007-2009 Free Software
#  Foundation, Inc.

Copyright (C) 1990-2005, 2007-2010 Free Software Foundation, Inc.
EOF
compare - $TMP.7 <<EOF || exit 1
Copyright (C) 1990-2005, 2007-2009 Acme, Inc.

# Copyright (C) 1990-2005, 2007-2010 Free Software Foundation, Inc.
EOF

UPDATE_COPYRIGHT_YEAR=2010 UPDATE_COPYRIGHT_FORCE=1 \
  update-copyright $TMP.? 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare - $TMP-stderr <<EOF || exit 1
$TMP.4: warning: copyright statement not found
$TMP.5: warning: copyright statement not found
EOF
compare - $TMP.1 <<EOF || exit 1
Copyright @copyright{} 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010
Free Software Foundation, Inc.
EOF
compare - $TMP.2 <<EOF || exit 1
# Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
# 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010 Free
# Software Foundation, Inc.
EOF
compare - $TMP.3 <<EOF || exit 1
/*
 * Copyright &copy; 1990, 2005, 2007, 2008, 2009, 2010 Free Software
 * Foundation, Inc.
 */
EOF
compare - $TMP.4 <<EOF || exit 1
## Copyright (C) 1990-2005, 2007-2009 Free Software
#  Foundation, Inc.
EOF
compare - $TMP.5 <<EOF || exit 1
Copyright (C) 1990-2005, 2007-2009 Acme, Inc.
EOF
compare - $TMP.6 <<EOF || exit 1
## Copyright (C) 1990-2005, 2007-2009 Free Software
#  Foundation, Inc.

Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010 Free
Software Foundation, Inc.
EOF
compare - $TMP.7 <<EOF || exit 1
Copyright (C) 1990-2005, 2007-2009 Acme, Inc.

# Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
# 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010 Free
# Software Foundation, Inc.
EOF

rm $TMP*

## -------------- ##
## Current year.  ##
## -------------- ##

TMP=$TMP_BASE-current-year
YEAR=`date +%Y`
cat > $TMP <<EOF
'\" Copyright (C) 2006
'\" Free Software Foundation,
'\" Inc.
EOF
update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
'\" Copyright (C) 2006, $YEAR Free Software Foundation, Inc.
EOF
UPDATE_COPYRIGHT_USE_INTERVALS=1 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
'\" Copyright (C) 2006, $YEAR Free Software Foundation, Inc.
EOF
rm $TMP*

## ------------------ ##
## Surrounding text.  ##
## ------------------ ##

TMP=$TMP_BASE-surrounding-text
cat > $TMP <<EOF
    Undisturbed text.
dnl Undisturbed text.
dnl Copyright (C) 89
dnl Free Software Foundation, Inc.
dnl   Undisturbed text.
EOF
UPDATE_COPYRIGHT_YEAR=2010 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
    Undisturbed text.
dnl Undisturbed text.
dnl Copyright (C) 1989, 2010 Free Software Foundation, Inc.
dnl   Undisturbed text.
EOF
rm $TMP*

## --------------- ##
## Widest prefix.  ##
## --------------- ##

TMP=$TMP_BASE-widest-prefix
cat > $TMP <<EOF
#### Copyright (C) 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
#### 1986, 1987, 1988, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
#### 2008 Free Software Foundation, Inc.
EOF
UPDATE_COPYRIGHT_YEAR=2010 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
#### Copyright (C) 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
#### 1985, 1986, 1987, 1988, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
#### 2006, 2007, 2008, 2010 Free Software Foundation, Inc.
EOF
UPDATE_COPYRIGHT_YEAR=2011 UPDATE_COPYRIGHT_USE_INTERVALS=1 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
#### Copyright (C) 1976-1988, 1999-2008, 2010-2011 Free Software
#### Foundation, Inc.
EOF
rm $TMP*

## ------------------- ##
## Prefix too large.  ##
## ------------------- ##

TMP=$TMP_BASE-prefix-too-large
cat > $TMP <<EOF
####  Copyright (C) 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
####  1986, 1987, 1988, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
####  2008 Free Software Foundation, Inc.
EOF
UPDATE_COPYRIGHT_YEAR=2010 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare - $TMP-stderr <<EOF || exit 1
$TMP: warning: copyright statement not found
EOF
compare - $TMP <<EOF || exit 1
####  Copyright (C) 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
####  1986, 1987, 1988, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
####  2008 Free Software Foundation, Inc.
EOF
rm $TMP*

## ------------- ##
## Blank lines.  ##
## ------------- ##

TMP=$TMP_BASE-blank-lines
cat > $TMP <<EOF
#Copyright (C) 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
#
#1986, 1987, 1988, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
#2008 Free Software Foundation, Inc.

Copyright (C) 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,

1986, 1987, 1988, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008 Free Software Foundation, Inc.
EOF
UPDATE_COPYRIGHT_YEAR=2010 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare - $TMP-stderr <<EOF || exit 1
$TMP: warning: copyright statement not found
EOF
compare - $TMP <<EOF || exit 1
#Copyright (C) 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,
#
#1986, 1987, 1988, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
#2008 Free Software Foundation, Inc.

Copyright (C) 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985,

1986, 1987, 1988, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007,
2008 Free Software Foundation, Inc.
EOF
rm $TMP*

## -------------- ##
## Leading tabs.  ##
## -------------- ##

TMP=$TMP_BASE-leading-tabs
cat > $TMP <<EOF
	Copyright (C) 87, 88, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 98,
	 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009 Free
	Software Foundation, Inc.
EOF
UPDATE_COPYRIGHT_YEAR=2010 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
	Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996,
	1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
	2007, 2008, 2009, 2010 Free Software Foundation, Inc.
EOF
UPDATE_COPYRIGHT_YEAR=2011 UPDATE_COPYRIGHT_USE_INTERVALS=1 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
	Copyright (C) 1987-1988, 1991-2011 Free Software Foundation,
	Inc.
EOF
rm $TMP*

## -------------------- ##
## Unusual whitespace.  ##
## -------------------- ##

TMP=$TMP_BASE-unusual-ws
cat > $TMP <<EOF
		# Copyright (C) 87-88, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
		# 98, 1999, 2000, 2001, 2002, 2003,     		  2004, 2005, 2006, 2007, 2008,
		# 2009 Free Software Foundation, Inc.
EOF
UPDATE_COPYRIGHT_YEAR=2010 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
		# Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994,
		# 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003,
		# 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software
		# Foundation, Inc.
EOF
UPDATE_COPYRIGHT_YEAR=2011 UPDATE_COPYRIGHT_USE_INTERVALS=1 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
		# Copyright (C) 1987-1988, 1991-2011 Free Software
		# Foundation, Inc.
EOF
UPDATE_COPYRIGHT_YEAR=2011 UPDATE_COPYRIGHT_USE_INTERVALS=2 \
  UPDATE_COPYRIGHT_FORCE=1 update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
		# Copyright (C) 1987-2011 Free Software Foundation, Inc.
EOF
rm $TMP*

## --------- ##
## DOS EOL.  ##
## --------- ##

TMP=$TMP_BASE-dos-eol
tr @ '\015' > $TMP <<\EOF
Rem Copyright (C) 87, 88, 1991, 1992, 1993, 1994, 1995, 1996, 1997,@
Rem 98, 1999, 2000, 2001, 2002, 2003,  2004, 2005, 2006, 2007, 2008,@
Rem 2009 Free Software Foundation, Inc.@
EOF
UPDATE_COPYRIGHT_YEAR=2010 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
tr @ '\015' > $TMP-exp <<\EOF
Rem Copyright (C) 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997,@
Rem 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,@
Rem 2009, 2010 Free Software Foundation, Inc.@
EOF
compare $TMP-exp $TMP || exit 1
rm $TMP*

## --------------- ##
## Omitted "(C)".  ##
## --------------- ##

TMP=$TMP_BASE-omitted-circle-c
cat > $TMP <<EOF
  Copyright 87, 88, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
  98, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
  2009 Free Software Foundation, Inc.
EOF
UPDATE_COPYRIGHT_YEAR=2010 \
  update-copyright $TMP 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP <<EOF || exit 1
  Copyright 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,
  1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
  Free Software Foundation, Inc.
EOF
rm $TMP*

## ------------------ ##
## C-style comments.  ##
## ------------------ ##

TMP=$TMP_BASE-c-style-comments
cat > $TMP.star <<EOF
/*  Copyright 87, 88, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
 *  98, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
 *  2009 Free Software Foundation, Inc.  */
EOF
cat > $TMP.space <<EOF
  /*Copyright 87, 88, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
    98, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
    2009 Free Software Foundation, Inc.  */
EOF
cat > $TMP.single-line <<EOF
/*   Copyright 87, 1991, 1992 Free Software Foundation, Inc.  */
EOF
cat > $TMP.single-line-wrapped <<EOF
 /* Copyright 1988, 1991, 1992, 1993 Free Software Foundation, Inc.  */
EOF
cat > $TMP.extra-text-star <<EOF
 /* Copyright 1987, 1988, 1991, 1992 Free Software Foundation, Inc.  End
  * More comments.  */
EOF
cat > $TMP.extra-text-space <<EOF
 /* Copyright 1987, 1988, 1991, 1992 Free Software Foundation, Inc. ***
    * End of comments. */
EOF
cat > $TMP.two-digit-final-is-substr-of-first <<EOF
 /* Copyright 1991, 99 Free Software Foundation, Inc. */
EOF
UPDATE_COPYRIGHT_YEAR=2010 \
  update-copyright $TMP.* 1> $TMP-stdout 2> $TMP-stderr
compare /dev/null $TMP-stdout || exit 1
compare /dev/null $TMP-stderr || exit 1
compare - $TMP.star <<EOF || exit 1
/*  Copyright 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
 *  1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
 *  2009, 2010 Free Software Foundation, Inc.  */
EOF
compare - $TMP.space <<EOF || exit 1
  /*Copyright 1987, 1988, 1991, 1992, 1993, 1994, 1995, 1996, 1997,
    1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
    2009, 2010 Free Software Foundation, Inc.  */
EOF
compare - $TMP.single-line <<EOF || exit 1
/*   Copyright 1987, 1991, 1992, 2010 Free Software Foundation, Inc.  */
EOF
compare - $TMP.single-line-wrapped <<EOF || exit 1
 /* Copyright 1988, 1991, 1992, 1993, 2010 Free Software Foundation,
  * Inc.  */
EOF
compare - $TMP.extra-text-star <<EOF || exit 1
 /* Copyright 1987, 1988, 1991, 1992, 2010 Free Software Foundation,
  * Inc.  End
  * More comments.  */
EOF
compare - $TMP.extra-text-space <<EOF || exit 1
 /* Copyright 1987, 1988, 1991, 1992, 2010 Free Software Foundation,
    Inc. ***
    * End of comments. */
EOF
compare - $TMP.two-digit-final-is-substr-of-first <<EOF || exit 1
 /* Copyright 1991, 1999, 2010 Free Software Foundation, Inc. */
EOF
rm $TMP*

exit 0
#!/bin/sh
# Unit tests for vc-list-files
# Copyright (C) 2008-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

: ${srcdir=.}
. "$srcdir/init.sh"; path_prepend_ "$abs_aux_dir" .

tmpdir=vc-cvs
repo=`pwd`/$tmpdir/repo

fail=0
for i in with-cvsu without; do
  # On the first iteration, test using cvsu, if it's in your path.
  # On the second iteration, ensure that cvsu fails, so we'll
  # exercise the awk-using code.
  if test $i = without; then
    printf '%s\n' '#!/bin/sh' 'exit 1' > cvsu
    chmod a+x cvsu
    PATH=`pwd`:$PATH
    export PATH
  fi
  ok=0
  mkdir $tmpdir && cd $tmpdir &&
    # without cvs, skip the test
    { ( cvs -Q -d "$repo" init ) > /dev/null 2>&1 \
      || skip_ "cvs not found in PATH"; } &&
    mkdir w && cd w &&
    mkdir d &&
    touch d/a b c &&
    cvs -Q -d "$repo" import -m imp m M M0 &&
    cvs -Q -d "$repo" co m && cd m &&
    printf '%s\n' b c d/a > expected &&
    vc-list-files | sort > actual &&
    compare expected actual &&
    ok=1
  test $ok = 0 && fail=1
done

Exit $fail
#!/bin/sh
# Unit tests for vc-list-files
# Copyright (C) 2008-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

: ${srcdir=.}
. "$srcdir/init.sh"; path_prepend_ "$abs_aux_dir" .

tmpdir=vc-git-$$
GIT_DIR= GIT_WORK_TREE=; unset GIT_DIR GIT_WORK_TREE

fail=1
mkdir $tmpdir && cd $tmpdir &&
  # without git, skip the test
  # The double use of 'exit' is needed for the reference to $? inside the trap.
  { ( git init -q ) > /dev/null 2>&1 \
    || skip_ "git not found in PATH"; } &&
  mkdir d &&
  touch d/a b c &&
  git config user.email "you@example.com" &&
  git config user.name "Your Name" &&
  git add . > /dev/null &&
  git commit -q -a -m log &&
  printf '%s\n' b c d/a > expected &&
  vc-list-files > actual &&
  compare expected actual &&
  fail=0

Exit $fail
#!/bin/sh
. "${srcdir=.}/init.sh"

# We are not interested in triggering bugs in the compilers and tools
# (such as gcc 4.3.1 on openSUSE 11.0).
unset MALLOC_PERTURB_

# Rather than figure out how to invoke the compiler with the right
# include path ourselves, we let make do it:
(cd "$initial_cwd_" && rm -f test-verify.o \
    && $MAKE test-verify.o >/dev/null 2>&1) \
  || skip_ "cannot compile error-free"

# Now, prove that we encounter all expected compilation failures:
: >out
: >err
for i in 1 2 3 4 5; do
  (cd "$initial_cwd_"
   rm -f test-verify.o
   $MAKE CFLAGS=-DEXP_FAIL=$i test-verify.o) >>out 2>>err \
  && { warn_ "compiler didn't detect verification failure $i"; fail=1; }
done

Exit $fail
#! /bin/sh
# Test suite for version-etc.
# Copyright (C) 2009-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

TMP=ve-expected.tmp
LC_ALL=C
export LC_ALL
ERR=0

cat > $TMP <<EOT
test-version-etc (PROJECT) VERSION
COPYRIGHT Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Sergey Poznyakoff and Eric Blake.
EOT

./test-version-etc${EXEEXT} --version |
 sed '1s/test-version-etc (.*) .*/test-version-etc (PROJECT) VERSION/
      /^Packaged by/d
      2,3 s/Copyright (C) [0-9]\{4,4\}/COPYRIGHT/' |
 tr -d '\015' |
 diff -c $TMP - || ERR=1

rm $TMP

exit $ERR
#!/bin/sh

tmpfiles=""
trap 'rm -fr $tmpfiles' 1 2 3 15

tmpfiles="$tmpfiles t-vfprintf-posix.tmp t-vfprintf-posix.out"
./test-vfprintf-posix${EXEEXT} > t-vfprintf-posix.tmp || exit 1
LC_ALL=C tr -d '\r' < t-vfprintf-posix.tmp > t-vfprintf-posix.out || exit 1

: ${DIFF=diff}
${DIFF} "${srcdir}/test-printf-posix.output" t-vfprintf-posix.out
result=$?

rm -fr $tmpfiles

exit $result
#!/bin/sh

tmpfiles=""
trap 'rm -fr $tmpfiles' 1 2 3 15

tmpfiles="$tmpfiles t-vprintf-posix.tmp t-vprintf-posix.out"
./test-vprintf-posix${EXEEXT} > t-vprintf-posix.tmp || exit 1
LC_ALL=C tr -d '\r' < t-vprintf-posix.tmp > t-vprintf-posix.out || exit 1

: ${DIFF=diff}
${DIFF} "${srcdir}/test-printf-posix.output" t-vprintf-posix.out
result=$?

rm -fr $tmpfiles

exit $result
#!/bin/sh

# Test a CP1252 locale.
./test-wcrtomb-w32${EXEEXT} French_France 1252
#!/bin/sh

# Test a CP1256 locale.
./test-wcrtomb-w32${EXEEXT} "Arabic_Saudi Arabia" 1256
#!/bin/sh

# Test a CP932 locale.
./test-wcrtomb-w32${EXEEXT} Japanese_Japan 932
#!/bin/sh

# Test a CP950 locale.
./test-wcrtomb-w32${EXEEXT} Chinese_Taiwan 950
#!/bin/sh

# Test a CP936 locale.
./test-wcrtomb-w32${EXEEXT} Chinese_China 936
#!/bin/sh

# Test in an ISO-8859-1 or ISO-8859-15 locale.
: ${LOCALE_FR=fr_FR}
if test $LOCALE_FR != none; then
  LC_ALL=$LOCALE_FR \
  ./test-wcrtomb${EXEEXT} 1 \
  || exit 1
fi

# Test whether a specific UTF-8 locale is installed.
: ${LOCALE_FR_UTF8=fr_FR.UTF-8}
if test $LOCALE_FR_UTF8 != none; then
  LC_ALL=$LOCALE_FR_UTF8 \
  ./test-wcrtomb${EXEEXT} 2 \
  || exit 1
fi

# Test whether a specific EUC-JP locale is installed.
: ${LOCALE_JA=ja_JP}
if test $LOCALE_JA != none; then
  LC_ALL=$LOCALE_JA \
  ./test-wcrtomb${EXEEXT} 3 \
  || exit 1
fi

# Test whether a specific GB18030 locale is installed.
: ${LOCALE_ZH_CN=zh_CN.GB18030}
if test $LOCALE_ZH_CN != none; then
  LC_ALL=$LOCALE_ZH_CN \
  ./test-wcrtomb${EXEEXT} 4 \
  || exit 1
fi

exit 0
#!/bin/sh
# Test suite for xalloc_die.
# Copyright (C) 2009-2016 Free Software Foundation, Inc.
# This file is part of the GNUlib Library.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/init.sh"; path_prepend_ .

test-xalloc-die${EXEEXT} > out 2> err
case $? in
  1) ;;
  *) Exit 1;;
esac

tr -d '\015' < err \
  | sed 's,.*test-xalloc-die[.ex]*:,test-xalloc-die:,' > err2 || Exit 1

compare - err2 <<\EOF || Exit 1
test-xalloc-die: memory exhausted
EOF

test -s out && Exit 1

Exit $fail
#!/bin/sh

tmpfiles=""
trap 'rm -fr $tmpfiles' 1 2 3 15

tmpfiles="$tmpfiles t-xprintf-posix.tmp t-xprintf-posix.out"
./test-xprintf-posix${EXEEXT} > t-xprintf-posix.tmp || exit 1
LC_ALL=C tr -d '\r' < t-xprintf-posix.tmp > t-xprintf-posix.out || exit 1

: ${DIFF=diff}
${DIFF} "${srcdir}/test-printf-posix.output" t-xprintf-posix.out
test $? = 0 || { rm -fr $tmpfiles; exit 1; }

tmpfiles="$tmpfiles t-xfprintf-posix.tmp t-xfprintf-posix.out"
./test-xfprintf-posix${EXEEXT} > t-xfprintf-posix.tmp || exit 1
LC_ALL=C tr -d '\r' < t-xfprintf-posix.tmp > t-xfprintf-posix.out || exit 1

: ${DIFF=diff}
${DIFF} "${srcdir}/test-printf-posix.output" t-xfprintf-posix.out
test $? = 0 || { rm -fr $tmpfiles; exit 1; }

rm -fr $tmpfiles

exit 0
#!/bin/sh
: ${srcdir=.}
. "$srcdir/init.sh"; path_prepend_ .

too_big=99999999999999999999999999999999999999999999999999999999999999999999
result=0

# test xstrtoimax
test-xstrtoimax 1 >> out 2>&1 || result=1
test-xstrtoimax -1 >> out 2>&1 || result=1
test-xstrtoimax 1k >> out 2>&1 || result=1
test-xstrtoimax ${too_big}h >> out 2>&1 && result=1
test-xstrtoimax $too_big >> out 2>&1 && result=1
test-xstrtoimax x >> out 2>&1 && result=1
test-xstrtoimax 9x >> out 2>&1 && result=1
test-xstrtoimax 010 >> out 2>&1 || result=1
test-xstrtoimax MiB >> out 2>&1 || result=1

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
if echo solaris | tr -d '\r' | grep solais > /dev/null; then
  cr='\015'
else
  cr='\r'
fi

# normalize output
LC_ALL=C tr -d "$cr" < out > k
mv k out

# compare expected output
cat > exp <<EOF
1->1 ()
-1->-1 ()
1k->1024 ()
invalid suffix in X argument '${too_big}h'
X argument '$too_big' too large
invalid X argument 'x'
invalid suffix in X argument '9x'
010->8 ()
MiB->1048576 ()
EOF

compare exp out || result=1

Exit $result
#!/bin/sh
: ${srcdir=.}
. "$srcdir/init.sh"; path_prepend_ .

too_big=99999999999999999999999999999999999999999999999999999999999999999999
result=0

# test xstrtol
test-xstrtol 1 >> out 2>&1 || result=1
test-xstrtol -1 >> out 2>&1 || result=1
test-xstrtol 1k >> out 2>&1 || result=1
test-xstrtol ${too_big}h >> out 2>&1 && result=1
test-xstrtol $too_big >> out 2>&1 && result=1
test-xstrtol x >> out 2>&1 && result=1
test-xstrtol 9x >> out 2>&1 && result=1
test-xstrtol 010 >> out 2>&1 || result=1
# suffix without integer is valid
test-xstrtol MiB >> out 2>&1 || result=1

# test xstrtoul
test-xstrtoul 1 >> out 2>&1 || result=1
test-xstrtoul -1 >> out 2>&1 && result=1
test-xstrtoul 1k >> out 2>&1 || result=1
test-xstrtoul ${too_big}h >> out 2>&1 && result=1
test-xstrtoul $too_big >> out 2>&1 && result=1
test-xstrtoul x >> out 2>&1 && result=1
test-xstrtoul 9x >> out 2>&1 && result=1
test-xstrtoul 010 >> out 2>&1 || result=1
test-xstrtoul MiB >> out 2>&1 || result=1

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
if echo solaris | tr -d '\r' | grep solais > /dev/null; then
  cr='\015'
else
  cr='\r'
fi

# normalize output
LC_ALL=C tr -d "$cr" < out > k
mv k out

# compare expected output
cat > expected <<EOF
1->1 ()
-1->-1 ()
1k->1024 ()
invalid suffix in X argument '${too_big}h'
X argument '$too_big' too large
invalid X argument 'x'
invalid suffix in X argument '9x'
010->8 ()
MiB->1048576 ()
1->1 ()
invalid X argument '-1'
1k->1024 ()
invalid suffix in X argument '${too_big}h'
X argument '$too_big' too large
invalid X argument 'x'
invalid suffix in X argument '9x'
010->8 ()
MiB->1048576 ()
EOF

compare expected out || result=1

Exit $result
#!/bin/sh
: ${srcdir=.}
. "$srcdir/init.sh"; path_prepend_ .

too_big=99999999999999999999999999999999999999999999999999999999999999999999
result=0

# test xstrtoumax
test-xstrtoumax 1 >> out 2>&1 || result=1
test-xstrtoumax -1 >> out 2>&1 && result=1
test-xstrtoumax 1k >> out 2>&1 || result=1
test-xstrtoumax ${too_big}h >> out 2>&1 && result=1
test-xstrtoumax $too_big >> out 2>&1 && result=1
test-xstrtoumax x >> out 2>&1 && result=1
test-xstrtoumax 9x >> out 2>&1 && result=1
test-xstrtoumax 010 >> out 2>&1 || result=1
test-xstrtoumax MiB >> out 2>&1 || result=1

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
if echo solaris | tr -d '\r' | grep solais > /dev/null; then
  cr='\015'
else
  cr='\r'
fi

# normalize output
LC_ALL=C tr -d "$cr" < out > k
mv k out

# compare expected output
cat > exp <<EOF
1->1 ()
invalid X argument '-1'
1k->1024 ()
invalid suffix in X argument '${too_big}h'
X argument '$too_big' too large
invalid X argument 'x'
invalid suffix in X argument '9x'
010->8 ()
MiB->1048576 ()
EOF

compare exp out || result=1

Exit $result
#!/bin/sh
: ${srcdir=.}
. "$srcdir/init.sh"; path_prepend_ .

# For now, only test with C locale
LC_ALL=C
export LC_ALL

# Find out how to remove carriage returns from output. Solaris /usr/ucb/tr
# does not understand '\r'.
if echo solaris | tr -d '\r' | grep solais > /dev/null; then
  cr='\015'
else
  cr='\r'
fi

# Test with seekable stdin; the follow-on process must see remaining data.
tr @ '\177' <<EOF > in.tmp
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn - entire line consumed
y@n - backspace does not change result
y
does not match either yesexpr or noexpr
n
EOF

cat <<EOF > xout.tmp
N
Y
Y
N
n
EOF

fail=0
(test-yesno; test-yesno 3; cat) < in.tmp > out1.tmp || fail=1
LC_ALL=C tr -d "$cr" < out1.tmp > out.tmp || fail=1
cmp xout.tmp out.tmp || fail=1

(test-yesno 3; test-yesno; cat) < in.tmp > out1.tmp || fail=1
LC_ALL=C tr -d "$cr" < out1.tmp > out.tmp || fail=1
cmp xout.tmp out.tmp || fail=1

# Test for behavior on pipe
cat <<EOF > xout.tmp
Y
N
EOF
echo yes | test-yesno 2 > out1.tmp || fail=1
LC_ALL=C tr -d "$cr" < out1.tmp > out.tmp || fail=1
cmp xout.tmp out.tmp || fail=1

# Test for behavior with no EOL at EOF
cat <<EOF > xout.tmp
Y
EOF
printf y | test-yesno 1 > out1.tmp || fail=1
LC_ALL=C tr -d "$cr" < out1.tmp > out.tmp || fail=1
cmp xout.tmp out.tmp || fail=1

# Test for behavior on EOF
cat <<EOF > xout.tmp
N
EOF
test-yesno </dev/null > out1.tmp || fail=1
LC_ALL=C tr -d "$cr" < out1.tmp > out.tmp || fail=1
cmp xout.tmp out.tmp || fail=1

# Test for behavior when stdin is closed
test-yesno 0 <&- > out1.tmp 2> err.tmp && fail=1
LC_ALL=C tr -d "$cr" < out1.tmp > out.tmp || fail=1
cmp xout.tmp out.tmp || fail=1
test -s err.tmp || fail=1

Exit $fail
#!/bin/sh

tmpfiles=""
trap 'rm -fr $tmpfiles' 1 2 3 15

tmpfiles="$tmpfiles uc_width.out"
./test-uc_width2${EXEEXT} | LC_ALL=C tr -d '\r' > uc_width.out

tmpfiles="$tmpfiles uc_width.ok"
cat > uc_width.ok <<\EOF
0000		0
0020..007E	1
00A0		1
00A1..00AC	A
00AD		0
00AE..02FF	A
0300..036F	0
0370..0482	A
0483..0489	0
048A..0590	A
0591..05BD	0
05BE		A
05BF		0
05C0		A
05C1..05C2	0
05C3		A
05C4..05C5	0
05C6		A
05C7		0
05C8..05FF	A
0600..0605	0
0606..060F	A
0610..061A	0
061B		A
061C		0
061D..064A	A
064B..065F	0
0660..066F	A
0670		0
0671..06D5	A
06D6..06DD	0
06DE		A
06DF..06E4	0
06E5..06E6	A
06E7..06E8	0
06E9		A
06EA..06ED	0
06EE..070E	A
070F		0
0710		A
0711		0
0712..072F	A
0730..074A	0
074B..07A5	A
07A6..07B0	0
07B1..07EA	A
07EB..07F3	0
07F4..0815	A
0816..0819	0
081A		A
081B..0823	0
0824		A
0825..0827	0
0828		A
0829..082D	0
082E..0858	A
0859..085B	0
085C..08E2	A
08E3..0902	0
0903..0939	A
093A		0
093B		A
093C		0
093D..0940	A
0941..0948	0
0949..094C	A
094D		0
094E..0950	A
0951..0957	0
0958..0961	A
0962..0963	0
0964..0980	A
0981		0
0982..09BB	A
09BC		0
09BD..09C0	A
09C1..09C4	0
09C5..09CC	A
09CD		0
09CE..09E1	A
09E2..09E3	0
09E4..0A00	A
0A01..0A02	0
0A03..0A3B	A
0A3C		0
0A3D..0A40	A
0A41..0A42	0
0A43..0A46	A
0A47..0A48	0
0A49..0A4A	A
0A4B..0A4D	0
0A4E..0A50	A
0A51		0
0A52..0A6F	A
0A70..0A71	0
0A72..0A74	A
0A75		0
0A76..0A80	A
0A81..0A82	0
0A83..0ABB	A
0ABC		0
0ABD..0AC0	A
0AC1..0AC5	0
0AC6		A
0AC7..0AC8	0
0AC9..0ACC	A
0ACD		0
0ACE..0AE1	A
0AE2..0AE3	0
0AE4..0B00	A
0B01		0
0B02..0B3B	A
0B3C		0
0B3D..0B3E	A
0B3F		0
0B40		A
0B41..0B44	0
0B45..0B4C	A
0B4D		0
0B4E..0B55	A
0B56		0
0B57..0B61	A
0B62..0B63	0
0B64..0B81	A
0B82		0
0B83..0BBF	A
0BC0		0
0BC1..0BCC	A
0BCD		0
0BCE..0BFF	A
0C00		0
0C01..0C3D	A
0C3E..0C40	0
0C41..0C45	A
0C46..0C48	0
0C49		A
0C4A..0C4D	0
0C4E..0C54	A
0C55..0C56	0
0C57..0C61	A
0C62..0C63	0
0C64..0C80	A
0C81		0
0C82..0CBB	A
0CBC		0
0CBD..0CCB	A
0CCC..0CCD	0
0CCE..0CE1	A
0CE2..0CE3	0
0CE4..0D00	A
0D01		0
0D02..0D40	A
0D41..0D44	0
0D45..0D4C	A
0D4D		0
0D4E..0D61	A
0D62..0D63	0
0D64..0DC9	A
0DCA		0
0DCB..0DD1	A
0DD2..0DD4	0
0DD5		A
0DD6		0
0DD7..0E30	A
0E31		0
0E32..0E33	A
0E34..0E3A	0
0E3B..0E46	A
0E47..0E4E	0
0E4F..0EB0	A
0EB1		0
0EB2..0EB3	A
0EB4..0EB9	0
0EBA		A
0EBB..0EBC	0
0EBD..0EC7	A
0EC8..0ECD	0
0ECE..0F17	A
0F18..0F19	0
0F1A..0F34	A
0F35		0
0F36		A
0F37		0
0F38		A
0F39		0
0F3A..0F70	A
0F71..0F7E	0
0F7F		A
0F80..0F84	0
0F85		A
0F86..0F87	0
0F88..0F8C	A
0F8D..0F97	0
0F98		A
0F99..0FBC	0
0FBD..0FC5	A
0FC6		0
0FC7..102C	A
102D..1030	0
1031		A
1032..1037	0
1038		A
1039..103A	0
103B..103C	A
103D..103E	0
103F..1057	A
1058..1059	0
105A..105D	A
105E..1060	0
1061..1070	A
1071..1074	0
1075..1081	A
1082		0
1083..1084	A
1085..1086	0
1087..108C	A
108D		0
108E..109C	A
109D		0
109E..10FF	A
1100..115F	2
1160..135C	A
135D..135F	0
1360..1711	A
1712..1714	0
1715..1731	A
1732..1734	0
1735..1751	A
1752..1753	0
1754..1771	A
1772..1773	0
1774..17B3	A
17B4..17B5	0
17B6		A
17B7..17BD	0
17BE..17C5	A
17C6		0
17C7..17C8	A
17C9..17D3	0
17D4..17DC	A
17DD		0
17DE..180A	A
180B..180E	0
180F..18A8	A
18A9		0
18AA..191F	A
1920..1922	0
1923..1926	A
1927..1928	0
1929..1931	A
1932		0
1933..1938	A
1939..193B	0
193C..1A16	A
1A17..1A18	0
1A19..1A1A	A
1A1B		0
1A1C..1A55	A
1A56		0
1A57		A
1A58..1A5E	0
1A5F		A
1A60		0
1A61		A
1A62		0
1A63..1A64	A
1A65..1A6C	0
1A6D..1A72	A
1A73..1A7C	0
1A7D..1A7E	A
1A7F		0
1A80..1AAF	A
1AB0..1ABE	0
1ABF..1AFF	A
1B00..1B03	0
1B04..1B33	A
1B34		0
1B35		A
1B36..1B3A	0
1B3B		A
1B3C		0
1B3D..1B41	A
1B42		0
1B43..1B6A	A
1B6B..1B73	0
1B74..1B7F	A
1B80..1B81	0
1B82..1BA1	A
1BA2..1BA5	0
1BA6..1BA7	A
1BA8..1BA9	0
1BAA		A
1BAB..1BAD	0
1BAE..1BE5	A
1BE6		0
1BE7		A
1BE8..1BE9	0
1BEA..1BEC	A
1BED		0
1BEE		A
1BEF..1BF1	0
1BF2..1C2B	A
1C2C..1C33	0
1C34..1C35	A
1C36..1C37	0
1C38..1CCF	A
1CD0..1CD2	0
1CD3		A
1CD4..1CE0	0
1CE1		A
1CE2..1CE8	0
1CE9..1CEC	A
1CED		0
1CEE..1CF3	A
1CF4		0
1CF5..1CF7	A
1CF8..1CF9	0
1CFA..1DBF	A
1DC0..1DF5	0
1DF6..1DFB	A
1DFC..1DFF	0
1E00..200A	A
200B..200F	0
2010..2029	A
202A..202E	0
202F..205F	A
2060..2064	0
2065		A
2066..206F	0
2070..20A8	A
20A9		1
20AA..20CF	A
20D0..20F0	0
20F1..2328	A
2329..232A	2
232B..2CEE	A
2CEF..2CF1	0
2CF2..2D7E	A
2D7F		0
2D80..2DDF	A
2DE0..2DFF	0
2E00..2E7F	A
2E80..3029	2
302A..302D	0
302E..303E	2
303F		A
3040..3098	2
3099..309A	0
309B..4DBF	2
4DC0..4DFF	A
4E00..A4CF	2
A4D0..A66E	A
A66F..A672	0
A673		A
A674..A67D	0
A67E..A69D	A
A69E..A69F	0
A6A0..A6EF	A
A6F0..A6F1	0
A6F2..A801	A
A802		0
A803..A805	A
A806		0
A807..A80A	A
A80B		0
A80C..A824	A
A825..A826	0
A827..A8C3	A
A8C4		0
A8C5..A8DF	A
A8E0..A8F1	0
A8F2..A925	A
A926..A92D	0
A92E..A946	A
A947..A951	0
A952..A97F	A
A980..A982	0
A983..A9B2	A
A9B3		0
A9B4..A9B5	A
A9B6..A9B9	0
A9BA..A9BB	A
A9BC		0
A9BD..A9E4	A
A9E5		0
A9E6..AA28	A
AA29..AA2E	0
AA2F..AA30	A
AA31..AA32	0
AA33..AA34	A
AA35..AA36	0
AA37..AA42	A
AA43		0
AA44..AA4B	A
AA4C		0
AA4D..AA7B	A
AA7C		0
AA7D..AAAF	A
AAB0		0
AAB1		A
AAB2..AAB4	0
AAB5..AAB6	A
AAB7..AAB8	0
AAB9..AABD	A
AABE..AABF	0
AAC0		A
AAC1		0
AAC2..AAEB	A
AAEC..AAED	0
AAEE..AAF5	A
AAF6		0
AAF7..ABE4	A
ABE5		0
ABE6..ABE7	A
ABE8		0
ABE9..ABEC	A
ABED		0
ABEE..ABFF	A
AC00..D7A3	2
D7A4..F8FF	A
F900..FAFF	2
FB00..FB1D	A
FB1E		0
FB1F..FDFF	A
FE00..FE0F	0
FE10..FE1F	2
FE20..FE2F	0
FE30..FE6F	2
FE70..FEFE	A
FEFF		0
FF00..FF60	2
FF61..FFDF	1
FFE0..FFE6	2
FFE7..FFF8	1
FFF9..FFFB	0
FFFC..101FC	1
101FD		0
101FE..102DF	1
102E0		0
102E1..10375	1
10376..1037A	0
1037B..10A00	1
10A01..10A03	0
10A04		1
10A05..10A06	0
10A07..10A0B	1
10A0C..10A0F	0
10A10..10A37	1
10A38..10A3A	0
10A3B..10A3E	1
10A3F		0
10A40..10AE4	1
10AE5..10AE6	0
10AE7..11000	1
11001		0
11002..11037	1
11038..11046	0
11047..1107E	1
1107F..11081	0
11082..110B2	1
110B3..110B6	0
110B7..110B8	1
110B9..110BA	0
110BB..110BC	1
110BD		0
110BE..110FF	1
11100..11102	0
11103..11126	1
11127..1112B	0
1112C		1
1112D..11134	0
11135..11172	1
11173		0
11174..1117F	1
11180..11181	0
11182..111B5	1
111B6..111BE	0
111BF..111C9	1
111CA..111CC	0
111CD..1122E	1
1122F..11231	0
11232..11233	1
11234		0
11235		1
11236..11237	0
11238..112DE	1
112DF		0
112E0..112E2	1
112E3..112EA	0
112EB..112FF	1
11300..11301	0
11302..1133B	1
1133C		0
1133D..1133F	1
11340		0
11341..11365	1
11366..1136C	0
1136D..1136F	1
11370..11374	0
11375..114B2	1
114B3..114B8	0
114B9		1
114BA		0
114BB..114BE	1
114BF..114C0	0
114C1		1
114C2..114C3	0
114C4..115B1	1
115B2..115B5	0
115B6..115BB	1
115BC..115BD	0
115BE		1
115BF..115C0	0
115C1..115DB	1
115DC..115DD	0
115DE..11632	1
11633..1163A	0
1163B..1163C	1
1163D		0
1163E		1
1163F..11640	0
11641..116AA	1
116AB		0
116AC		1
116AD		0
116AE..116AF	1
116B0..116B5	0
116B6		1
116B7		0
116B8..1171C	1
1171D..1171F	0
11720..11721	1
11722..11725	0
11726		1
11727..1172B	0
1172C..16AEF	1
16AF0..16AF4	0
16AF5..16B2F	1
16B30..16B36	0
16B37..16F8E	1
16F8F..16F92	0
16F93..1BC9C	1
1BC9D..1BC9E	0
1BC9F		1
1BCA0..1BCA3	0
1BCA4..1D166	1
1D167..1D169	0
1D16A..1D172	1
1D173..1D182	0
1D183..1D184	1
1D185..1D18B	0
1D18C..1D1A9	1
1D1AA..1D1AD	0
1D1AE..1D241	1
1D242..1D244	0
1D245..1D9FF	1
1DA00..1DA36	0
1DA37..1DA3A	1
1DA3B..1DA6C	0
1DA6D..1DA74	1
1DA75		0
1DA76..1DA83	1
1DA84		0
1DA85..1DA9A	1
1DA9B..1DA9F	0
1DAA0		1
1DAA1..1DAAF	0
1DAB0..1E8CF	1
1E8D0..1E8D6	0
1E8D7..1FFFF	1
20000..3FFFF	2
40000..E0000	1
E0001		0
E0002..E001F	1
E0020..E007F	0
E0080..E00FF	1
E0100..E01EF	0
E01F0..10FFFF	1
EOF

: ${DIFF=diff}
${DIFF} uc_width.ok uc_width.out
result=$?

rm -fr $tmpfiles

exit $result
#!/bin/sh
# make sure chgrp is reasonable

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chgrp
require_membership_in_two_groups_


set _ $groups; shift
g1=$1
g2=$2
mkdir d
touch f f2 d/f3
chgrp $g1 f || fail=1
chgrp $g2 f || fail=1
chgrp $g2 f2 || fail=1
chgrp -R $g1 d || fail=1

d_files='d d/f3'

chgrp $g1 f || fail=1  ; test $(stat --p=%g f) = $g1 || fail=1
chgrp $g2 f || fail=1  ; test $(stat --p=%g f) = $g2 || fail=1
chgrp $g2 f || fail=1  ; test $(stat --p=%g f) = $g2 || fail=1
chgrp '' f  || fail=1  ; test $(stat --p=%g f) = $g2 || fail=1
chgrp $g1 f || fail=1  ; test $(stat --p=%g f) = $g1 || fail=1
chgrp $g1 f || fail=1  ; test $(stat --p=%g f) = $g1 || fail=1
chgrp --reference=f2 f ; test $(stat --p=%g f) = $g2 || fail=1

chgrp -R $g2 d ||fail=1; test $(stat --p=%g: $d_files) = "$g2:$g2:" || fail=1
chgrp -R $g1 d ||fail=1; test $(stat --p=%g: $d_files) = "$g1:$g1:" || fail=1
chgrp -R $g2 d ||fail=1; test $(stat --p=%g: $d_files) = "$g2:$g2:" || fail=1
chgrp -R $g1 d ||fail=1; test $(stat --p=%g: $d_files) = "$g1:$g1:" || fail=1
chgrp $g2 d    ||fail=1; test $(stat --p=%g: $d_files) = "$g2:$g1:" || fail=1

rm -f f
touch f
ln -s f symlink
chgrp $g1 f
test $(stat --printf=%g f) = $g1 || fail=1

# This should not change the group of f.
chgrp -h $g2 symlink
test $(stat --printf=%g f) = $g1 || fail=1

# Don't fail if chgrp failed to set the group of a symlink.
# Some systems don't support that.
test $(stat --printf=%g symlink) = $g2 ||
  echo 'info: failed to set group of symlink' 1>&2

chown --from=:$g1 :$g2 f; test $(stat --printf=%g f) = $g2 || fail=1

# This *should* change the group of f.
# Though note that the diagnostic is misleading in that
# it says the 'group of 'symlink'' has been changed.
chgrp $g1 symlink; test $(stat --printf=%g f) = $g1 || fail=1
chown --from=:$g1 :$g2 f; test $(stat --printf=%g f) = $g2 || fail=1

# If -R is specified without -H or L, -h is assumed.
chgrp -h $g1 f symlink; test $(stat --printf=%g symlink) = $g1 || fail=1
chgrp -R $g2 symlink
chown --from=:$g1 :$g2 f; test $(stat --printf=%g f) = $g2 || fail=1

# Make sure we can change the group of inaccessible files.
chmod a-r f
chown --from=:$g2 :$g1 f; test $(stat --printf=%g f) = $g1 || fail=1
chmod 0 f
chown --from=:$g1 :$g2 f; test $(stat --printf=%g f) = $g2 || fail=1

# chown() must not be optimized away even when
# the file's owner and group already have the desired value.
rm -f f g
touch f g
chgrp $g1 f g
chgrp $g2 g
sleep 1
chgrp $g1 f

# The following no-change chgrp command is supposed to update f's ctime,
# but on OpenBSD and Darwin 7.9.0-8.11.1 (aka MacOS X 10.3.9 - 10.4.11)
# it appears to be a no-op for some file system types (at least NFS) so g's
# ctime is more recent.  This is not a big deal;
# this test works fine when the files are on a local file system (/tmp).
chgrp '' f
test "$(ls -C -c -t f g)" = 'f  g' || \
  {
    case $host_triplet in
      *openbsd*) echo ignoring known OpenBSD-specific chgrp failure 1>&2 ;;
      *darwin7.9.*|*darwin8.*)
        echo ignoring known MacOS X-specific chgrp failure 1>&2 ;;
      *) echo $host_triplet: no-change chgrp failed to update ctime 1>&2;
            fail=1 ;;
    esac
  }

Exit $fail
#!/bin/sh
# Ensure that chgrp -R does not dereference symlinks.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chgrp
require_membership_in_two_groups_

set _ $groups; shift
g2=$2

mkdir d && touch f && ln -s ../f d/s || framework_failure_


g_init=$(stat --printf=%g f)
chgrp -R $g2 d || fail=1
test $(stat --printf=%g f) = $g_init || fail=1

Exit $fail
#!/bin/sh
# see if chgrp can change the group of a symlink

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chgrp
require_membership_in_two_groups_

set _ $groups; shift
g1=$1
g2=$2

touch f
ln -s f symlink

chgrp -h $g2 symlink 2> /dev/null
set _ $(ls -ln symlink)
g=$5
test "$g" = $g2 ||
  skip_ "your system doesn't support changing the owner or group" \
      "of a symbolic link."


chgrp $g1 f
set _ $(ls -ln f); g=$5; test "$g" = $g1 || fail=1

chgrp -h $g2 symlink || fail=1
set _ $(ls -ln f); g=$5; test "$g" = $g1 || fail=1
set _ $(ls -ln symlink); g=$5; test "$g" = $g2 || fail=1

# This should not change the group of f.
chgrp -h $g2 symlink || fail=1
set _ $(ls -ln f); g=$5; test "$g" = $g1 || fail=1
set _ $(ls -ln symlink); g=$5; test "$g" = $g2 || fail=1

chgrp $g2 f
set _ $(ls -ln f); g=$5; test "$g" = $g2 || fail=1

# This *should* change the group of f.
# Though note that the diagnostic you'd get with -c is misleading in that
# it says the 'group of 'symlink'' has been changed.
chgrp --dereference $g1 symlink
set _ $(ls -ln f); g=$5; test "$g" = $g1 || fail=1
set _ $(ls -ln symlink); g=$5; test "$g" = $g2 || fail=1

Exit $fail
#!/bin/sh
# Make sure chgrp gives the right diagnostic for a readable,
# but inaccessible directory.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chgrp
require_membership_in_two_groups_
skip_if_root_

set _ $groups; shift
g1=$1
g2=$2

mkdir -p d/no-x/y || framework_failure_
chmod u=rw d/no-x || framework_failure_


# This must exit nonzero.
chgrp -R $g2 d >/dev/null 2>out && fail=1

prog=chgrp
# NOTE: this code is the same for all tests/*/no-x tests.
# Depending on whether fts is using native fdopendir, we see one
# of the following diagnostics (note also the /y suffix in one case):
#   prog: 'd/no-x': Permission denied
#   prog: cannot access 'd/no-x/y': Permission denied
#   prog: cannot read directory 'd/no-x': Permission denied
# Convert either of the latter two to the first one.
sed "s/^$prog: cannot access /$prog: /" out > t && mv t out
sed "s/^$prog: cannot read directory /$prog: /" out > t && mv t out
sed 's,d/no-x/y,d/no-x,' out > t && mv t out

cat <<EOF > exp
$prog: 'd/no-x': Permission denied
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test POSIX-mandated -H option.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chgrp
require_membership_in_two_groups_

set _ $groups; shift
g1=$1
g2=$2

mkdir 1 2 3 || framework_failure_
touch 1/1F 2/2F 3/3F || framework_failure_
ln -s 1 1s || framework_failure_
ln -s ../3 2/2s || framework_failure_
chgrp -R $g1 1 2 3 || framework_failure_


chgrp --preserve-root -H -R $g2 1s 2 || fail=1

# These must have group $g2.
# =========================
changed='
1
1/1F
2
2/2F
3
'
for i in $changed; do
  # Filter out symlinks (entries that end in 's'), since it's not
  # possible to change their group/owner information on some systems.
  case $i in *s) continue;; esac
  set _ $(ls -dgn $i); shift
  group=$3
  test $group = $g2 || fail=1
done

# These must have group $g1.
# =========================
not_changed='
1s
2/2s
3/3F
'
for i in $not_changed; do
  # Filter out symlinks (entries that end in 's'), since it's not
  # possible to change their group/owner information on some systems.
  case $i in *s) continue;; esac
  set _ $(ls -dgn $i); shift
  group=$3
  test $group = $g1 || fail=1
done

Exit $fail
#!/bin/sh
# ad-hoc tests of chgrp with -R and -H or -L and symlinks

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chgrp
require_membership_in_two_groups_

set _ $groups; shift
g1=$1
g2=$2


# chgrp -R should not traverse a symlink to a directory.
mkdir d e
touch d/dd e/ee
ln -s ../e d/s
chgrp -R $g1 e/ee || fail=1
# This should not should change the group of e/ee
chgrp -R $g2 d
set _ $(ls -ln e/ee); g=$5; test "$g" = $g1 || fail=1
# This must change the group of e/ee, since -L makes
# chgrp traverse the symlink from d/s into e.
chgrp -L -R $g2 d
set _ $(ls -ln e/ee); g=$5; test "$g" = $g2 || fail=1

# This must *not* change the group of e/ee
chgrp -H -R $g1 d
set _ $(ls -ln e/ee); g=$5; test "$g" = $g2 || fail=1

ln -s d link

# This shouldn't change the group of e/ee either.
chgrp -H -R $g1 link || fail=1
set _ $(ls -ln e/ee); g=$5; test "$g" = $g2 || fail=1
# But it *should* change d/dd.
set _ $(ls -ln d/dd); g=$5; test "$g" = $g1 || fail=1

Exit $fail
#!/bin/sh
# Verify that chmod's --changes (-c) option works.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chmod

umask 0
file=f
touch $file || framework_failure_
chmod 444 $file || framework_failure_

skip_if_setgid_


chmod u=rwx $file || fail=1
chmod -c g=rwx $file > out || fail=1
chmod -c g=rwx $file > empty || fail=1

compare /dev/null empty || fail=1
case "$(cat out)" in
  "mode of 'f' changed from 0744 "?rwxr--r--?" to 0774 "?rwxrwxr--?) ;;
  *) cat out; fail=1 ;;
esac

# From V5.1.0 to 8.22 this would stat the wrong file and
# give an erroneous ENOENT diagnostic
mkdir -p a/b || framework_failure_
# chmod g+s might fail as detailed in setgid.sh
# but we don't care about those edge cases here
chmod g+s a/b
# This should never warn, but it did when special
# bits are set on b (the common case under test)
chmod -c -R g+w a 2>err
compare /dev/null err || fail=1

Exit $fail
#!/bin/sh
# Test "chmod =x" and the like.

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chmod

file=f
touch $file || framework_failure_

umask 005
for mode in =x =xX =Xx =x,=X =X,=x; do
  chmod a=r,$mode $file || fail=1
  case "$(ls -l $file)" in
    ---x--x---*) ;;
    *) fail=1; echo "after 'chmod $mode $file':"; ls -l $file ;;
  esac
done

Exit $fail
#!/bin/sh
# Make sure chmod mode arguments of the form A=B work properly.
# Before fileutils-4.1.2, some of them didn't.
# Also, before coreutils-5.3.1, =[ugo] sometimes didn't work.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chmod

touch f || framework_failure_


expected_u=-rwx------
expected_g=----rwx---
expected_o=-------rwx

for src in u g o; do
  for dest in u g o; do
    test $dest = $src && continue
    chmod a=,$src=rwx,$dest=$src,$src= f || fail=1
    actual_perms=$(ls -l f|cut -b-10)
    expected_perms=$(eval 'echo $expected_'$dest)
    test "$actual_perms" = "$expected_perms" || fail=1
  done
done

umask 027
chmod a=,u=rwx,=u f || fail=1
actual_perms=$(ls -l f|cut -b-10)
test "$actual_perms" = "-rwxr-x---" || fail=1

Exit $fail
#!/bin/sh
# Test for the bug fixed on 2006-09-20.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chmod

mkdir -p d/e || framework_failure_
chmod 0 d/e d || framework_failure_


chmod u+rwx d d/e || fail=1

Exit $fail
#!/bin/sh
# Make sure chmod gives the right diagnostic for a readable,
# but inaccessible directory.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chmod
skip_if_root_

mkdir -p d/no-x/y a/b || framework_failure_
chmod u=rw d/no-x || framework_failure_


# This must exit nonzero.
chmod -R o=r d >/dev/null 2>out && fail=1

prog=chmod
# NOTE: this code is the same for all tests/*/no-x tests.
# Depending on whether fts is using native fdopendir, we see one
# of the following diagnostics (note also the /y suffix in one case):
#   prog: 'd/no-x': Permission denied
#   prog: cannot access 'd/no-x/y': Permission denied
#   prog: cannot read directory 'd/no-x': Permission denied
# Convert either of the latter two to the first one.
sed "s/^$prog: cannot access /$prog: /" out > t && mv t out
sed "s/^$prog: cannot read directory /$prog: /" out > t && mv t out
sed 's,d/no-x/y,d/no-x,' out > t && mv t out

cat <<EOF > exp
$prog: 'd/no-x': Permission denied
EOF

compare exp out || fail=1

cd a
# This will fail with ''chmod: fts_read failed: Permission denied''
chmod a-x . b 2> /dev/null && fail=1
# chmod must exit with status 1.
# Due to a bug in coreutils-5.93's fts.c, chmod would provoke
# an abort (exit with status 134) on recent glibc-based systems.
test $? = 1 || fail=1

Exit $fail
#!/bin/sh
# ensure that chmod diagnoses a certain type of invalid mode string

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chmod


# Before coreutils-5.92, this would mistakenly succeed,
# and act like 'chmod 0 .'.
for mode in '0-anything' '7-anything' '8'; do
  returns_ 1 chmod "$mode" . 2>/dev/null || fail=1
done

Exit $fail
#!/bin/sh
# Make sure GNU chmod works the same way as those of Solaris, HPUX, AIX
# on directories with the setgid bit set.  Also, check that the GNU octal
# notations work.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chmod

umask 0
mkdir -m 755 d || framework_failure_

chmod g+s d 2> /dev/null && env -- test -g d ||
  {
    # This is required because on some systems (at least NetBSD 1.4.2A),
    # it may happen that when you create a directory, its group isn't one
    # to which you belong.  When that happens, the above chmod fails.  So
    # here, upon failure, we try to set the group, then rerun the chmod command.

    id_g=$(id -g) &&
    test -n "$id_g" &&
    chgrp "$id_g" d &&
    chmod g+s d || framework_failure_
  }

# "chmod g+s d" does nothing on some NFS file systems.
env -- test -g d ||
  skip_ 'cannot create setgid directories'

for mode in \
  + - g-s 00755 000755 =755 -2000 -7022 755 0755 \
  +2000 -5022 =7777,-5022
do
  chmod $mode d || fail=1

  case $mode in
    g-s | 00*755 | =755 | -2000 | -7022)
       expected_mode=drwxr-xr-x ;;
    *) expected_mode=drwxr-sr-x ;;
  esac
  ls_output=$(ls -ld d)
  case $ls_output in
    $expected_mode*) ;;
    *) fail=1 ;;
  esac

  chmod =2755 d || fail=1
done

Exit $fail
#!/bin/sh
# ensure that chgrp, chmod, chown -f don't print some diagnostics

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chgrp chmod chown

chmod -f 0   no-such 2> out && fail=1
chgrp -f 0   no-such 2>> out && fail=1
chown -f 0:0 no-such 2>> out && fail=1
touch exp || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test for proper error and exit code of chmod on a dangling symlink.

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chmod

ln -s non-existent dangle || framework_failure_


# This operation cannot succeed since the symbolic link dangles.
chmod 644 dangle 2> out && fail=1

echo "chmod: cannot operate on dangling symlink 'dangle'" > exp
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test that chmod -x file reports an error if the result is executable.

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chmod

touch file
chmod 755 file
(umask 77 && returns_ 1 chmod -x file) 2>/dev/null || fail=1

Exit $fail
#!/bin/sh
# Verify that chmod works correctly with odd option combinations.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chmod


# Each line in this list is a set of arguments, followed by :,
# followed by the set of files it will attempt to chmod,
# or empty if the usage is erroneous.
# Many of these test cases are due to Glenn Fowler.
# These test cases assume GNU behavior for "options" like -w.
cases='
  --         :
  -- --      :
  -- -- -- f : -- f
  -- -- -w f : -w f
  -- -- f    : f
  -- -w      :
  -- -w -- f : -- f
  -- -w -w f : -w f
  -- -w f    : f
  -- f       :
  -w         :
  -w --      :
  -w -- -- f : -- f
  -w -- -w f : -w f
  -w -- f    : f
  -w -w      :
  -w -w -- f : f
  -w -w -w f : f
  -w -w f    : f
  -w f       : f
  f          :
  f --       :
  f -w       : f
  f f        :
  u+gr f     :
  ug,+x f    :
'

all_files=$(echo "$cases" | sed 's/.*://'|sort -u)

old_IFS=$IFS
IFS='
'
for case in $cases; do
  IFS=$old_IFS
  args=$(expr "$case" : ' *\(.*[^ ]\) *:')
  files=$(expr "$case" : '.*: *\(.*\)')

  case $files in
  '')
    touch -- $all_files || framework_failure_
    returns_ 1 chmod $args 2>/dev/null || fail=1
    ;;
  ?*)
    touch -- $files || framework_failure_
    chmod $args || fail=1
    for file in $files; do
      # Test for misparsing args by creating all $files but $file.
      # chmod has a bug if it succeeds even though $file is absent.
      rm -f -- $all_files && touch -- $files && rm -- $file \
          || framework_failure_
      returns_ 1 chmod $args 2>/dev/null || fail=1
    done
    ;;
  esac
done

Exit $fail
#!/bin/sh
# make sure chown --from=... works

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chown
require_root_

touch f || framework_failure_

chown -R --preserve-root 0:1 f

# Make sure the owner and group are 0 and 1 respectively.
set _ $(ls -n f); shift; test "$3:$4" = 0:1 || fail=1

# Make sure the correct diagnostic is output
# Note we output a name even though an id was specified.
chown -v --from=42 43 f > out || fail=1
printf "ownership of 'f' retained as $(id -nu)\n" > exp
compare exp out || fail=1

# Ensure diagnostics work for non existent files.
returns_ 1 chown -v 0 nf > out || fail=1
printf "failed to change ownership of 'nf' to 0\n" > exp
compare exp out || fail=1

chown --from=0:1 2:010 f || fail=1

# And now they should be 2 and 10 respectively.
set _ $(ls -n f); shift; test "$3:$4" = 2:10 || fail=1

ln -s f slink
# Applying chown to a symlink with --no-dereference
# should change only the link.
chown --no-dereference 0:1 slink || fail=1
# owner/group on the symlink should be set
set _ $(ls -n slink); shift; test "$3:$4" = 0:1 || fail=1
# owner/group on the referent should remain unchanged
set _ $(ls -n f);     shift; test "$3:$4" = 2:10 || fail=1

chown --no-dereference --from=0:1 2:010 slink || fail=1
# owner/group on the symlink should be changed
set _ $(ls -n slink); shift; test "$3:$4" = 2:10 || fail=1

Exit $fail
#!/bin/sh
# For coreutils-5.2.1 and earlier, chown --dereference would skip
# symlinks having owner/group matching the specified owner/group.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chown

ln -s no-such dangle || framework_failure_


set _ $(ls -ldo dangle); shift; user=$3

# With 5.2.1 and earlier, this command would mistakenly succeed.
chown --dereference $user dangle 2> out1 && fail=1
sed 's/: [^:]*$//' out1 > out

cat <<\EOF > exp || fail=1
chown: cannot dereference 'dangle'
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Verify that --preserve-root works.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chown
skip_if_root_

mkdir d && ln -s / d/slink-to-root


# Even if --preserve-root were to malfunction, allowing the chown or
# chgrp to traverse through "/", since we're running as non-root,
# they would be very unlikely to cause any changes.
chown -R --preserve-root 0 / >  out 2>&1 && fail=1
chgrp -R --preserve-root 0 / >> out 2>&1 && fail=1

# Here, if --preserve-root were to malfunction, chmod could make changes,
# but only to files owned and unreadable by the user running this test,
# and then, only to make them readable by owner.
chmod -R --preserve-root u+r / >> out 2>&1 && fail=1

# With -RHh, --preserve-root should trigger nothing,
# since the symlink in question is not a command line argument.
# Contrary to the above commands, these two should succeed.
echo '==== test -RHh' >> out
chown -RHh --preserve-root $(id -u) d >> out 2>&1 || fail=1
chgrp -RHh --preserve-root $(id -g) d >> out 2>&1 || fail=1

# These must fail.
echo '==== test -RLh' >> out
chown -RLh --preserve-root $(id -u) d >> out 2>&1 && fail=1
chgrp -RLh --preserve-root $(id -g) d >> out 2>&1 && fail=1

cat <<\EOF > exp || fail=1
chown: it is dangerous to operate recursively on '/'
chown: use --no-preserve-root to override this failsafe
chgrp: it is dangerous to operate recursively on '/'
chgrp: use --no-preserve-root to override this failsafe
chmod: it is dangerous to operate recursively on '/'
chmod: use --no-preserve-root to override this failsafe
==== test -RHh
==== test -RLh
chown: it is dangerous to operate recursively on 'd/slink-to-root' (same as '/')
chown: use --no-preserve-root to override this failsafe
chgrp: it is dangerous to operate recursively on 'd/slink-to-root' (same as '/')
chgrp: use --no-preserve-root to override this failsafe
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Make sure "chown USER:GROUP FILE" works, and similar tests with separators.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chown

id_u=$(id -u) || framework_failure_
test -n "$id_u" || framework_failure_

id_un=$(id -un) || framework_failure_
test -n "$id_un" || framework_failure_

id_g=$(id -g) || framework_failure_
test -n "$id_g" || framework_failure_

id_gn=$(id -gn) || framework_failure_
test -n "$id_gn" || framework_failure_

# Systems with both local and external groups with conflicting IDs,
# were seen to fail this test erroneously with EPERM errors.
test $(getent group | grep "^$id_gn:" | wc -l) = 1 ||
  skip_ "group '$id_gn' not biunique: " \
        "$(getent group | grep "^$id_gn:" | tr '\n' ',')"

# FreeBSD 6.x's getgrnam fails to look up a group name containing
# a space. On such a system, skip this test if the group name contains
# a byte not in the portable filename character set.
case $host_triplet in
  *-freebsd6.*)
    case $id_gn in
      *[^a-zA-Z0-9._-]*) skip_ "invalid group name: $id_gn";;
    esac;;
  *) ;;
esac


chown '' . || fail=1

for u in $id_u "$id_un" ''; do
  for g in $id_g "$id_gn" ''; do
    case $u$g in
      *.*) seps=':' ;;
      *)   seps=': .' ;;
    esac
    for sep in $seps; do
      case $u$sep$g in
        [0-9]*$sep) returns_ 1 chown "$u$sep$g" . 2>/dev/null || fail=1 ;;
        *) chown "$u$sep$g" . || fail=1 ;;
      esac
    done
  done
done

Exit $fail
#!/bin/sh
# ensure that cp does not write through a just-copied symlink

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir a b c || framework_failure_
ln -s ../t a/1 || framework_failure_
echo payload > b/1 || framework_failure_

echo "cp: will not copy 'b/1' through just-created symlink 'c/1'" \
  > exp || framework_failure_

# Check both cases: a dangling symlink, and one pointing to a writable file.

for i in dangling-dest existing-dest; do
  test $i = existing-dest && echo i > t
  test $i = dangling-dest && rm -f t

  cp -dR a/1 b/1 c 2> out && fail=1

  compare exp out || fail=1

  # When the destination is a dangling symlink,
  # ensure that cp does not create it.
  test $i = dangling-dest \
    && test -f t && fail=1

  # When the destination symlink points to a writable file,
  # ensure that cp does not change it.
  test $i = existing-dest \
    && case $(cat t) in i);; *) fail=1;; esac
done

Exit $fail
#!/bin/sh
# copy files/directories across file system boundaries
# and make sure acls are preserved appropriately

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

require_acl_

# Skip this test if cp was built without ACL support:
grep '^#define USE_ACL 1' $CONFIG_HEADER > /dev/null ||
  skip_ "insufficient ACL support"

mkdir -p a b || framework_failure_
touch a/file || framework_failure_

# Ensure that setfacl and getfacl work on this file system.
skip=no
acl1=$(cd a && getfacl file) || skip=yes
setfacl -m user:bin:rw- a/file 2> /dev/null || skip=yes
test $skip = yes &&
  skip_ "'.' is not on a suitable file system for this test"

# copy a file without preserving permissions
cp a/file b/ || fail=1
acl2=$(cd b && getfacl file) || framework_failure_
test "$acl1" = "$acl2" || fail=1

# Update with acl set above
acl1=$(cd a && getfacl file) || framework_failure_

# copy a file, preserving permissions
cp -p a/file b/ || fail=1
acl2=$(cd b && getfacl file) || framework_failure_
test "$acl1" = "$acl2" || fail=1

# copy a file, preserving permissions, with --attributes-only
echo > a/file || framework_failure_ # add some data
test -s a/file || framework_failure_
cp -p --attributes-only a/file b/ || fail=1
compare /dev/null b/file || fail=1
acl2=$(cd b && getfacl file) || framework_failure_
test "$acl1" = "$acl2" || fail=1

Exit $fail
#!/bin/sh
# Make sure cp --attributes-only doesn't truncate existing data

# Copyright 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

printf '1' > file1
printf '2' > file2
printf '2' > file2.exp

cp --attributes-only file1 file2 || fail=1
cmp file2 file2.exp || fail=1

Exit $fail
#!/bin/sh
# Test cp backup.

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

suffix=.b
file=F
file_backup="$file$suffix"

echo test > $file || fail=1

# Specify both version control and suffix so the environment variables
# (possibly set by the user running these tests) aren't used.
cp --force --backup=simple --suffix=$suffix $file $file || fail=1
cp -T --force --backup=simple --suffix=$suffix $file $file || fail=1

test -f $file || fail=1
test -f $file_backup || fail=1
compare $file $file_backup > /dev/null || fail=1

Exit $fail
#!/bin/sh
# Ensure that cp -b doesn't back up directories.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir x y || framework_failure_


cp -a x y || fail=1

# This would mistakenly create a backup of y/x (y/x~) in coreutils-6.3.
cp -ab x y || fail=1
test -d y/x || fail=1
test -d y/x~ && fail=1

Exit $fail
#!/bin/sh
# Test cp backup to source file.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

echo a > a || framework_failure_
echo a-tilde > a~ || framework_failure_

# This cp command should exit nonzero.
cp --b=simple a~ a > out 2>&1 && fail=1

sed "s,cp:,XXX:," out > out2

cat > exp <<\EOF
XXX: backing up 'a' would destroy source;  'a~' not copied
EOF

compare exp out2 || fail=1

Exit $fail
#!/bin/sh
# Ensure cp --preserves copies capabilities

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp
require_root_
working_umask_or_skip_


grep '^#define HAVE_CAP 1' $CONFIG_HEADER > /dev/null \
  || skip_ "configured without libcap support"

(setcap --help) 2>&1 |grep 'usage: setcap' > /dev/null \
  || skip_ "setcap utility not found"
(getcap --help) 2>&1 |grep 'usage: getcap' > /dev/null \
  || skip_ "getcap utility not found"


touch file || framework_failure_
chown $NON_ROOT_USERNAME file || framework_failure_

setcap 'cap_net_bind_service=ep' file ||
  skip_ "setcap doesn't work"
getcap file | grep cap_net_bind_service >/dev/null ||
  skip_ "getcap doesn't work"

cp --preserve=xattr file copy1 || fail=1

# Before coreutils 8.5 the capabilities would not be preserved,
# as the owner was set _after_ copying xattrs, thus clearing any capabilities.
cp --preserve=all   file copy2 || fail=1

for file in copy1 copy2; do
  getcap $file | grep cap_net_bind_service >/dev/null || fail=1
done

Exit $fail
#!/bin/sh
# test cp's -H and -L options

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir src-dir dest-dir || framework_failure_
echo f > f || framework_failure_
ln -s f slink || framework_failure_
ln -s no-such-file src-dir/slink || framework_failure_


cp -H -R slink src-dir dest-dir || fail=1
test -d src-dir || fail=1
test -d dest-dir/src-dir || fail=1

# Expect this to succeed since this slink is not a symlink
cat dest-dir/slink > /dev/null 2>&1 || fail=1

# Expect this to fail since *this* slink is a dangling symlink.
returns_ 1 cat dest-dir/src-dir/slink >/dev/null 2>&1 || fail=1

# FIXME: test -L, too.

Exit $fail
#!/bin/sh
# Ensure that cp -Z, -a and cp --preserve=context work properly.
# In particular, test on a writable NFS partition.
# Check also locally if --preserve=context, -a and --preserve=all
# does work

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp
require_root_
require_selinux_

cwd=$(pwd)
cleanup_() { cd /; umount "$cwd/mnt"; }

# This context is special: it works even when mcstransd isn't running.
ctx=root:object_r:tmp_t:s0

# Check basic functionality - before check on fixed context mount
touch c || framework_failure_
chcon $ctx c || framework_failure_
cp -a c d 2>err || framework_failure_
cp --preserve=context c e || framework_failure_
cp --preserve=all c f || framework_failure_
ls -Z d | grep $ctx || fail=1
# there must be no stderr output for -a
compare /dev/null err || fail=1
ls -Z e | grep $ctx || fail=1
ls -Z f | grep $ctx || fail=1
rm -f f

# Check handling of existing dirs which requires specific handling
# due to recursion, and was handled incorrectly in coreutils-8.22
# Note standard permissions are updated for existing directories
# in the destination, so SELinux contexts should be updated too.
chmod o+rw restore/existing_dir
mkdir -p backup/existing_dir/ || framework_failure_
ls -Zd backup/existing_dir > ed_ctx || fail=1
grep $ctx ed_ctx && framework_failure_
touch backup/existing_dir/file || framework_failure_
chcon $ctx backup/existing_dir/file || framework_failure_
# Set the dir context to ensure it is reset
mkdir -p --context="$ctx" restore/existing_dir || framework_failure_
# Copy and ensure existing directories updated
cp -a backup/. restore/
ls -Zd restore/existing_dir > ed_ctx || fail=1
grep $ctx ed_ctx &&
  { ls -lZd restore/existing_dir; fail=1; }

# Check restorecon (-Z) functionality for file and directory
get_selinux_type() { ls -Zd "$1" | sed -n 's/.*:\(.*_t\):.*/\1/p'; }
# Also make a dir with our known context
mkdir c_d || framework_failure_
chcon $ctx c_d || framework_failure_
# Get the type of this known context for file and dir for tracing
old_type_f=$(get_selinux_type c)
old_type_d=$(get_selinux_type c_d)
# Setup copies for manipulation with restorecon
# and get the adjusted type for comparison
cp -a c Z1 || fail=1
cp -a c_d Z1_d || fail=1
if restorecon Z1 Z1_d 2>restorecon.err \
   && compare /dev/null restorecon.err; then
  new_type_f=$(get_selinux_type Z1)
  new_type_d=$(get_selinux_type Z1_d)

  # Ensure -Z sets the type like restorecon does
  cp -Z c Z2 || fail=1
  cpZ_type_f=$(get_selinux_type Z2)
  test "$cpZ_type_f" = "$new_type_f" || fail=1

  # Ensure -Z overrides -a and that dirs are handled too
  cp -aZ c Z3 || fail=1
  cp -aZ c_d Z3_d || fail=1
  cpaZ_type_f=$(get_selinux_type Z3)
  cpaZ_type_d=$(get_selinux_type Z3_d)
  test "$cpaZ_type_f" = "$new_type_f" || fail=1
  test "$cpaZ_type_d" = "$new_type_d" || fail=1

  # Ensure -Z sets the type for existing files
  mkdir -p existing/c_d || framework_failure_
  touch existing/c || framework_failure_
  cp -aZ c c_d existing || fail=1
  cpaZ_type_f=$(get_selinux_type existing/c)
  cpaZ_type_d=$(get_selinux_type existing/c_d)
  test "$cpaZ_type_f" = "$new_type_f" || fail=1
  test "$cpaZ_type_d" = "$new_type_d" || fail=1
fi

skip=0
# Create a file system, then mount it with the context=... option.
dd if=/dev/zero of=blob bs=8192 count=200    || skip=1
mkdir mnt                                    || skip=1
mkfs -t ext2 -F blob ||
  skip_ "failed to create an ext2 file system"

mount -oloop,context=$ctx blob mnt           || skip=1
test $skip = 1 \
  && skip_ "insufficient mount/ext2 support"

cd mnt                                       || framework_failure_

# Create files with hopefully different contexts
echo > ../f                                  || framework_failure_
echo > g                                     || framework_failure_
test "$(stat -c%C ../f)" = "$(stat -c%C g)" &&
  skip_ "files on separate file systems have the same security context"

# /bin/cp from coreutils-6.7-3.fc7 would fail this test by letting cp
# succeed (giving no diagnostics), yet leaving the destination file empty.
cp -a ../f g 2>err || fail=1
test -s g       || fail=1     # The destination file must not be empty.
compare /dev/null err || fail=1

# =====================================================
# Here, we expect cp to succeed and not warn with "Operation not supported"
rm -f g
echo > g
cp --preserve=all ../f g 2>err || fail=1
test -s g || fail=1
grep "Operation not supported" err && fail=1

# =====================================================
# The same as above except destination does not exist
rm -f g
cp --preserve=all ../f g 2>err || fail=1
test -s g || fail=1
grep "Operation not supported" err && fail=1

# An alternative to the following approach would be to run in a confined
# domain (maybe creating/loading it) that lacks the required permissions
# to the file type.
# Note: this test could also be run by a regular (non-root) user in an
# NFS mounted directory.  When doing that, I get this diagnostic:
# cp: failed to set the security context of 'g' to 'system_u:object_r:nfs_t': \
#   Operation not supported
cat <<\EOF > exp || framework_failure_
cp: failed to set the security context of
EOF

rm -f g
echo > g
# =====================================================
# Here, we expect cp to fail, because it cannot set the SELinux
# security context through NFS or a mount with fixed context.
cp --preserve=context ../f g 2> out && fail=1
# Here, we *do* expect the destination to be empty.
compare /dev/null g || fail=1
sed "s/ .g'.*//" out > k
mv k out
compare exp out || fail=1

rm -f g
echo > g
# Check if -a option doesn't silence --preserve=context option diagnostics
cp -a --preserve=context ../f g 2> out2 && fail=1
# Here, we *do* expect the destination to be empty.
compare /dev/null g || fail=1
sed "s/ .g'.*//" out2 > k
mv k out2
compare exp out2 || fail=1

for no_g_cmd in '' 'rm -f g'; do
  # restorecon equivalent.  Note even though the context
  # returned from matchpathcon() will not match $ctx
  # the resulting ENOTSUP warning will be suppressed.

   # With absolute path
  $no_g_cmd
  cp -Z ../f $(realpath g) || fail=1
   # With relative path
  $no_g_cmd
  cp -Z ../f g || fail=1
   # -Z overrides -a
  $no_g_cmd
  cp -Z -a ../f g || fail=1
   # -Z doesn't take an arg
  $no_g_cmd
  returns_ 1 cp -Z "$ctx" ../f g || fail=1

  # Explicit context
  $no_g_cmd
   # Explicitly defaulting to the global $ctx should work
  cp --context="$ctx" ../f g || fail=1
   # --context overrides -a
  $no_g_cmd
  cp -a --context="$ctx" ../f g || fail=1
done

# Mutually exclusive options
returns_ 1 cp -Z --preserve=context ../f g || fail=1
returns_ 1 cp --preserve=context -Z ../f g || fail=1
returns_ 1 cp --preserve=context --context="$ctx" ../f g || fail=1

Exit $fail
#!/bin/sh
# cp -RL dir1 dir2' must handle the case in which each of dir1 and dir2
# contain a symlink pointing to some third directory.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir a b c d || framework_failure_
ln -s ../c a || framework_failure_
ln -s ../c b || framework_failure_


# Before coreutils-5.94, the following would fail with this message:
# cp: will not create hard link 'd/b/c' to directory 'd/a/c'
cp -RL a b d || fail=1
test -d a/c || fail=1
test -d b/c || fail=1

Exit $fail
#!/bin/sh
# Test whether cp -i prompts in the right place.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir -p a b/a/c || framework_failure_
touch a/c || framework_failure_


# coreutils 6.2 cp would neglect to prompt in this case.
echo n | cp -iR a b 2>/dev/null || fail=1

# test miscellaneous combinations of -f -i -n parameters
touch c d || framework_failure_
echo "'c' -> 'd'" > out_copy
> out_empty

# ask for overwrite, answer no
echo n | cp -vi  c d 2>/dev/null > out1 || fail=1
compare out1 out_empty || fail=1

# ask for overwrite, answer yes
echo y | cp -vi  c d 2>/dev/null > out2 || fail=1
compare out2 out_copy  || fail=1

# -i wins over -n
echo y | cp -vni c d 2>/dev/null > out3 || fail=1
compare out3 out_copy  || fail=1

# -n wins over -i
echo y | cp -vin c d 2>/dev/null > out4 || fail=1
compare out4 out_empty || fail=1

# ask for overwrite, answer yes
echo y | cp -vfi c d 2>/dev/null > out5 || fail=1
compare out5 out_copy  || fail=1

# do not ask, prevent from overwrite
echo n | cp -vfn c d 2>/dev/null > out6 || fail=1
compare out6 out_empty || fail=1

# do not ask, prevent from overwrite
echo n | cp -vnf c d 2>/dev/null > out7 || fail=1
compare out7 out_empty || fail=1

# options --backup and --no-clobber are mutually exclusive
returns_ 1 cp -bn c d 2>/dev/null || fail=1

Exit $fail
#!/bin/sh
# Test basic --backup functionality for both cp and mv.

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

umask 022

# Be careful to close $actual before removing the containing directory.
# Use '1>&2' rather than '1<&-' since the latter appears not to work
# with /bin/sh from powerpc-ibm-aix4.2.0.0.

actual=actual
expected=expected

exec 3>&1 1> $actual

for prog in cp mv; do
  for initial_files in 'x' 'x y' 'x y y~' 'x y y.~1~' 'x y y~ y.~1~'; do
    for opt in none off  numbered t  existing nil  simple never; do
      touch $initial_files
        $prog --backup=$opt x y || fail=1
      echo $initial_files $opt: $(ls [xy]*); rm -f x y y~ y.~?~
    done
  done
done

cat <<\EOF > $expected-tmp
x none: x y
x off: x y
x numbered: x y
x t: x y
x existing: x y
x nil: x y
x simple: x y
x never: x y
x y none: x y
x y off: x y
x y numbered: x y y.~1~
x y t: x y y.~1~
x y existing: x y y~
x y nil: x y y~
x y simple: x y y~
x y never: x y y~
x y y~ none: x y y~
x y y~ off: x y y~
x y y~ numbered: x y y.~1~ y~
x y y~ t: x y y.~1~ y~
x y y~ existing: x y y~
x y y~ nil: x y y~
x y y~ simple: x y y~
x y y~ never: x y y~
x y y.~1~ none: x y y.~1~
x y y.~1~ off: x y y.~1~
x y y.~1~ numbered: x y y.~1~ y.~2~
x y y.~1~ t: x y y.~1~ y.~2~
x y y.~1~ existing: x y y.~1~ y.~2~
x y y.~1~ nil: x y y.~1~ y.~2~
x y y.~1~ simple: x y y.~1~ y~
x y y.~1~ never: x y y.~1~ y~
x y y~ y.~1~ none: x y y.~1~ y~
x y y~ y.~1~ off: x y y.~1~ y~
x y y~ y.~1~ numbered: x y y.~1~ y.~2~ y~
x y y~ y.~1~ t: x y y.~1~ y.~2~ y~
x y y~ y.~1~ existing: x y y.~1~ y.~2~ y~
x y y~ y.~1~ nil: x y y.~1~ y.~2~ y~
x y y~ y.~1~ simple: x y y.~1~ y~
x y y~ y.~1~ never: x y y.~1~ y~
EOF

sed 's/: x/:/' $expected-tmp |cat $expected-tmp - > $expected

exec 1>&3 3>&-

compare $expected $actual || fail=1

Exit $fail
#!/bin/sh
# Ensure that mv, cp -a and cp --preserve=xattr(all) options do work
# as expected on file systems without their support and do show correct
# diagnostics when required

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp mv

require_root_

cwd=$(pwd)
cleanup_() { cd /; umount "$cwd/noxattr"; umount "$cwd/xattr"; }

skip=0

# Mount an ext2 loopback file system at $WHERE with $OPTS
make_fs() {
  where="$1"
  opts="$2"

  fs="$where.bin"

  dd if=/dev/zero of="$fs" bs=8192 count=200 > /dev/null 2>&1 \
                                                 || skip=1
  mkdir "$where"                                 || skip=1
  mkfs -t ext2 -F "$fs" ||
    skip_ "failed to create ext2 file system"
  mount -oloop,$opts "$fs" "$where"              || skip=1
  echo test > "$where"/f                         || skip=1
  test -s "$where"/f                             || skip=1

  test $skip = 1 &&
    skip_ "insufficient mount/ext2 support"
}

make_fs noxattr nouser_xattr
make_fs xattr   user_xattr

# testing xattr name-value pair
xattr_name="user.foo"
xattr_value="bar"
xattr_pair="$xattr_name=\"$xattr_value\""

echo test > xattr/a || framework_failure_
getfattr -d xattr/a >out_a || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_a >/dev/null && framework_failure_
setfattr -n "$xattr_name" -v "$xattr_value" xattr/a >out_a \
  || skip_ "failed to set xattr of file"
getfattr -d xattr/a >out_a || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_a >/dev/null \
  || skip_ "failed to set xattr of file"


# This should pass without diagnostics
cp -a xattr/a noxattr/ 2>err || fail=1
test -s noxattr/a   || fail=1  # destination file must not be empty
compare /dev/null err || fail=1

rm -f err noxattr/a

# This should pass without diagnostics (new file)
cp --preserve=all xattr/a noxattr/ 2>err || fail=1
test -s noxattr/a   || fail=1  # destination file must not be empty
compare /dev/null err || fail=1

# This should pass without diagnostics (existing file)
cp --preserve=all xattr/a noxattr/ 2>err || fail=1
test -s noxattr/a   || fail=1  # destination file must not be empty
compare /dev/null err || fail=1

rm -f err noxattr/a

# This should fail with corresponding diagnostics
cp -a --preserve=xattr xattr/a noxattr/ 2>err && fail=1
if grep '^#define USE_XATTR 1' $CONFIG_HEADER > /dev/null; then
cat <<\EOF > exp
cp: setting attributes for 'noxattr/a': Operation not supported
EOF
else
cat <<\EOF > exp
cp: cannot preserve extended attributes, cp is built without xattr support
EOF
fi

compare exp err     || fail=1

rm -f err noxattr/a

# This should pass without diagnostics
mv xattr/a noxattr/ 2>err || fail=1
test -s noxattr/a         || fail=1  # destination file must not be empty
compare /dev/null err || fail=1

# This should pass and copy xattrs of the symlink
# since the xattrs used here are not in the 'user.' namespace.
# Up to and including coreutils-8.22 xattrs of symlinks
# were not copied across file systems.
ln -s 'foo' xattr/symlink || framework_failure_
# Note 'user.' namespace is only supported on regular files/dirs
# so use the 'trusted.' namespace here
txattr='trusted.overlay.whiteout'
if setfattr -hn "$txattr" -v y xattr/symlink; then
  # Note only root can read the 'trusted.' namespace
  if getfattr -h -m- -d xattr/symlink | grep -F "$txattr"; then
    mv xattr/symlink noxattr/ 2>err || fail=1
    if grep '^#define USE_XATTR 1' $CONFIG_HEADER > /dev/null; then
      getfattr -h -m- -d noxattr/symlink | grep -F "$txattr" || fail=1
    fi
    compare /dev/null err || fail=1
  else
    echo "failed to get '$txattr' xattr. skipping symlink check" >&2
  fi
else
  echo "failed to set '$txattr' xattr. skipping symlink check" >&2
fi

Exit $fail
#!/bin/sh
# cp -R --parents dir-specified-with-trailing-slash/ other-dir
# would get a failed assertion.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

working_umask_or_skip_

# Run the setgid check from the just-created directory.
skip_if_setgid_

mkdir foo bar || framework_failure_
mkdir -p a/b/c d e g || framework_failure_
ln -s d/a sym || framework_failure_
touch f || framework_failure_


# With 4.0.37 and earlier (back to when?), this would fail
# with the failed assertion from dirname.c.
cp -R --parents foo/ bar || fail=1

# Exercise the make_path and re_protect code in cp.c.
# FIXME: compare verbose output with expected output.
cp --verbose -a --parents a/b/c d > /dev/null 2>&1 || fail=1
test -d d/a/b/c || fail=1

# With 6.7 and earlier, cp --parents f/g d would mistakenly create a
# directory d/f, even though f is a regular file.
returns_ 1 cp --parents f/g d 2>/dev/null || fail=1
test -d d/f && fail=1

# Check that re_protect works.
chmod go=w d/a || framework_failure_
cp -a --parents d/a/b/c e || fail=1
cp -a --parents sym/b/c g || fail=1
p=$(ls -ld e/d|cut -b-10); case $p in drwxr-xr-x);; *) fail=1;; esac
p=$(ls -ld e/d/a|cut -b-10); case $p in drwx-w--w-);; *) fail=1;; esac
p=$(ls -ld g/sym|cut -b-10); case $p in drwx-w--w-);; *) fail=1;; esac
p=$(ls -ld e/d/a/b/c|cut -b-10); case $p in drwxr-xr-x);; *) fail=1;; esac
p=$(ls -ld g/sym/b/c|cut -b-10); case $p in drwxr-xr-x);; *) fail=1;; esac

Exit $fail
#!/bin/sh
# Demonstrate bug when using -d with an existing destination file
# that is a symlink.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

touch f slink-target || framework_failure_
ln -s slink-target slink || framework_failure_

cp -d f slink || fail=1

Exit $fail
#!/bin/sh
# verify that cp's --remove-destination option works with -R

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir d e || framework_failure_

# Do it once with no destination...
cp -R --remove-destination d e || fail=1

# ...and again, with an existing destination.
cp -R --remove-destination d e || fail=1

Exit $fail
#!/bin/sh
# Make sure that cp -R DIR1 DIR2 does the right thing
# when DIR1 is written with a trailing slash.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir dir1 dir2 || framework_failure_
touch dir1/file || framework_failure_

cp -R dir1/ dir2 || fail=1

# This file should not exist, but it did with fileutils-4.0w.
test -r dir2/file && fail=1

# These two should.
test -r dir2/dir1/file || fail=1
test -r dir1/file || fail=1

Exit $fail
#!/bin/sh
# A directory may not replace an existing file.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir dir || framework_failure_
touch file || framework_failure_


# In 4.0.35, this cp invocation silently succeeded.
returns_ 1 cp -R dir file 2>/dev/null || fail=1

# Make sure file is not replaced with a directory.
# In 4.0.35, it was.
test -f file || fail=1

Exit $fail
#!/bin/sh
# Make sure cp -p doesn't "restore" permissions it shouldn't (Bug#9170).

# Copyright 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

umask 002
mkdir -p -m ug-s,u=rwx,g=rwx,o=rx src/dir || fail=1
mkdir -p -m ug-s,u=rwx,g=,o= dst/dir || fail=1

cp -r src/. dst/ || fail=1

mode=$(stat --p=%A dst/dir)
test "$mode" = drwx------ || fail=1

Exit $fail
#!/bin/sh
# Make sure cp -p isn't too generous with existing file permissions.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

require_membership_in_two_groups_

# cp -p gives ENOTSUP on NFS on Linux 2.6.9 at least
require_local_dir_

require_no_default_acl_ .

set _ $groups; shift
g1=$1
g2=$2


umask 077
mkfifo_or_skip_ fifo

touch fifo-copy &&
chgrp $g1 fifo &&
chgrp $g2 fifo-copy &&
chmod g+r fifo-copy || framework-failure

# Terminate any background cp process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Copy a fifo's contents.  That way, we can examine the
# destination permissions before they're finalized.
cp -p --copy-contents fifo fifo-copy & pid=$!

(
  # Now 'cp' is reading the fifo.  Wait for the destination file to
  # be written to, encouraging things along by echoing to the fifo.
  while test ! -s fifo-copy; do
    echo foo
  done

  # Check the permissions of the destination.
  ls -l -n fifo-copy >ls.out &&

  # Close the fifo so that "cp" can continue.  But output first,
  # before exiting, otherwise some shells would optimize away the file
  # descriptor that holds the fifo open.
  echo foo
) >fifo || fail=1

# Check that the destination mode is safe while the file is being copied.
read mode links owner group etc <ls.out || fail=1
case $mode in
  -rw-------*) ;;

  # FIXME: Remove the following case; the file mode should always be
  # 600 while the data are being copied.  This will require changing
  # cp so that it also does not put $g1's data in a file that is
  # accessible to $g2.  This fix will not close a security hole, since
  # a $g2 process can maintain an open file descriptor to the
  # destination, but it's safer anyway.
  -rw-r-----*)
    # If the file has group $g1 and is group-readable, that is definitely bogus,
    # as neither the source nor the destination was readable to group $g1.
    test "$group" = "$g1" && fail=1;;

  *) fail=1;;
esac

wait $pid || fail=1

# Check that the final mode and group are right.
ls -l -n fifo-copy >ls.out &&
read mode links owner group etc <ls.out || fail=1
case $mode in
  -rw-------*) test "$group" = "$g1" || fail=1;;
  *) fail=1;;
esac

Exit $fail
#!/bin/sh

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp
skip_if_root_

chmod g-s . || framework_failure_
mkdir D D/D || framework_failure_
touch D/a || framework_failure_
chmod 0 D/a || framework_failure_
chmod u=rx,go=,-st D || framework_failure_


# This is expected to exit non-zero, because it can't read D/a.
returns_ 1 cp -pR D DD > /dev/null 2>&1 || fail=1

# Permissions on DD must be 'dr-x------'

mode=$(ls -ld DD|cut -b-10)
test "$mode" = dr-x------ || fail=1

chmod 0 D
ln -s D/D symlink
touch F
cat > exp <<\EOF
cp: failed to access 'symlink': Permission denied
EOF

cp F symlink 2> out && fail=1
# HPUX appears to fail with EACCES rather than EPERM.
# Transform their diagnostic
#   ...: The file access permissions do not allow the specified action.
# to the expected one:
sed 's/: The file access permissions.*/: Permission denied/'<out>o1;mv o1 out
compare exp out || fail=1

cp --target-directory=symlink F 2> out && fail=1
sed 's/: The file access permissions.*/: Permission denied/'<out>o1;mv o1 out
compare exp out || fail=1

chmod 700 D

Exit $fail
#!/bin/sh
# Exercise a few more corners of the fiemap-copying code.

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

# Require a fiemap-enabled FS.
touch fiemap_chk # check a file rather than current dir for best coverage
fiemap_capable_ fiemap_chk \
  || skip_ "this file system lacks FIEMAP support"

# Exercise the code that handles a file ending in a hole.
printf x > k || framework_failure_
dd bs=1k seek=128 of=k < /dev/null || framework_failure_

# The first time through the outer loop, the input file, K, ends with a hole.
# The second time through, we append a byte so that it does not.
for append in no yes; do
  test $append = yes && printf y >> k
  for i in always never; do
    cp --sparse=$i k k2 || fail=1
    cmp k k2 || fail=1
  done
done

# Ensure that --sparse=always can restore holes.
rm -f k
# Create a file starting with an "x", followed by 256K-1 0 bytes.
printf x > k || framework_failure_
dd bs=1k seek=1 of=k count=255 < /dev/zero || framework_failure_

# cp should detect the all-zero blocks and convert some of them to holes.
# How many it detects/converts currently depends on io_blksize.
# Currently, on my F14/ext4 desktop, this K starts off with size 256KiB,
# (note that the K in the preceding test starts off with size 4KiB).
# cp from coreutils-8.9 with --sparse=always reduces the size to 32KiB.
cp --sparse=always k k2 || fail=1
test $(stat -c %b k2) -lt $(stat -c %b k) || fail=1

Exit $fail
#!/bin/sh
# Trigger a free-memory read bug in cp from coreutils-[8.11..8.19]

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

require_valgrind_
require_perl_
: ${PERL=perl}

$PERL -e 'for (1..600) { sysseek (*STDOUT, 4096, 1)' \
  -e '&& syswrite (*STDOUT, "a" x 1024) or die "$!"}' > j || fail=1
valgrind --quiet --error-exitcode=3 cp j j2 || fail=1
cmp j j2 || fail=1

Exit $fail
#!/bin/sh
# Test cp handles extents correctly

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

require_sparse_support_

touch fiemap_chk || framework_failure_
fiemap_capable_ fiemap_chk ||
  skip_ 'this file system lacks FIEMAP support'
rm fiemap_chk

fallocate --help >/dev/null || skip_ 'The fallocate utility is required'
touch falloc.test || framework_failure_
fallocate -l 1 -o 1 -n falloc.test ||
  skip_ 'this file system lacks FALLOCATE support'
rm falloc.test

# We don't currently handle unwritten extents specially
if false; then
# Require more space than we'll actually use, so that
# tests run in parallel do not run out of space.
# Otherwise, with inadequate space, simply running the following
# fallocate command would induce a temporary disk-full condition,
# which would cause failure of unrelated tests run in parallel.
require_file_system_bytes_free_ 800000000

fallocate -l 1MiB num.test ||
  skip_ "this fallocate doesn't support numbers with IEX suffixes"

fallocate -l 600MiB space.test ||
  skip_ 'this test needs at least 600MiB free space'

# Disable this test on old BTRFS (e.g. Fedora 14)
# which reports ordinary extents for unwritten ones.
filefrag space.test || skip_ 'the 'filefrag' utility is missing'
filefrag -v space.test | grep -F 'unwritten' > /dev/null ||
  skip_ 'this file system does not report empty extents as "unwritten"'

rm space.test

# Ensure we read a large empty file quickly
fallocate -l 300MiB empty.big || framework_failure_
timeout 3 cp --sparse=always empty.big cp.test || fail=1
test $(stat -c %s empty.big) = $(stat -c %s cp.test) || fail=1
rm empty.big cp.test
fi

# Ensure we handle extents beyond file size correctly.
# Note until we support fallocate, we will not maintain
# the file allocation.  FIXME: amend this test if fallocate is supported.
# Note currently this only uses fiemap logic when the allocation (-l)
# is smaller than the size, thus identifying the file as sparse.
# Note the '-l 1' case is an effective noop, and just checks
# a file with a trailing hole is copied correctly.
for sparse_mode in always auto never; do
  for alloc in '-l 4194304' '-l 1048576 -o 4194304' '-l 1'; do
    dd count=10 if=/dev/urandom iflag=fullblock of=unwritten.withdata
    truncate -s 2MiB unwritten.withdata || framework_failure_
    fallocate $alloc -n unwritten.withdata || framework_failure_
    cp --sparse=$sparse_mode unwritten.withdata cp.test || fail=1
    test $(stat -c %s unwritten.withdata) = $(stat -c %s cp.test) || fail=1
    cmp unwritten.withdata cp.test || fail=1
    rm unwritten.withdata cp.test || framework_failure_
  done
done

Exit $fail
#!/bin/sh
# ensure that a sparse file is copied efficiently, by default

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

# Require a fiemap-enabled FS.
touch fiemap_chk
fiemap_capable_ fiemap_chk ||
  skip_ "this file system lacks FIEMAP support"

# Exclude ext[23] (or unknown fs types)
# as the emulated extent scanning can be slow
df -t ext2 -t ext3 . >/dev/null &&
  skip_ "ext[23] can have slow FIEMAP scanning"

# Create a large-but-sparse file.
timeout 10 truncate -s1T f ||
  skip_ "unable to create a 1 TiB sparse file"

# Disable this test on old BTRFS (e.g. Fedora 14)
# which reports (unwritten) extents for holes.
filefrag f || skip_ "the 'filefrag' utility is missing"
filefrag f | grep -F ': 0 extents found' > /dev/null ||
  skip_ 'this file system reports extents for holes'

# Nothing can read (much less write) that many bytes in so little time.
timeout 10 cp f f2 || fail=1

# Ensure that the sparse file copied through fiemap has the same size
# in bytes as the original.
test "$(stat --printf %s f)" = "$(stat --printf %s f2)" || fail=1

Exit $fail
#!/bin/sh
# Make sure cp -p isn't too generous with file permissions.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

# cp -p gives ENOTSUP on NFS on Linux 2.6.9 at least
require_local_dir_

umask 022
mkfifo_or_skip_ fifo

# Terminate any background cp process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Copy a fifo's contents.  That way, we can examine the
# destination permissions before they're finalized.
cp -p --copy-contents fifo fifo-copy & pid=$!

(
  # Now 'cp' is reading the fifo.  Wait for the destination file to
  # be created, encouraging things along by echoing to the fifo.
  while test ! -f fifo-copy; do
    echo foo
  done

  # Check the permissions of the destination.
  ls -l fifo-copy >ls.out

  # Close the fifo so that "cp" can continue.  But output first,
  # before exiting, otherwise some shells would optimize away the file
  # descriptor that holds the fifo open.
  echo foo
) >fifo

case $(cat ls.out) in
-???------*) ;;
*) fail=1;;
esac

wait $pid || fail=1

Exit $fail
#!/bin/sh
# Confirm that copying a directory into itself gets a proper diagnostic.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# In 4.0.35 and earlier, 'mkdir dir && cp -R dir dir' would produce this:
#   cp: won't create hard link 'dir/dir/dir' to directory ''
# Now it gives this:
#   cp: can't copy a directory 'dir' into itself 'dir/dir'

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir a dir || framework_failure_


# This command should exit nonzero.
cp -R dir dir 2> out && fail=1
echo 1 >> out

# This should, too.  However, with coreutils-7.1 it would infloop.
cp -rl dir dir 2>> out && fail=1
echo 2 >> out

cp -rl a dir dir 2>> out && fail=1
echo 3 >> out
cp -rl a dir dir 2>> out && fail=1
echo 4 >> out

cat > exp <<\EOF
cp: cannot copy a directory, 'dir', into itself, 'dir/dir'
1
cp: cannot copy a directory, 'dir', into itself, 'dir/dir'
2
cp: cannot copy a directory, 'dir', into itself, 'dir/dir'
3
cp: cannot copy a directory, 'dir', into itself, 'dir/dir'
4
EOF
#'

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Exercise cp --link's behavior regarding the dereferencing of symbolic links.

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

if { grep '^#define HAVE_LINKAT 1' "$CONFIG_HEADER" > /dev/null \
     && grep '#undef LINKAT_SYMLINK_NOTSUP' "$CONFIG_HEADER" > /dev/null; } \
   || grep '^#define LINK_FOLLOWS_SYMLINKS 0' "$CONFIG_HEADER" > /dev/null; then
  # With this config cp will attempt to linkat() to hardlink a symlink.
  # So now double check the current file system supports this operation.
  ln -s testtarget test_sl || framework_failure_
  ln -P test_sl test_hl_sl || framework_failure_
  ino_sl="$(stat -c '%i' test_sl)" || framework_failure_
  ino_hl="$(stat -c '%i' test_hl_sl)" || framework_failure_
  test "$ino_sl" = "$ino_hl" && can_hardlink_to_symlink=1
fi

mkdir dir              || framework_failure_
> file                 || framework_failure_
ln -s dir     dirlink  || framework_failure_
ln -s file    filelink || framework_failure_
ln -s nowhere danglink || framework_failure_

# printf format of the output line.
outformat='%s|result=%s|inode=%s|type=%s|error=%s\n'

for src in dirlink filelink danglink; do
  # Get symlink's target.
  tgt=$(readlink $src) || framework_failure_
  # Get inodes and file type of the symlink (src) and its target (tgt).
  # Note: this will fail for 'danglink'; catch it.
  ino_src="$(stat -c '%i' $src)" || framework_failure_
  typ_src="$(stat -c '%F' $src)" || framework_failure_
  ino_tgt="$(stat -c '%i' $tgt 2>/dev/null)" || ino_tgt=
  typ_tgt="$(stat -c '%F' $tgt 2>/dev/null)" || typ_tgt=

  for o in '' -L -H -P; do

    # Skip the -P case where we don't or can't hardlink symlinks
    ! test "$can_hardlink_to_symlink" && test "$o" = '-P' && continue

    for r in '' -R; do

      command="cp --link $o $r $src dst"
      $command 2> err
      result=$?

      # Get inode and file type of the destination (which may fail, too).
      ino_dst="$(stat -c '%i' dst 2>/dev/null)" || ini_dst=
      typ_dst="$(stat -c '%F' dst 2>/dev/null)" || typ_dst=

      # Print the actual result in a certain format.
      printf "$outformat" \
        "$command"   \
        "$result"   \
        "$ino_dst"  \
        "$typ_dst"  \
        "$(cat err)"  \
        > out

      # What was expected?
      if [ "$o" = "-P" ]; then
        # cp --link should not dereference if -P is given.
        exp_result=0
        exp_inode=$ino_src
        exp_ftype=$typ_src
        exp_error=
      elif [ "$src" = 'danglink' ]; then
        # Dereferencing should fail for the 'danglink'.
        exp_result=1
        exp_inode=
        exp_ftype=
        exp_error="cp: cannot stat 'danglink': No such file or directory"
      elif [ "$src" = 'dirlink' ] && [ "$r" != '-R' ]; then
        # Dereferencing should fail for the 'dirlink' without -R.
        exp_result=1
        exp_inode=
        exp_ftype=
        exp_error="cp: omitting directory 'dirlink'"
      elif [ "$src" = 'dirlink' ]; then
        # cp --link -R 'dirlink' should create a new directory.
        exp_result=0
        exp_inode=$ino_dst
        exp_ftype=$typ_dst
        exp_error=
      else
        # cp --link 'filelink' should create a hard link to the target.
        exp_result=0
        exp_inode=$ino_tgt
        exp_ftype=$typ_tgt
        exp_error=
      fi

      # Print the expected result in a certain format.
      printf "$outformat" \
        "$command"   \
        "$exp_result" \
        "$exp_inode"  \
        "$exp_ftype"  \
        "$exp_error"  \
        > exp

      compare exp out || { ls -lid $src $tgt dst; fail=1; }

      rm -rf dst err exp out || framework_failure_
    done
  done
done

Exit $fail
#!/bin/sh
# ensure that cp --preserve=link --link doesn't waste heap

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp
expensive_

# Determine basic amount of memory needed for 'cp -al'.
touch f || framework_failure_
vm=$(get_min_ulimit_v_ cp -al f f2) \
  || skip_ "this shell lacks ulimit support"
rm f f2 || framework_failure_

a=$(printf %031d 0)
b=$(printf %031d 1)
(mkdir $a \
   && cd $a \
   && seq --format=%031g 10000 |xargs touch \
   && seq --format=d%030g 10000 |xargs mkdir ) || framework_failure_
cp -al $a $b || framework_failure_
mkdir e || framework_failure_
mv $a $b e || framework_failure_

# Allow cp(1) to use 4MiB more virtual memory than for the above trivial case.
(ulimit -v $(($vm+4000)) && cp -al e f) || fail=1

Exit $fail
#!/bin/sh
# Ensure that cp --link --no-dereference works properly

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

ln -s no-such-file dangling-slink || framework_failure_


# Prior to coreutils-6.0, this would fail on non-Linux kernels,
# with link being applied to the dangling symlink.
cp --link --no-dereference dangling-slink d2 || fail=1

Exit $fail
#!/bin/sh
# ensure that 'cp -d' preserves hard-links between command line arguments
# ensure that --preserve=links works with -RH and -RL

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

touch a || framework_failure_
ln a b || framework_failure_
mkdir c || framework_failure_
cp -d a b c || framework_failure_
test -f c/a || framework_failure_
test -f c/b || framework_failure_


a_inode=$(ls -i c/a|sed 's,c/.*,,')
b_inode=$(ls -i c/b|sed 's,c/.*,,')
test "$a_inode" = "$b_inode" || fail=1
# --------------------------------------

rm -rf a b c
touch a
ln -s a b
mkdir c
cp --preserve=links -R -H a b c || fail=1
a_inode=$(ls -i c/a|sed 's,c/.*,,')
b_inode=$(ls -i c/b|sed 's,c/.*,,')
test "$a_inode" = "$b_inode" || fail=1
# --------------------------------------

# Ensure that -L makes cp follow the b->a symlink
# and translates to hard-linked a and b in the destination dir.
rm -rf a b c d; mkdir d; (cd d; touch a; ln -s a b)
cp --preserve=links -R -L d c || fail=1
a_inode=$(ls -i c/a|sed 's,c/.*,,')
b_inode=$(ls -i c/b|sed 's,c/.*,,')
test "$a_inode" = "$b_inode" || fail=1
# --------------------------------------

# Same as above, but starting with a/b hard linked.
rm -rf a b c d; mkdir d; (cd d; touch a; ln a b)
cp --preserve=links -R -L d c || fail=1
a_inode=$(ls -i c/a|sed 's,c/.*,,')
b_inode=$(ls -i c/b|sed 's,c/.*,,')
test "$a_inode" = "$b_inode" || fail=1
# --------------------------------------

# Ensure that --no-preserve=links works.
rm -rf a b c d; mkdir d; (cd d; touch a; ln a b)
cp -dR --no-preserve=links d c || fail=1
a_inode=$(ls -i c/a|sed 's,c/.*,,')
b_inode=$(ls -i c/b|sed 's,c/.*,,')
test "$a_inode" = "$b_inode" && fail=1
# --------------------------------------

# Ensure that -d still preserves hard links.
rm -rf a b c d
touch a; ln a b
mkdir c
cp -d a b c || fail=1
a_inode=$(ls -i c/a|sed 's,c/.*,,')
b_inode=$(ls -i c/b|sed 's,c/.*,,')
test "$a_inode" = "$b_inode" || fail=1
# --------------------------------------

# Ensure that --no-preserve=mode works
rm -rf a b c d
touch a; chmod 731 a
umask 077
cp -a --no-preserve=mode a b || fail=1
mode=$(ls -l b|cut -b-10)
test "$mode" = "-rw-------" || fail=1
umask 022
# --------------------------------------

Exit $fail
#!/bin/sh
# Ensure that cp -a --link maintains timestamps if possible

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

# Check that the timestamps of the symlink are copied
# if we're using hardlink to symlink emulation.
touch file
ln -s file link || framework_failure_
touch -m -h -d 2011-01-01 link ||
  skip_ "Your system doesn't support updating symlink timestamps"
case $(stat --format=%y link) in
  2011-01-01*) ;;
  *) skip_ "Your system doesn't support updating symlink timestamps" ;;
esac

# link.cp is probably a hardlink, but may also be a symlink
# In either case the timestamp should match the original.
cp -al link link.cp || fail=1
case $(stat --format=%y link.cp) in
  2011-01-01*) ;;
  *) fail=1 ;;
esac

Exit $fail
#!/bin/sh
# Make sure cp --link -f works when the target exists.
# This failed for 4.0z (due to a bug introduced in that test release).

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

touch src || framework_failure_
touch dest || framework_failure_
touch dest2 || framework_failure_


cp -f --link src dest || fail=1
cp -f --symbolic-link src dest2 || fail=1

Exit $fail
#!/bin/sh
# Running cp S D on an NFS client while another client has just removed D
# would lead (w/coreutils-8.16 and earlier) to cp's initial stat call
# seeing (via stale NFS cache) that D exists, so that cp would then call
# open without the O_CREAT flag.  Yet, the open must actually consult
# the server, which confesses that D has been deleted, thus causing the
# open call to fail with ENOENT.
#
# This test simulates that situation by intercepting stat for a nonexistent
# destination, D, and making the stat fill in the result struct for another
# file and return 0.
#
# This test is skipped on systems that lack LD_PRELOAD support; that's fine.
# Similarly, on a system that lacks <dlfcn.h> or __xstat, skipping it is fine.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp
require_gcc_shared_

# Replace each stat call with a call to this wrapper.
cat > k.c <<'EOF' || framework_failure_
#define _GNU_SOURCE
#include <stdio.h>
#include <sys/types.h>
#include <dlfcn.h>

#define __xstat __xstat_orig

#include <sys/stat.h>
#include <stddef.h>

#undef __xstat

int
__xstat (int ver, const char *path, struct stat *st)
{
  static int (*real_stat)(int ver, const char *path, struct stat *st) = NULL;
  fclose(fopen("preloaded", "w"));
  if (!real_stat)
    real_stat = dlsym (RTLD_NEXT, "__xstat");
  /* When asked to stat nonexistent "d",
     return results suggesting it exists. */
  return real_stat (ver, *path == 'd' && path[1] == 0 ? "d2" : path, st);
}
EOF

# Then compile/link it:
gcc_shared_ k.c k.so \
  || framework_failure_ 'failed to build shared library'

touch d2 || framework_failure_
echo xyz > src || framework_failure_

# Finally, run the test:
LD_PRELOAD=$LD_PRELOAD:./k.so cp src d || fail=1

test -f preloaded || skip_ 'LD_PRELOAD was ineffective?'

compare src d || fail=1
Exit $fail
#!/bin/sh
# Ensure we handle file systems returning no SELinux context,
# which triggered a segmentation fault in coreutils-8.22.
# This test is skipped on systems that lack LD_PRELOAD support; that's fine.
# Similarly, on a system that lacks lgetfilecon altogether, skipping it is fine.

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp
require_gcc_shared_
require_selinux_

# Replace each getfilecon and lgetfilecon call with a call to these stubs.
cat > k.c <<'EOF' || framework_failure_
#include <stdio.h>
#include <selinux/selinux.h>
#include <errno.h>

int getfilecon (const char *path, char **con)
{
  /* Leave a marker so we can identify if the function was intercepted.  */
  fclose(fopen("preloaded", "w"));

  errno=ENODATA;
  return -1;
}

int lgetfilecon (const char *path, char **con)
{ return getfilecon (path, con); }
EOF

# Then compile/link it:
gcc_shared_ k.c k.so \
  || skip_ 'failed to build SELinux shared library'

touch file_src

# New file with SELinux context optionally included
LD_PRELOAD=$LD_PRELOAD:./k.so cp -a file_src file_dst || fail=1

# Existing file with SELinux context optionally included
LD_PRELOAD=$LD_PRELOAD:./k.so cp -a file_src file_dst || fail=1

# ENODATA should give an immediate error when required to preserve ctx
# This is debatable, and maybe we should not fail when no context available?
( export LD_PRELOAD=$LD_PRELOAD:./k.so
  returns_ 1 cp --preserve=context file_src file_dst ) || fail=1

test -e preloaded || skip_ 'LD_PRELOAD interception failed'

Exit $fail
#!/bin/sh
# cp from 3.16 fails this test

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir a b
msg=bar
echo $msg > a/foo
cd b
ln -s ../a/foo .
cd ..


# It should fail with a message something like this:
#   ./cp: 'a/foo' and 'b/foo' are the same file
cp -d a/foo b 2>/dev/null

# Fail this test if the exit status is not 1
test $? = 1 || fail=1

test "$(cat a/foo)" = $msg || fail=1

Exit $fail
#!/bin/sh
# cp from 3.16 fails this test

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir b
msg=bar
echo $msg > a
cd b
ln -s ../a .
cd ..


# It should fail with a message something like this:
#   cp: 'a' and 'b/foo' are the same file
cp -d a b 2>/dev/null

# Fail this test if the exit status is not 1
test $? = 1 || fail=1

test "$(cat a)" = $msg || fail=1

Exit $fail
#!/bin/sh
# cp from 3.16 fails this test

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

msg=bar
echo $msg > a
ln -s a b


# It should fail with a message something like this:
#   cp: 'a' and 'b' are the same file
cp -d a b 2>/dev/null

# Fail this test if the exit status is not 1
test $? = 1 || fail=1

test "$(cat a)" = $msg || fail=1

Exit $fail
#!/bin/sh
# Make sure cp -pR --parents isn't too generous with parent permissions.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

# cp -p gives ENOTSUP on NFS on Linux 2.6.9 at least
require_local_dir_

umask 002
mkdir mode ownership d || framework_failure_
chmod g+s d 2>/dev/null # The cp test is valid either way.

# Terminate any background cp process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

for attr in mode ownership
do
  mkfifo_or_skip_ $attr/fifo

  # Copy a fifo's contents.  That way, we can examine d/$attr's
  # state while cp is running.
  cp --preserve=$attr -R --copy-contents --parents $attr d & pid=$!

  (
    # Now 'cp' is reading the fifo.
    # Check the permissions of the temporary destination
    # directory that 'cp' has made.
    ls -ld d/$attr >d/$attr.ls

    # Close the fifo so that "cp" can continue.  But output first,
    # before exiting, otherwise some shells would optimize away the file
    # descriptor that holds the fifo open.
    echo foo
  ) >$attr/fifo

  ls_output=$(cat d/$attr.ls) || fail=1
  case $attr,$ls_output in
  ownership,d???--[-S]--[-S]* | \
  mode,d????-??-?* | \
  mode,d??[-x]?w[-x]?-[-x]* )
    ;;
  *)
    fail=1;;
  esac

  wait $pid || fail=1
done

Exit $fail
#!/bin/sh
# Ensure that cp --parents works properly with a preexisting dest. directory

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

working_umask_or_skip_
# cp -p gives ENOTSUP on NFS on Linux 2.6.9 at least
require_local_dir_

mkdir -p a/b/c a/b/d e || framework_failure_
touch a/b/c/foo a/b/d/foo || framework_failure_
cp -p --parent a/b/c/foo e || framework_failure_

# Make permissions of e/a different, so that we exercise the
# code in cp -p --parents that propagates permissions even
# to a destination directory that it doesn't create.
chmod g-rx e/a e/a/b || framework_failure_

cp -p --parent a/b/d/foo e || fail=1

# Ensure that permissions on just-created directory, e/a/,
# are the same as those on original, a/.

# The sed filter maps any 's' from an inherited set-GID bit
# to the usual 'x'.  Otherwise, under unusual circumstances, this
# test would fail with e.g., drwxr-sr-x != drwxr-xr-x .
# For reference, the unusual circumstances is: build dir is set-gid,
# so "a/" inherits that.  However, when the user does not belong to
# the group of the build directory, chmod ("a/e", 02755) returns 0,
# yet fails to set the S_ISGID bit.
for dir in a a/b a/b/d; do
  test $(stat --printf %A $dir|sed s/s/x/g) \
     = $(stat --printf %A e/$dir|sed s/s/x/g) ||
  fail=1
done

Exit $fail
#!/bin/sh
# Make sure the permission-preserving code in copy.c (mv, cp, install) works.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp mv

very_expensive_

umask 037


# Now, try it with 'mv', with combinations of --force, no-f and
# existing-destination and not.
for u in 31 37 2; do
  echo umask: $u
  umask $u
  for cmd in mv 'cp -p' cp; do
    for force in '' -f; do
      for existing_dest in yes no; do
        for g_perm in r w x rw wx xr rwx; do
          for o_perm in r w x rw wx xr rwx; do
            touch src || exit 1
            chmod u=r,g=rx,o= src || exit 1
            expected_perms=$(stat --format=%A src)
            rm -f dest
            test $existing_dest = yes && {
              touch dest || exit 1
              chmod u=rw,g=$g_perm,o=$o_perm dest || exit 1
              }
            $cmd $force src dest || exit 1
            test "$cmd" = mv && test -f src && exit 1
            test "$cmd" = cp && { test -f src || exit 1; }
            actual_perms=$(stat --format=%A dest)

            case "$cmd:$force:$existing_dest" in
              cp:*:yes)
                _g_perm=$(echo rwx|sed 's/[^'$g_perm']/-/g')
                _o_perm=$(echo rwx|sed 's/[^'$o_perm']/-/g')
                expected_perms=-rw-$_g_perm$_o_perm
                ;;
              cp:*:no)
                test $u = 37 &&
                  expected_perms=$(
                    echo $expected_perms | sed 's/.....$/-----/'
                  )
                test $u = 31 &&
                  expected_perms=$(
                    echo $expected_perms | sed 's/..\(..\).$/--\1-/'
                  )
                ;;
            esac
            test _$actual_perms = _$expected_perms || exit 1
            # Perform only one iteration when there's no existing destination.
            test $existing_dest = no && break 3
          done
        done
      done
    done
  done
done

Exit $fail
#!/bin/sh
# ensure that cp's --preserve=X,Y option is parsed properly

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

# cp -p gives ENOTSUP on NFS on Linux 2.6.9 at least
require_local_dir_

touch f || framework_failure_

cp --preserve=mode,links f g || fail=1

Exit $fail
#!/bin/sh
# Verify that cp -p preserves GID when it is possible.

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

require_root_

# Some of the tests expect a umask that grants group and/or world read access.
working_umask_or_skip_

# Record primary group number, usually 0.
# This is the group ID used when cp (without -p) creates a new file.
primary_group_num=$(id -g)

create() {
  echo "$1" > "$1" || exit 1
  chown "+$2:+$3" "$1" || exit 1
}

t0() {
  f=$1; shift
  u=$1; shift
  g=$1; shift
  rm -f b || exit 1
  "$@" "$f" b || exit 1
  s=$(stat -c '%u %g' b)
  if test "x$s" != "x$u $g"; then
    # Allow the actual group to match that of the parent directory
    # (it was set to 0 above).
    if test "x$s" = "x$u $primary_group_num"; then
      :
    else
      echo "$0: $* $f b: $u $g != $s" 1>&2
      Exit 1
    fi
  fi
}

nameless_uid=$($PERL -le '
  foreach my $i (1000..16*1024-1)
    {
      getpwuid $i or (print $i), exit
    }
')
nameless_gid1=$($PERL -le '
  foreach my $i (1000..16*1024)
    {
      getgrgid $i or (print $i), exit
    }
')
nameless_gid2=$($PERL -le '
  foreach my $i ('"$nameless_gid1"'+1..16*1024)
    {
      getgrgid $i or (print $i), exit
    }
')

if test -z "$nameless_uid" \
    || test -z "$nameless_gid1" \
    || test -z "$nameless_gid2"; then
  skip_ "couldn't find a nameless UID or GID"
fi

chown "+$nameless_uid:+0" .

create a0 0 0
create b0 "$nameless_uid" "$nameless_gid1"
create b1 "$nameless_uid" "$nameless_gid2"
create c0 0 "$nameless_gid1"
create c1 0 "$nameless_gid2"

t0 a0 0 0 cp
t0 b0 0 0 cp
t0 b1 0 0 cp
t0 c0 0 0 cp
t0 c1 0 0 cp

t0 a0 0 0 cp -p
t0 b0 "$nameless_uid" "$nameless_gid1" cp -p
t0 b1 "$nameless_uid" "$nameless_gid2" cp -p
t0 c0 0 "$nameless_gid1" cp -p
t0 c1 0 "$nameless_gid2" cp -p

# For the remaining tests, we need a cp binary that is accessible to a user
# with UID of $nameless_uid.  The build directory may not be accessible,
# so create a temporary directory and copy cp into it, ensure that
# $nameless_uid can access it and then make that directory the search path.
tmp_path=
cleanup_() { rm -rf "$tmp_path"; }

# Cause mktemp to create a directory directly under /tmp.
# Setting TMPDIR explicitly is required here, in case $TMPDIR
# is not readable by our nameless IDs.
test -d /tmp && TMPDIR=/tmp
tmp_path=$(mktemp -d) || fail_ "failed to create temporary directory"
cp "$abs_path_dir_/cp" "$tmp_path"
chmod -R a+rx "$tmp_path"

t1() {
  f=$1; shift
  u=$1; shift
  g=$1; shift
  t0 "$f" "$u" "$g" \
      chroot --skip-chdir \
             --user=+$nameless_uid:+$nameless_gid1 \
             --groups="+$nameless_gid1,+$nameless_gid2" \
        / env PATH="$tmp_path" "$@"
}

t1 a0 "$nameless_uid" "$nameless_gid1" cp
t1 b0 "$nameless_uid" "$nameless_gid1" cp
t1 b1 "$nameless_uid" "$nameless_gid1" cp
t1 c0 "$nameless_uid" "$nameless_gid1" cp
t1 c1 "$nameless_uid" "$nameless_gid1" cp

t1 a0 "$nameless_uid" "$nameless_gid1" cp -p
t1 b0 "$nameless_uid" "$nameless_gid1" cp -p
t1 b1 "$nameless_uid" "$nameless_gid2" cp -p
t1 c0 "$nameless_uid" "$nameless_gid1" cp -p
t1 c1 "$nameless_uid" "$nameless_gid2" cp -p

Exit $fail
#!/bin/sh
# Exercise the fix for http://debbugs.gnu.org/8419

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

same_inode()
{
  local u v
  u=$(stat --format %i "$1") &&
    v=$(stat --format %i "$2") && test "$u" = "$v"
}

create_source_tree()
{
  rm -Rf s
  mkdir s || framework_failure_

  # a missing link in dest will be created
  touch s/f || framework_failure_
  ln s/f s/linkm || framework_failure_

  # an existing link in dest will be maintained
  ln s/f s/linke || framework_failure_

  # a separate older file in dest will be overwritten
  ln s/f s/fileo || framework_failure_

  # a separate newer file in dest will be overwritten!
  ln s/f s/fileu || framework_failure_
}

create_target_tree()
{
  f=$1 # which of f or linkm to create in t/

  rm -Rf t
  mkdir -p t/s/ || framework_failure_

  # a missing link in dest must be created
  touch t/s/$f || framework_failure_

  # an existing link must be maintained
  ln t/s/$f t/s/linke || framework_failure_

  # a separate older file in dest will be overwritten
  touch -d '-1 hour' t/s/fileo || framework_failure_

  # a separate newer file in dest will be overwritten!
  touch -d '+1 hour' t/s/fileu || framework_failure_
}


# Note we repeat this, creating either one of
# two hard linked files from source in the dest, so as to
# test both paths in $(cp) for creating the hard links.
# The path taken by cp is dependent on which cp encounters
# first in the source, which is non deterministic currently
# (I'm guessing that results are sorted by inode and
# beauses they're the same here, and due to the sort
# being unstable, either can be processed first).
create_source_tree

for f in f linkm; do
  create_target_tree $f

  # Copy all the hard links across.  With cp from coreutils-8.12
  # and prior, it would sometimes mistakenly copy rather than link.
  cp -au s t || fail=1

  same_inode t/s/f t/s/linkm || fail=1
  same_inode t/s/f t/s/linke || fail=1
  same_inode t/s/f t/s/fileo || fail=1
  same_inode t/s/f t/s/fileu || fail=1
done

Exit $fail
#!/bin/sh
# ensure that cp's --no-preserve=mode works correctly

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

rm -f a b c
umask 0022
touch a
touch b
chmod 600 b

#regular file test
cp --no-preserve=mode b c || fail=1
mode_a=$(ls -l a | gawk '{print $1}')
mode_c=$(ls -l c | gawk '{print $1}')
test "$mode_a" = "$mode_c" || fail=1

rm -rf d1 d2 d3
mkdir d1 d2
chmod 705 d2

#directory test
cp --no-preserve=mode -r d2 d3 || fail=1
mode_d1=$(ls -l d1 | gawk '{print $1}')
mode_d3=$(ls -l d3 | gawk '{print $1}')
test "$mode_d1" = "$mode_d3" || fail=1

rm -f a b c
touch a
chmod 600 a

#contradicting options test
cp --no-preserve=mode --preserve=all a b || fail=1
mode_a=$(ls -l a | gawk '{print $1}')
mode_b=$(ls -l b | gawk '{print $1}')
test "$mode_a" = "$mode_b" || fail=1

Exit $fail
#!/bin/sh
# Verify that cp -Pp preserves times even on symlinks.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

grep '^#define HAVE_UTIMENSAT 1' "$CONFIG_HEADER" > /dev/null ||
grep '^#define HAVE_LUTIMES 1' "$CONFIG_HEADER" > /dev/null ||
  skip_ 'this system lacks the utimensat function'

ln -s no-such dangle || framework_failure_

# If the current file system lacks sub-second resolution, sleep for 2s to
# ensure that the times on the copy are different from those of the original.
case $(stat --format=%y dangle) in
  ??:??:??.000000000) sleep 2;;
esac

copy_timestamp_() {
  sleep $1
  rm -f d2
  cp -Pp dangle d2 || framework_failure_
  # Can't use --format=%x, as lstat() modifies atime on some platforms.
  stat --format=%y dangle > t1 || framework_failure_
  stat --format=%y d2 > t2 || framework_failure_
  compare t1 t2
}

# We retry with a delay at least 1.5s because on GPFS
# it was seen that the timestamp wasn't updated unless there
# was sufficient delay between the ln and cp.
# I.e., if there wasn't sufficient difference in
# the timestamp being updated, the update was discarded.
retry_delay_ copy_timestamp_ .1 4 || fail=1

Exit $fail
#!/bin/sh
# exercise cp's short-read failure when operating on >4KB files in /proc

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

kall=/proc/kallsyms

test -r $kall || skip_ "your system lacks $kall"

# Before coreutils-7.3, cp would copy less than 4KiB of this 1MB+ file.
cp $kall 1    || fail=1
cat $kall > 2 || fail=1
compare 1 2   || fail=1

# Also check md5sum, just for good measure.
md5sum $kall > 3 || fail=1
md5sum 2     > 4 || fail=1

# Remove each file name before comparing checksums.
sed 's/ .*//' 3 > sum.proc || fail=1
sed 's/ .*//' 4 > sum.2    || fail=1
compare sum.proc sum.2 || fail=1

Exit $fail
#!/bin/sh
# Ensure that cp copies contents of non-empty "regular" file with st_size==0

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

touch empty || framework_failure_

f=/proc/cpuinfo
test -r $f || f=empty

cat $f > out || fail=1

# With coreutils-6.9, this would create a zero-length "exp" file.
# Skip this test on architectures like aarch64 where the inode
# number of the file changed during the cp run.
cp $f exp 2>err \
  || { fail=1;
       grep 'replaced while being copied' err \
         && skip_ "File $f is being replaced while being copied"; }

# Don't simply compare contents; they might differ,
# e.g., if CPU freq changes between cat and cp invocations.
# Instead, simply compare whether they're both nonempty.
test -s out \
  && { rm -f out; echo nonempty > out; }
test -s exp \
  && { rm -f exp; echo nonempty > exp; }

compare exp out || fail=1

Exit $fail
#!/bin/sh
# cp -r should not create symlinks.  Fixed in fileutils-4.1.5.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Restored old behavior (whereby cp -r preserves symlinks) in 4.1.6,
# though now such usage evokes a warning:
# cp: 'slink': WARNING: using -r to copy symbolic links is not portable

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

echo abc > foo || framework_failure_
ln -s foo slink || framework_failure_
ln -s no-such-file no-file || framework_failure_


# This would fail in 4.1.5, not in 4.1.6.
cp -r no-file junk 2>/dev/null || fail=1

cp -r slink bar 2>/dev/null || fail=1
set x $(ls -l bar); shift; mode=$1
case $mode in
  l*) ;;
  *) fail=1;;
esac

Exit $fail
#!/bin/sh
# Test cp --reflink=auto

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"
a_other="$other_partition_tmpdir/a"
rm -f "$a_other" || framework_failure_

echo non_zero_size > "$a_other" || framework_failure_

# we shouldn't be able to reflink() files on separate partitions
returns_ 1 cp --reflink "$a_other" b || fail=1

# --reflink=auto should fall back to a normal copy
cp --reflink=auto "$a_other" b || fail=1
test -s b || fail=1

# --reflink=auto should allow --sparse for fallback copies.
# This command can be used to create minimal sized copies.
cp --reflink=auto --sparse=always "$a_other" b || fail=1
test -s b || fail=1

Exit $fail
#!/bin/sh
# Test cp --reflink copies permissions

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp


> time_check
> file
ts='2009-08-28 19:00'
touch -d "$ts" file || framework_failure_
test time_check -nt file || skip_ "The system clock is wrong"

chmod a=rwx file || framework_failure_
umask 077
cp --reflink=auto --preserve file copy || fail=1

mode=$(stat --printf "%A" copy)
test "$mode" = "-rwxrwxrwx" || fail=1

test copy -nt file && fail=1

# Ensure that --attributes-only overrides --reflink completely
echo > file2 # file with data
cp --reflink=auto --preserve --attributes-only file2 empty_copy || fail=1
compare /dev/null empty_copy || fail=1
cp --reflink=always --preserve --attributes-only file2 empty_copy || fail=1
compare /dev/null empty_copy || fail=1

Exit $fail
#!/bin/sh
# Test some of cp's options and how cp handles situations in
# which a naive implementation might overwrite the source file.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

# Unset CDPATH.  Otherwise, output from the 'cd dir' command
# can make this test fail.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

VERSION_CONTROL=numbered; export VERSION_CONTROL

# Determine whether a hard link to a symlink points to the symlink
# itself or to its referent.  For example, the link from FreeBSD6.1
# does dereference a symlink, but the one from Linux does not.
ln -s no-such dangling-slink
ln dangling-slink hard-link > /dev/null 2>&1 \
  && hard_link_to_symlink_does_the_deref=no \
  || hard_link_to_symlink_does_the_deref=yes
rm -f no-such dangling-slink hard-link

test $hard_link_to_symlink_does_the_deref = yes \
    && remove_these_sed='/^0 -[bf]*l .*sl1 ->/d; /hlsl/d' \
    || remove_these_sed='/^ELIDE NO TEST OUTPUT/d'

exec 3>&1 1> actual

# FIXME: This should be bigger: like more than 8k
contents=XYZ

for args in 'foo symlink' 'symlink foo' 'foo foo' 'sl1 sl2' \
            'foo hardlink' 'hlsl sl2'; do
  for options in '' -d -f -df --rem -b -bd -bf -bdf \
                 -l -dl -fl -dfl -bl -bdl -bfl -bdfl; do
    case $args$options in
      # These tests are not portable.
      # They all involve making a hard link to a symbolic link.
      # In the past, we've skipped the tests that are not portable,
      # by doing "continue" here and eliminating the corresponding
      # expected output lines below.  Don't do that anymore.
      'symlink foo'-dfl)
        continue;;
      'symlink foo'-bdl)
        continue;;
      'symlink foo'-bdfl)
        continue;;
      'sl1 sl2'-dfl)
        continue;;
      'sl1 sl2'-bd*l)
        continue;;
      'sl1 sl2'-dl)
        continue;;
    esac

    # cont'd  Instead, skip them only on systems for which link does
    # dereference a symlink.  Detect and skip such tests here.
    case $hard_link_to_symlink_does_the_deref:$args:$options in
      'yes:sl1 sl2:-fl')
        continue ;;
      'yes:sl1 sl2:-bl')
        continue ;;
      'yes:sl1 sl2:-bfl')
        continue ;;
      yes:hlsl*)
        continue ;;
    esac

    rm -rf dir
    mkdir dir
    cd dir
    echo $contents > foo
    case "$args" in *symlink*) ln -s foo symlink ;; esac
    case "$args" in *hardlink*) ln foo hardlink ;; esac
    case "$args" in *sl1*) ln -s foo sl1;; esac
    case "$args" in *sl2*) ln -s foo sl2;; esac
    case "$args" in *hlsl*) ln sl2 hlsl;; esac
    (
      (
        # echo 1>&2 cp $options $args
        cp $options $args 2>_err
        echo $? $options

        # Normalize the program name and diagnostics in the error output,
        # and put brackets around the output.
        if test -s _err; then
          sed '
            s/^[^:]*:\([^:]*\).*/cp:\1/
            1s/^/[/
            $s/$/]/
          ' _err
        fi
        # Strip off all but the file names.
        ls=$(ls -gG --ignore=_err . \
             | sed \
                -e '/^total /d' \
                -e 's/^[^ ]*  *[^ ]*  *[^ ]*  *[^ ]*  *[^ ]*  *[^ ]*  *//')
        echo "($ls)"
        # Make sure the original is unchanged and that
        # the destination is a copy.
        for f in $args; do
          if test -f $f; then
            case "$(cat $f)" in
              "$contents") ;;
              *) echo cp FAILED;;
            esac
          else
            echo symlink-loop
          fi
        done
      ) | tr '\n' ' '
      echo
    ) | sed 's/  *$//'
    cd ..
  done
  echo
done

cat <<\EOF | sed "$remove_these_sed" > expected
1 [cp: 'foo' and 'symlink' are the same file] (foo symlink -> foo)
1 -d [cp: 'foo' and 'symlink' are the same file] (foo symlink -> foo)
1 -f [cp: 'foo' and 'symlink' are the same file] (foo symlink -> foo)
1 -df [cp: 'foo' and 'symlink' are the same file] (foo symlink -> foo)
0 --rem (foo symlink)
0 -b (foo symlink symlink.~1~ -> foo)
0 -bd (foo symlink symlink.~1~ -> foo)
0 -bf (foo symlink symlink.~1~ -> foo)
0 -bdf (foo symlink symlink.~1~ -> foo)
1 -l [cp: cannot create hard link 'symlink' to 'foo'] (foo symlink -> foo)
0 -dl (foo symlink -> foo)
0 -fl (foo symlink)
0 -dfl (foo symlink)
0 -bl (foo symlink symlink.~1~ -> foo)
0 -bdl (foo symlink symlink.~1~ -> foo)
0 -bfl (foo symlink symlink.~1~ -> foo)
0 -bdfl (foo symlink symlink.~1~ -> foo)

1 [cp: 'symlink' and 'foo' are the same file] (foo symlink -> foo)
1 -d [cp: 'symlink' and 'foo' are the same file] (foo symlink -> foo)
1 -f [cp: 'symlink' and 'foo' are the same file] (foo symlink -> foo)
1 -df [cp: 'symlink' and 'foo' are the same file] (foo symlink -> foo)
1 --rem [cp: 'symlink' and 'foo' are the same file] (foo symlink -> foo)
1 -b [cp: 'symlink' and 'foo' are the same file] (foo symlink -> foo)
0 -bd (foo -> foo foo.~1~ symlink -> foo) symlink-loop symlink-loop
1 -bf [cp: 'symlink' and 'foo' are the same file] (foo symlink -> foo)
0 -bdf (foo -> foo foo.~1~ symlink -> foo) symlink-loop symlink-loop
0 -l (foo symlink -> foo)
0 -dl (foo symlink -> foo)
0 -fl (foo symlink -> foo)
0 -bl (foo symlink -> foo)
0 -bfl (foo symlink -> foo)

1 [cp: 'foo' and 'foo' are the same file] (foo)
1 -d [cp: 'foo' and 'foo' are the same file] (foo)
1 -f [cp: 'foo' and 'foo' are the same file] (foo)
1 -df [cp: 'foo' and 'foo' are the same file] (foo)
1 --rem [cp: 'foo' and 'foo' are the same file] (foo)
1 -b [cp: 'foo' and 'foo' are the same file] (foo)
1 -bd [cp: 'foo' and 'foo' are the same file] (foo)
0 -bf (foo foo.~1~)
0 -bdf (foo foo.~1~)
0 -l (foo)
0 -dl (foo)
0 -fl (foo)
0 -dfl (foo)
0 -bl (foo)
0 -bdl (foo)
0 -bfl (foo foo.~1~)
0 -bdfl (foo foo.~1~)

1 [cp: 'sl1' and 'sl2' are the same file] (foo sl1 -> foo sl2 -> foo)
0 -d (foo sl1 -> foo sl2 -> foo)
1 -f [cp: 'sl1' and 'sl2' are the same file] (foo sl1 -> foo sl2 -> foo)
0 -df (foo sl1 -> foo sl2 -> foo)
0 --rem (foo sl1 -> foo sl2)
0 -b (foo sl1 -> foo sl2 sl2.~1~ -> foo)
0 -bd (foo sl1 -> foo sl2 -> foo sl2.~1~ -> foo)
0 -bf (foo sl1 -> foo sl2 sl2.~1~ -> foo)
0 -bdf (foo sl1 -> foo sl2 -> foo sl2.~1~ -> foo)
1 -l [cp: cannot create hard link 'sl2' to 'sl1'] (foo sl1 -> foo sl2 -> foo)
0 -fl (foo sl1 -> foo sl2)
0 -bl (foo sl1 -> foo sl2 sl2.~1~ -> foo)
0 -bfl (foo sl1 -> foo sl2 sl2.~1~ -> foo)

1 [cp: 'foo' and 'hardlink' are the same file] (foo hardlink)
1 -d [cp: 'foo' and 'hardlink' are the same file] (foo hardlink)
1 -f [cp: 'foo' and 'hardlink' are the same file] (foo hardlink)
1 -df [cp: 'foo' and 'hardlink' are the same file] (foo hardlink)
0 --rem (foo hardlink)
0 -b (foo hardlink hardlink.~1~)
0 -bd (foo hardlink hardlink.~1~)
0 -bf (foo hardlink hardlink.~1~)
0 -bdf (foo hardlink hardlink.~1~)
0 -l (foo hardlink)
0 -dl (foo hardlink)
0 -fl (foo hardlink)
0 -dfl (foo hardlink)
0 -bl (foo hardlink)
0 -bdl (foo hardlink)
0 -bfl (foo hardlink)
0 -bdfl (foo hardlink)

1 [cp: 'hlsl' and 'sl2' are the same file] (foo hlsl -> foo sl2 -> foo)
0 -d (foo hlsl -> foo sl2 -> foo)
1 -f [cp: 'hlsl' and 'sl2' are the same file] (foo hlsl -> foo sl2 -> foo)
0 -df (foo hlsl -> foo sl2 -> foo)
0 --rem (foo hlsl -> foo sl2)
0 -b (foo hlsl -> foo sl2 sl2.~1~ -> foo)
0 -bd (foo hlsl -> foo sl2 -> foo sl2.~1~ -> foo)
0 -bf (foo hlsl -> foo sl2 sl2.~1~ -> foo)
0 -bdf (foo hlsl -> foo sl2 -> foo sl2.~1~ -> foo)
1 -l [cp: cannot create hard link 'sl2' to 'hlsl'] (foo hlsl -> foo sl2 -> foo)
0 -dl (foo hlsl -> foo sl2 -> foo)
0 -fl (foo hlsl -> foo sl2)
0 -dfl (foo hlsl -> foo sl2 -> foo)
0 -bl (foo hlsl -> foo sl2 sl2.~1~ -> foo)
0 -bdl (foo hlsl -> foo sl2 -> foo)
0 -bfl (foo hlsl -> foo sl2 sl2.~1~ -> foo)
0 -bdfl (foo hlsl -> foo sl2 -> foo)

EOF

exec 1>&3 3>&-

compare expected actual 1>&2 || fail=1

Exit $fail
#!/bin/sh
# 'test cp --update A B' where A and B are both symlinks that point
# to the same file

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

touch file || framework_failure_
ln -s file a || framework_failure_
ln -s file b || framework_failure_
ln -s no-such-file c || framework_failure_
ln -s no-such-file d || framework_failure_

cp --update --no-dereference a b || fail=1
cp --update --no-dereference c d || fail=1

Exit $fail
#!/bin/sh
# Test cp --sparse=always through fiemap copy

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp
require_perl_

# The test was seen to fail on ext3 so exclude that type
# (or any file system where the type can't be determined)
touch fiemap_chk
if fiemap_capable_ fiemap_chk && ! df -t ext3 . >/dev/null; then
  : # Current partition has working extents.  Good!
else
  # FIXME: temporarily(?) skip this variant, at least until after this bug
  # is fixed: http://thread.gmane.org/gmane.comp.file-systems.ext4/24495
  skip_ "current file system has insufficient FIEMAP support"

  # It's not;  we need to create one, hence we need root access.
  require_root_

  cwd=$PWD
  cleanup_() { cd /; umount "$cwd/mnt"; }

  skip=0
  # Create an ext4 loopback file system
  dd if=/dev/zero of=blob bs=32k count=1000 || skip=1
  mkdir mnt
  mkfs -t ext4 -F blob ||
    skip_ "failed to create ext4 file system"
  mount -oloop blob mnt   || skip=1
  cd mnt                  || skip=1
  echo test > f           || skip=1
  test -s f               || skip=1

  test $skip = 1 &&
    skip_ "insufficient mount/ext4 support"
fi

# =================================================
# Ensure that we exercise the FIEMAP-copying code enough
# to provoke at least two iterations of the do...while loop
# in which it calls ioctl (fd, FS_IOC_FIEMAP,...
# This also verifies that non-trivial extents are preserved.

# Extract logical block number and length pairs from filefrag -v output.
# The initial sed is to remove the "eof" from the normally-empty "flags" field.
# Similarly, remove flags values like "unknown,delalloc,eof".
# That is required when that final extent has no number in the "expected" field.
f()
{
  sed 's/ [a-z,][a-z,]*$//' $@ \
    | $AWK '/^ *[0-9]/ {printf "%d %d ", $2, (NF>=6 ? $6 : (NF<5 ? $NF : $5)) }
            END {print ""}'
}

for i in $(seq 1 2 21); do
  for j in 1 2 31 100; do
    $PERL -e '$n = '$i' * 1024; *F = *STDOUT;' \
          -e 'for (1..'$j') { sysseek (*F, $n, 1)' \
          -e '&& syswrite (*F, chr($_)x$n) or die "$!"}' > j1 || fail=1

    # Note there is an implicit sync performed by cp on Linux kernels
    # before 2.6.39 to work around bugs in EXT4 and BTRFS.
    # Note also the -s parameter to the filefrag commands below
    # for the same reasons.
    cp --sparse=always j1 j2 || fail=1

    cmp j1 j2 || fail_ "data loss i=$i j=$j"
    if ! filefrag -vs j1 | grep -F extent >/dev/null; then
      test $skip != 1 && warn_ 'skipping part; you lack filefrag'
      skip=1
    else
      # Here is sample filefrag output:
      #   $ perl -e 'BEGIN{$n=16*1024; *F=*STDOUT}' \
      #          -e 'for (1..5) { sysseek(*F,$n,1)' \
      #          -e '&& syswrite *F,"."x$n or die "$!"}' > j
      #   $ filefrag -v j
      #   File system type is: ef53
      #   File size of j is 163840 (40 blocks, blocksize 4096)
      #    ext logical physical expected length flags
      #      0       4  6258884               4
      #      1      12  6258892  6258887      4
      #      2      20  6258900  6258895      4
      #      3      28  6258908  6258903      4
      #      4      36  6258916  6258911      4 eof
      #   j: 6 extents found

      # exclude the physical block numbers; they always differ
      filefrag -v j1 > ff1 || framework_failure_
      filefrag -vs j2 > ff2 || framework_failure_
      { f ff1; f ff2; } | $PERL $abs_srcdir/tests/filefrag-extent-compare \
        || {
             warn_ ignoring filefrag-reported extent map differences
             # Show the differing extent maps.
             head -n99 ff1 ff2
           }
    fi
    test $fail = 1 && break 2
  done
done

Exit $fail
#!/bin/sh
# copy a sparse file to a pipe, to exercise some seldom-used parts of copy.c

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

require_sparse_support_

# Terminate any background cp process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

mkfifo_or_skip_ pipe
timeout 10 cat pipe > copy & pid=$!

truncate -s1M sparse || framework_failure_
cp sparse pipe || fail=1

# Ensure that the cat has completed before comparing.
wait $pid

cmp sparse copy || fail=1

Exit $fail
#!/bin/sh
# Test cp --sparse=always

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp
require_sparse_support_

# Create a sparse file.
# It has to be at least 128K in order to be sparse on some systems.
# Make its size one larger than 128K, in order to tickle the
# bug in coreutils-6.0.
size=$(expr 128 \* 1024 + 1)
dd bs=1 seek=$size of=sparse < /dev/null 2> /dev/null || framework_failure_


cp --sparse=always sparse copy || fail=1

# Ensure that the copy has the same block count as the original.
test $(stat --printf %b copy) -le $(stat --printf %b sparse) || fail=1

# Ensure that --sparse={always,never} with --reflink fail.
returns_ 1 cp --sparse=always --reflink sparse copy || fail=1
returns_ 1 cp --sparse=never --reflink sparse copy || fail=1


# Ensure we handle sparse/non-sparse transitions correctly
maxn=128 # how many $hole_size chunks per file
hole_size=$(stat -c %o copy)
dd if=/dev/zero bs=$hole_size count=$maxn of=zeros || framework_failure_
tr '\0' 'U' < zeros > nonzero || framework_failure_

for pattern in 1 0; do
  test "$pattern" = 1 && pattern="$(printf '%s\n%s' nonzero zeros)"
  test "$pattern" = 0 && pattern="$(printf '%s\n%s' zeros nonzero)"

  for n in 1 2 4 11 32 $maxn; do
    parts=$(expr $maxn / $n)

    rm -f sparse.in

    # Generate non sparse file for copying with alternating
    # hole/data patterns of size n * $hole_size
    for i in $(yes "$pattern" | head -n$parts); do
      dd iflag=fullblock if=$i of=sparse.in conv=notrunc oflag=append \
         bs=$hole_size count=$n status=none || framework_failure_
    done

    cp --sparse=always sparse.in sparse.out   || fail=1 # non sparse input
    cp --sparse=always sparse.out sparse.out2 || fail=1 # sparse input

    cmp sparse.in sparse.out || fail=1
    cmp sparse.in sparse.out2 || fail=1

    ls -lsh sparse.*
  done
done

Exit $fail
#!/bin/sh
# make sure 'cp -p' preserves special bits
# This works only when run as root.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This test would fail due to a bug introduced in 4.0y.
# The bug was fixed in 4.0z.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp
require_root_

touch a b c || framework_failure_
chmod u+sx,go= a || framework_failure_
chmod u=rwx,g=sx,o= b || framework_failure_
chmod a=r,ug+sx c || framework_failure_
chown $NON_ROOT_USERNAME . || framework_failure_
chmod u=rwx,g=rx,o=rx . || framework_failure_


cp -p a a2 || fail=1
set _ $(ls -l a); shift; p1=$1
set _ $(ls -l a2); shift; p2=$1
test $p1 = $p2 || fail=1

cp -p b b2 || fail=1
set _ $(ls -l b); shift; p1=$1
set _ $(ls -l b2); shift; p2=$1
test $p1 = $p2 || fail=1

chroot --skip-chdir --user=$NON_ROOT_USERNAME / env PATH="$PATH" cp -p c c2 \
  || fail=1
set _ $(ls -l c); shift; p1=$1
set _ $(ls -l c2); shift; p2=$1
test $p1 = $p2 && fail=1

Exit $fail
#!/bin/sh
# Ensure that "cp -Rf fifo E" unlinks E and retries.
# Up until coreutils-6.10.171, it would not.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkfifo_or_skip_ fifo

touch e || framework-failure


# Without -f, expect it to fail.
cp -R fifo e || fail=1

# With -f, it must succeed.
cp -Rf fifo e || fail=1
test -p fifo || fail=1

Exit $fail
#!/bin/sh
# Ensure that "mkdir x y; cd y; cp -ab ../x/. ." is a successful, silent, no-op.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir x y || framework_failure_


cd y
cp --verbose -ab ../x/. . > out 2>&1 || fail=1
cat <<\EOF > exp || fail=1
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Make sure that cp -dR dereferences a symlink arg if its name is
# written with a trailing slash.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

mkdir dir || framework_failure_
ln -s dir symlink || framework_failure_

cp -dR symlink/ s || fail=1
set $(ls -l s)

# Prior to fileutils-4.0q, the following would have output ...'s -> dir'
# because the trailing slash was removed unconditionally (now you have to
# use the new --strip-trailing-slash option) causing cp to reproduce the
# symlink.  Now, the trailing slash is interpreted by the stat library
# call and so cp ends up dereferencing the symlink and copying the directory.
test "$*" = 'total 0' && : || fail=1

Exit $fail
#!/bin/sh
# Ensure that cp works as documented, when the destination is a dangling symlink

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp

ln -s no-such dangle || framework_failure_
echo hi > f || framework_failure_
echo hi > exp || framework_failure_
echo "cp: not writing through dangling symlink 'dangle'" \
    > exp-err || framework_failure_


# Starting with 6.9.90, this usage fails, by default:
cp f dangle > err 2>&1 && fail=1

compare exp-err err || fail=1
test -f no-such && fail=1

# But you can set POSIXLY_CORRECT to get the historical behavior.
env POSIXLY_CORRECT=1 cp f dangle > out 2>&1 || fail=1
cat no-such >> out || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# test conv=ascii

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd printf

{
  # Two lines, EBCDIC " A A" and " A  ", followed by all the bytes in order.
  env printf '\100\301\100\301\100\301\100\100' &&
  env printf $(env printf '\\%03o' $(seq 0 255));
} >in || framework_failure_

{
  # The converted lines, with trailing spaces removed.
env printf \
' A A\n A\n'\
'\000\001\002\003\n\234\011\206\177\n'\
'\227\215\216\013\n\014\015\016\017\n'\
'\020\021\022\023\n\235\205\010\207\n'\
'\030\031\222\217\n\034\035\036\037\n'\
'\200\201\202\203\n\204\012\027\033\n'\
'\210\211\212\213\n\214\005\006\007\n'\
'\220\221\026\223\n\224\225\226\004\n'\
'\230\231\232\233\n\024\025\236\032\n'\
'\040\240\241\242\n\243\244\245\246\n'\
'\247\250\325\056\n\074\050\053\174\n'\
'\046\251\252\253\n\254\255\256\257\n'\
'\260\261\041\044\n\052\051\073\176\n'\
'\055\057\262\263\n\264\265\266\267\n'\
'\270\271\313\054\n\045\137\076\077\n'\
'\272\273\274\275\n\276\277\300\301\n'\
'\302\140\072\043\n\100\047\075\042\n'\
'\303\141\142\143\n\144\145\146\147\n'\
'\150\151\304\305\n\306\307\310\311\n'\
'\312\152\153\154\n\155\156\157\160\n'\
'\161\162\136\314\n\315\316\317\320\n'\
'\321\345\163\164\n\165\166\167\170\n'\
'\171\172\322\323\n\324\133\326\327\n'\
'\330\331\332\333\n\334\335\336\337\n'\
'\340\341\342\343\n\344\135\346\347\n'\
'\173\101\102\103\n\104\105\106\107\n'\
'\110\111\350\351\n\352\353\354\355\n'\
'\175\112\113\114\n\115\116\117\120\n'\
'\121\122\356\357\n\360\361\362\363\n'\
'\134\237\123\124\n\125\126\127\130\n'\
'\131\132\364\365\n\366\367\370\371\n'\
'\060\061\062\063\n\064\065\066\067\n'\
'\070\071\372\373\n\374\375\376\377\n';
} >exp || framework_failure_

dd if=in of=out conv=ascii cbs=4 || fail=1

compare exp out \
  || { od -v -to1 exp > exp2 || framework_failure_;
       od -v -to1 out > out2 || framework_failure_;
       compare exp2 out2;
       fail=1; }

Exit $fail
#!/bin/sh

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd

# count_bytes
echo 0123456789abcdefghijklm > in || framework_failure_
dd count=14 conv=swab iflag=count_bytes < in > out 2> /dev/null || fail=1
case $(cat out) in
 1032547698badc) ;;
 *) fail=1 ;;
esac

# skip_bytes
echo 0123456789abcdefghijklm > in || framework_failure_
dd skip=10 iflag=skip_bytes < in > out 2> /dev/null || fail=1
case $(cat out) in
 abcdefghijklm) ;;
 *) fail=1 ;;
esac

# skip records and bytes from pipe
echo 0123456789abcdefghijklm |
 dd skip=10 bs=2 iflag=skip_bytes > out 2> /dev/null || fail=1
case $(cat out) in
 abcdefghijklm) ;;
 *) fail=1 ;;
esac

# seek bytes
echo abcdefghijklm |
 dd bs=5 seek=8 oflag=seek_bytes > out 2> /dev/null || fail=1
printf '\0\0\0\0\0\0\0\0abcdefghijklm\n' > expected
compare expected out || fail=1

# Just truncation, no I/O
dd bs=5 seek=8 oflag=seek_bytes of=out2 count=0 2> /dev/null || fail=1
truncate -s8 expected2
compare expected2 out2 || fail=1

Exit $fail
#!/bin/sh
# ensure that dd's oflag=direct works

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd

truncate -s 8192 in || framework_failure_
dd if=in oflag=direct of=out 2> /dev/null \
  || skip_ 'this file system lacks support for O_DIRECT'

truncate -s 511 short || framework_failure_
truncate -s 8191 m1 || framework_failure_
truncate -s 8193 p1 || framework_failure_

for i in short m1 p1; do
  rm -f out
  dd if=$i oflag=direct of=out || fail=1
done

Exit $fail
#!/bin/sh
# Ensure dd treats '--' properly.
# Also test some flag values.

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd

tmp_in=dd-in
tmp_in2=dd-in2
tmp_sym=dd-sym
tmp_out=dd-out

warn=0
echo data > $tmp_in || framework_failure_
ln $tmp_in $tmp_in2 || framework_failure_
ln -s $tmp_in $tmp_sym || framework_failure_

# check status=none suppresses all output to stderr
dd status=none if=$tmp_in of=/dev/null 2> err || fail=1
compare /dev/null err || fail=1
dd status=none if=$tmp_in skip=2 of=/dev/null 2> err || fail=1
compare /dev/null err || fail=1
# check later status=none overrides earlier status=noxfer
dd status=noxfer status=none if=$tmp_in of=/dev/null 2> err || fail=1
compare /dev/null err || fail=1
# check later status=noxfer overrides earlier status=none
dd status=none status=noxfer if=$tmp_in of=/dev/null 2> err || fail=1
compare /dev/null err && fail=1

dd if=$tmp_in of=$tmp_out 2> /dev/null || fail=1
compare $tmp_in $tmp_out || fail=1

rm $tmp_out
dd -- if=$tmp_in of=$tmp_out 2> /dev/null || fail=1
compare $tmp_in $tmp_out || fail=1

if dd oflag=append if=$tmp_in of=$tmp_out 2> /dev/null; then
  compare $tmp_in $tmp_out || fail=1
fi

case $(cat /dev/stdin <$tmp_in 2>/dev/null) in
(data)
  rm -f $tmp_out
  dd if=/dev/stdin of=$tmp_out <$tmp_in || fail=1
  compare $tmp_in $tmp_out || fail=1
esac

if dd iflag=nofollow if=$tmp_in count=0 2> /dev/null; then
  returns_ 1 dd iflag=nofollow if=$tmp_sym count=0 2> /dev/null || fail=1
fi

if dd iflag=directory if=. count=0 2> /dev/null; then
  dd iflag=directory count=0 <. 2> /dev/null || fail=1
  returns_ 1 dd iflag=directory count=0 <$tmp_in 2> /dev/null || fail=1
fi

old_ls=$(ls -u --full-time $tmp_in)
sleep 1
if dd iflag=noatime if=$tmp_in of=$tmp_out 2> /dev/null; then
  new_ls=$(ls -u --full-time $tmp_in)
  if test "x$old_ls" != "x$new_ls"; then
    cat >&2 <<EOF
=================================================================
$0: WARNING!!!
This operating system has the O_NOATIME file status flag,
but it is silently ignored in some cases.
Therefore, dd options like iflag=noatime may be silently ignored.
=================================================================
EOF
    warn=77
  fi
fi

if dd oflag=nolinks if=$tmp_in of=$tmp_out 2> /dev/null; then
  returns_ 1 dd iflag=nolinks if=$tmp_in > /dev/null 2>&1 || fail=1
  returns_ 1 dd iflag=nolinks < $tmp_in > /dev/null 2>&1 || fail=1
  dd oflag=nolinks < $tmp_in > $tmp_out 2>&1 || fail=1
fi

outbytes=$(echo x | dd bs=3 ibs=10 obs=10 conv=sync 2>/dev/null | wc -c)
test "$outbytes" -eq 3 || fail=1

# A delay is required to trigger a failure.
# There might be some missed failures but it's unlikely.
(echo a; sleep .1; echo b) \
  | env LC_ALL=C dd bs=4 status=noxfer iflag=fullblock >out 2>err || fail=1
printf 'a\nb\n' > out_ok || framework_failure_
echo "1+0 records in
1+0 records out" > err_ok || framework_failure_
compare out_ok out || fail=1
compare err_ok err || fail=1

test $fail -eq 0 && fail=$warn

Exit $fail
#!/bin/sh
# make sure that dd doesn't allocate memory unnecessarily

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd

# Determine basic amount of memory needed.
echo . > f || framework_failure_
vm=$(get_min_ulimit_v_ timeout 10 dd if=f of=f2 status=none) \
  || skip_ "this shell lacks ulimit support"
rm f f2 || framework_failure_

# count and skip are zero, we don't need to allocate memory
(ulimit -v $vm && dd  bs=30M count=0) || fail=1
(ulimit -v $vm && dd ibs=30M count=0) || fail=1
(ulimit -v $vm && dd obs=30M count=0) || fail=1

check_dd_seek_alloc() {
  local file="$1"
  local buf="$2"
  test "$file" = 'in' && { dd_file=if; dd_op=skip; }
  test "$file" = 'out' && { dd_file=of; dd_op=seek; }
  test "$buf" = 'in' && { dd_buf=ibs; }
  test "$buf" = 'out' && { dd_buf=obs; }
  test "$buf" = 'both' && { dd_buf=bs; }

  # Provide input to the "tape"
  timeout 10 dd count=1 if=/dev/zero of=tape&

  # Allocate buffer and read from the "tape"
  (ulimit -v $vm \
     && timeout 10 dd $dd_buf=30M $dd_op=1 count=0 $dd_file=tape)
  local ret=$?

  # Be defensive in case the tape reader is blocked for some reason
  test $ret = 124 && framework_failure_

  # This should happen without delay,
  # and is used to ensure we've not multiple writers to the "tape"
  wait

  # We want the "tape" reader to fail iff allocating
  # a large buffer corresponding to the file being read
  case "$file$buf" in
    inout|outin) test $ret = 0;;
    *) test $ret != 0;;
  esac
}

# Use a fifo for which seek fails, but read does not.
# For non seekable output we need to allocate a buffer
# when simulating seeking with a read.
if mkfifo tape; then
  for file in 'in' 'out'; do
    for buf in 'both' 'in' 'out'; do
      check_dd_seek_alloc "$file" "$buf" || fail=1
    done
  done
fi

Exit $fail
#!/bin/sh
# Ensure dd handles the 'nocache' flag

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd

# This should not call posix_fadvise
dd iflag=nocache oflag=nocache if=/dev/null of=/dev/null || fail=1

# We should get an error for trying to process a pipe
dd count=0 | returns_ 1 dd iflag=nocache count=0 || fail=1

# O_DIRECT is orthogonal to drop cache so mutually exclusive
returns_ 1 dd iflag=nocache,direct if=/dev/null || fail=1

# The rest ensure that the documented uses cases
# proceed without error
for f in ifile ofile; do
  dd if=/dev/zero of=$f conv=fdatasync count=100 || framework_failure_
done

# Advise to drop cache for whole file
if ! dd if=ifile iflag=nocache count=0 2>err; then
  # We could check for 'Operation not supported' in err here,
  # but that was seen to be brittle. HPUX returns ENOTTY for example.
  # So assume that if this basic operation fails, it's due to lack
  # of support by the system.
  warn_ 'skipping part; this file system lacks support for posix_fadvise()'
  skip=1
fi

if test "$skip" != 1; then
  # Ensure drop cache for whole file
  dd of=ofile oflag=nocache conv=notrunc,fdatasync count=0 || fail=1

  # Drop cache for part of file
  dd if=ifile iflag=nocache skip=10 count=10 of=/dev/null || fail=1

  # Stream data just using readahead cache
  dd if=ifile of=ofile iflag=nocache oflag=nocache || fail=1
fi

Exit $fail
#!/bin/sh
# Make sure dd does the right thing when the input file descriptor
# is not rewound.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd


echo abcde > in
(dd skip=1 count=1 bs=1; dd skip=1 bs=1) < in > out 2> /dev/null || fail=1
case $(cat out) in
  bde) ;;
  *) fail=1 ;;
esac

Exit $fail
#!/bin/sh
# test dd reblocking vs. bs=

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd

# 2 short reads -> 1 full write + 1 partial write
cat <<\EOF > exp-reblock || framework_failure_
0+2 records in
1+1 records out
4 bytes copied
EOF

# 2 short reads -> 2 partial writes
cat <<\EOF > exp-no-reblock || framework_failure_
0+2 records in
0+2 records out
4 bytes copied
EOF


# Use a fifo rather than a pipe in the tests below
# so that the producer (printf subshell) will wait
# until the consumer (dd) opens the fifo therefore
# increasing the chance that dd will read the data
# from each printf separately.
mkfifo_or_skip_ dd.fifo

dd_reblock_1()
{
  local delay="$1"

  # ensure that dd reblocks when bs= is not specified
  dd ibs=3 obs=3 if=dd.fifo > out 2> err&
  (printf 'ab'; sleep $delay; printf 'cd') > dd.fifo
  wait #for dd to complete
  sed 's/,.*//' err > k && mv k err
  compare exp-reblock err
}

retry_delay_ dd_reblock_1 .1 6 || fail=1

dd_reblock_2()
{
  local delay="$1"

  # Demonstrate that bs=N supersedes even following ibs= and obs= settings.
  dd bs=3 ibs=1 obs=1 if=dd.fifo > out 2> err&
  (printf 'ab'; sleep $delay; printf 'cd') > dd.fifo
  wait #for dd to complete
  sed 's/,.*//' err > k && mv k err
  compare exp-no-reblock err
}

retry_delay_ dd_reblock_2 .1 6 || fail=1

Exit $fail
#!/bin/sh
# test diagnostics are printed immediately when seeking beyond device.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd

# need write access to local device
# (even though we don't actually write anything)
require_root_
require_local_dir_

get_device_size() {
  BLOCKDEV=blockdev
  $BLOCKDEV -V >/dev/null 2>&1 || BLOCKDEV=/sbin/blockdev
  $BLOCKDEV --getsize64 "$1"
}


# Get path to device the current dir is on.
# Note df can only get fs size, not device size.
device=$(df --output=source . | tail -n1) || framework_failure_

dev_size=$(get_device_size "$device") ||
  skip_ "failed to determine size of $device"

# Don't use shell arithmetic as older versions of dash use longs
DEV_OFLOW=$(expr $dev_size + 1)

timeout 10 dd bs=1 skip=$DEV_OFLOW count=0 status=noxfer < "$device" 2> err
test "$?" = "1" || fail=1
echo "dd: 'standard input': cannot skip: Invalid argument
0+0 records in
0+0 records out" > err_ok || framework_failure_
compare err_ok err || fail=1

timeout 10 dd bs=1 seek=$DEV_OFLOW count=0 status=noxfer > "$device" 2> err
test "$?" = "1" || fail=1
echo "dd: 'standard output': cannot seek: Invalid argument
0+0 records in
0+0 records out" > err_ok || framework_failure_
compare err_ok err || fail=1

Exit $fail
#!/bin/sh
# test diagnostics are printed when seeking too far in seekable files.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd
require_sparse_support_ # for 'truncate --size=$OFF_T_MAX'
eval $(getlimits) # for OFF_T limits


printf "1234" > file || framework_failure_

echo "\
dd: 'standard input': cannot skip to specified offset
0+0 records in
0+0 records out" > skip_err || framework_failure_

# skipping beyond number of blocks in file should issue a warning
dd bs=1 skip=5 count=0 status=noxfer < file 2> err || fail=1
compare skip_err err || fail=1

# skipping beyond number of bytes in file should issue a warning
dd bs=3 skip=2 count=0 status=noxfer < file 2> err || fail=1
compare skip_err err || fail=1

# skipping beyond number of blocks in pipe should issue a warning
cat file | dd bs=1 skip=5 count=0 status=noxfer 2> err || fail=1
compare skip_err err || fail=1

# skipping beyond number of bytes in pipe should issue a warning
cat file | dd bs=3 skip=2 count=0 status=noxfer 2> err || fail=1
compare skip_err err || fail=1

# Check seeking beyond file already offset into
# skipping beyond number of blocks in file should issue a warning
(dd bs=1 skip=1 count=0 2>/dev/null &&
 dd bs=1 skip=4 status=noxfer 2> err) < file || fail=1
compare skip_err err || fail=1

# Check seeking beyond file already offset into
# skipping beyond number of bytes in file should issue a warning
(dd bs=1 skip=1 count=0 2>/dev/null &&
 dd bs=2 skip=2 status=noxfer 2> err) < file || fail=1
compare skip_err err || fail=1

# seeking beyond end of file is OK
dd bs=1 seek=5 count=0 status=noxfer > file 2> err || fail=1
echo "0+0 records in
0+0 records out" > err_ok || framework_failure_
compare err_ok err || fail=1

# skipping > OFF_T_MAX should fail immediately
dd bs=1 skip=$OFF_T_OFLOW count=0 status=noxfer < file 2> err && fail=1
# error message should be "... cannot skip: strerror(EOVERFLOW)"
grep "cannot skip:" err >/dev/null || fail=1

# skipping > max file size should fail immediately
if ! truncate --size=$OFF_T_MAX in 2>/dev/null; then
  # truncate is to ensure file system doesn't actually support OFF_T_MAX files
  dd bs=1 skip=$OFF_T_MAX count=0 status=noxfer < file 2> err \
    && lseek_ok=yes \
    || lseek_ok=no

  if test $lseek_ok = yes; then
    # On Solaris 10 at least, lseek(>max file size) succeeds,
    # so just check for the skip warning.
    compare skip_err err || fail=1
  else
    # On Linux kernels at least, lseek(>max file size) fails.
    # error message should be "... cannot skip: strerror(EINVAL)"
    grep "cannot skip:" err >/dev/null || fail=1
  fi
fi

Exit $fail
#!/bin/sh
# show how to skip an amount that is smaller than the nominal block size.
# There's a more realistic example in the documentation.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd


echo LA:3456789abcdef > in || fail=1
(dd bs=1 skip=3 count=0 && dd bs=5) < in > out 2> /dev/null || fail=1
case $(cat out) in
  3456789abcdef) ;;
  *) fail=1 ;;
esac

echo LA:3456789abcdef > in || fail=1
(dd bs=1 skip=3 count=0 && dd bs=5 count=2) < in > out 2> /dev/null || fail=1
case $(cat out) in
  3456789abc) ;;
  *) fail=1 ;;
esac

Exit $fail
#!/bin/sh

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd
is_local_dir_ . || very_expensive_
require_sparse_support_

# Ensure basic sparse generation works
truncate -s1M sparse
dd bs=32K if=sparse of=sparse.dd conv=sparse
test $(stat -c %s sparse) = $(stat -c %s sparse.dd) || fail=1

# Demonstrate that conv=sparse with oflag=append,
# will do ineffective seeks in the output
printf 'a\000\000b' > file.in
printf 'ab' > exp
dd if=file.in bs=1 conv=sparse oflag=append > out
compare exp out || fail=1

# Demonstrate conv=sparse with conv=notrunc,
# where data in file.out is not overwritten with NULs
printf '____' > out
printf 'a__b' > exp
dd if=file.in bs=1 conv=sparse,notrunc of=out
compare exp out || fail=1

# Ensure we fall back to write if seek fails
dd if=file.in bs=1 conv=sparse | cat > file.out
cmp file.in file.out || fail=1

# Setup for block size tests: create a 3MiB file with a 1MiB
# stretch of NUL bytes in the middle.
rm -f file.in
dd if=/dev/urandom of=file.in bs=1M count=3 iflag=fullblock || fail=1
dd if=/dev/zero    of=file.in bs=1M count=1 seek=1 conv=notrunc || fail=1

kb_alloc() { du -k "$1"|cut -f1; }

# sync out data for async allocators like NFS/BTRFS
# sync file.in || fail=1

# If our just-created input file appears to be too small,
# skip the remaining tests.  On at least Solaris 10 with NFS,
# file.in is reported to occupy <= 1KiB for about 50 seconds
# after its creation.
if test $(kb_alloc file.in) -gt 3000; then

  # Ensure NUL blocks smaller than the block size are not made sparse.
  # Here, with a 2MiB block size, dd's conv=sparse must *not* introduce a hole.
  dd if=file.in of=file.out bs=2M conv=sparse || fail=1

  # Intermittently BTRFS returns 0 allocation for file.out unless synced
  sync file.out || framework_failure_
  test 2500 -lt $(kb_alloc file.out) || fail=1

  # Note we recreate a sparse file first to avoid
  # speculative preallocation seen in XFS, where a write() that
  # extends a file can preallocate some extra space that
  # a subsequent seek will not convert to a hole.
  rm -f file.out
  truncate --size=3M file.out

  # Ensure that this 1MiB string of NULs *is* converted to a hole.
  dd if=file.in of=file.out bs=1M conv=sparse,notrunc
  test $(kb_alloc file.out) -lt 2500 || fail=1

fi

Exit $fail
#!/bin/sh
# Check stats output for SIG{INFO,USR1} and status=progress

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd
require_trap_signame_

kill -l | grep 'INFO' && SIGINFO='INFO' || SIGINFO='USR1'

# This to avoid races in the USR1 case
# as the dd process will terminate by default until
# it has its handler enabled.
trap '' $SIGINFO

mkfifo_or_skip_ fifo

# Terminate any background processes
cleanup_()
{
  kill $pid  2>/dev/null
  kill $pid2 2>/dev/null
  wait
}

for open in '' '1'; do
  > err || framework_failure_

  # Run dd with the fullblock iflag to avoid short reads
  # which can be triggered by reception of signals
  dd iflag=fullblock if=/dev/zero of=fifo count=50 bs=5000000 2>err & pid=$!

  # Note if we sleep here we give dd a chance to exec and block on open.
  # Otherwise we're probably testing SIG_IGN in the forked shell or early dd.
  test "$open" && sleep .1

  # dd will block on open until fifo is opened for reading.
  # Timeout in case dd goes away erroneously which we check for below.
  timeout 20 sh -c 'wc -c < fifo > nwritten' & pid2=$!

  # Send lots of signals immediately to ensure dd not killed due
  # to race setting handler, or blocking on open of fifo.
  # Many signals also check that short reads are handled.
  until ! kill -s $SIGINFO $pid 2>/dev/null; do
    sleep .01
  done

  wait

  # Ensure all data processed and at least last status written
  grep '250000000 bytes (250 MB, 238 MiB) copied' err || { cat err; fail=1; }
done

progress_output()
{
  { sleep $1; echo 1; } | dd bs=1 status=progress of=/dev/null 2>err
  # Progress output should be for "byte copied", while final is "bytes ..."
  grep 'byte copied' err
}
retry_delay_ progress_output 1 4 || { cat err; fail=1; }

Exit $fail
#!/bin/sh
# Ensure dd recognizes failure to write to stderr.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd

p=$abs_top_builddir


# Ensure this exits successfully, even though stderr is closed,
# because it generates no stderr output.
dd --help >/dev/null 2>&- || fail=1

# If 2>&- works, ensure this fails, because stderr is closed and it
# *does* generate output.  2>&- apparently does not work in HP-UX 11.23.
# This test is ineffective unless /dev/stderr also works.
# This exposes a failure present in 6.11 through 7.5.
if "$p/src/test" -w /dev/stderr 2>/dev/null &&
   "$p/src/test" ! -w /dev/stderr 2>&-; then
  : | returns_ 1 dd 2>&- || fail=1
fi

# Likewise for /dev/full, if /dev/full works.
if test -w /dev/full && test -c /dev/full; then
  : | returns_ 1 dd 2>/dev/full || fail=1
fi

Exit $fail
#!/bin/sh
# Ensure that dd conv=unblock,sync works.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ dd

printf 000100020003xx > in || framework_failure_


dd cbs=4 ibs=4 conv=unblock,sync < in > out 2> /dev/null || fail=1
cat <<\EOF > exp || fail=1
0001
0002
0003
xx
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that df -P is not affected by BLOCK_SIZE settings

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df


              df -P . > t1 || fail=1
BLOCK_SIZE=1M df -P . > t2 || fail=1

# Since disk utilization may be changing, compare only df's header line.
# That records the block size.  E.g., for "1M", it would be:
# Filesystem         1048576-blocks      Used Available Capacity Mounted on
# while for 1K, it would be
# Filesystem         1024-blocks      Used Available Capacity Mounted on

head -n1 t1 > exp || fail=1
head -n1 t2 > out || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Exercise df's --output option.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df

# Ensure that --output is mutually exclusive with -i, -P, and -T.
# Ensure that this limitation is not depending on the order of options.
cat <<\EOF > exp || framework_failure_
df: options OPT and --output are mutually exclusive
Try 'df --help' for more information.
EOF

df -i --output '.' 2>out && fail=1
sed 's/ -i / OPT /' out > out2
compare exp out2 || fail=1

df --output -i '.' 2>out && fail=1
sed 's/ -i / OPT /' out > out2
compare exp out2 || fail=1

df -P --output '.' 2>out && fail=1
sed 's/ -P / OPT /' out > out2
compare exp out2 || fail=1

df --output -P '.' 2>out && fail=1
sed 's/ -P / OPT /' out > out2
compare exp out2 || fail=1

df -T --output '.' 2>out && fail=1
sed 's/ -T / OPT /' out > out2
compare exp out2 || fail=1

df --output -T '.' 2>out && fail=1
sed 's/ -T / OPT /' out > out2
compare exp out2 || fail=1

# Ensure that each field is only used once for the --output argument.
cat <<\EOF > exp || framework_failure_
df: option --output: field 'target' used more than once
Try 'df --help' for more information.
EOF

df --output=target,source,target '.' 2>out && fail=1
compare exp out || fail=1

# Ensure that this limitation also works for splitted --output options.
df --out=target,source --out=target '.' 2>out && fail=1
compare exp out || fail=1

# Ensure that the full output includes all fields, and
# that --o (without argument) is identical to the full list.

cat <<\EOF > exp || framework_failure_
Filesystem Type Inodes IUsed IFree IUse% Size Used Avail Use% File Mounted on
EOF

df -h --o=source,fstype,itotal,iused,iavail,ipcent \
 --o=size,used,avail,pcent,file,target '.' >out || fail=1
sed -e '1 {
          s/ [ ]*/ /g
          q
        }' out > out2
compare exp out2 || fail=1

df -h --output '.' >out || fail=1
sed -e '1 {
          s/ [ ]*/ /g
          q
        }' out > out2
compare exp out2 || fail=1

# Ensure that --output indicates the block size
# when not using --human-readable
cat <<\EOF > exp || framework_failure_
1K-blocks
EOF

df -B1K --output=size '.' >out || fail=1
sed -e '1 {
          s/ *//
          q
        }' out > out2
compare exp out2 || fail=1

# Ensure that the grand total line now contains a "-" in the TARGET field ...
cat <<\EOF > exp || framework_failure_
-
EOF

df --output=source,target --total '.' >out || fail=1
sed -n -e '3 {
             s/^total[ ]*//
             p
             q
           }' out > out2
compare exp out2 || fail=1

# ... but it should read "total" if there is no SOURCE field.
cat <<\EOF > exp || framework_failure_
total
EOF

df --output=target --total '.' >out || fail=1
sed -n -e '3 {
             p
             q
           }' out > out2
compare exp out2 || fail=1

# Ensure that --output is mentioned in the usage.
df --help > out || fail=1
grep ' --output' out >/dev/null || { fail=1; cat out; }

# Ensure that the FILE field contains the argument.
cat <<\EOF > exp || framework_failure_
.
exp
EOF

df --output=file '.' exp >out || fail=1
sed '1d' out > out2
compare exp out2 || fail=1

Exit $fail
#!/bin/sh
# Ensure that df dereferences symlinks to disk nodes

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df

disk=$(df --out=source '.' | tail -n1) ||
  skip_ "cannot determine '.' file system"

ln -s "$disk" symlink || framework_failure_

df --out=source,target "$disk" > exp || skip_ "cannot get info for $disk"
df --out=source,target symlink > out || fail=1
compare exp out || fail=1

# Ensure we output the same values for device nodes and '.'
# This was not the case in coreutil-8.22 on systems
# where the device in the mount list was a symlink itself.
# I.e., '.' => /dev/mapper/fedora-home -> /dev/dm-2
# Restrict this test to systems with a 1:1 mapping between
# source and target.  This excludes for example BTRFS sub-volumes.
if test "$(df --output=source | grep -F "$disk" | wc -l)" = 1; then
  df --out=source,target '.' > out || fail=1
  compare exp out || fail=1
fi

test "$fail" = 1 && dump_mount_list_

Exit $fail
#!/bin/sh
# Ensure that "df ." outputs a header.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df

case $(df .) in
*'
'*) ;;
*) fail=1;;
esac

Exit $fail
#!/bin/sh
# Test df's behaviour when the mount list cannot be read.
# This test is skipped on systems that lack LD_PRELOAD support; that's fine.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df
require_gcc_shared_

# Protect against inaccessible remote mounts etc.
timeout 10 df || skip_ "df fails"

grep '^#define HAVE_MNTENT_H 1' $CONFIG_HEADER > /dev/null \
      || skip_ "no mntent.h available to confirm the interface"

grep '^#define HAVE_GETMNTENT 1' $CONFIG_HEADER > /dev/null \
      || skip_ "getmntent is not used on this system"

# Simulate "mtab" failure.
cat > k.c <<EOF || framework_failure_
#define _GNU_SOURCE
#include <stdio.h>
#include <errno.h>
#include <mntent.h>
#include <string.h>
#include <dlfcn.h>

#define STREQ(a, b) (strcmp (a, b) == 0)

FILE* fopen(const char *path, const char *mode)
{
  static FILE* (*fopen_func)(char const *, char const *);

  /* get reference to original (libc provided) fopen */
  if (!fopen_func)
    {
      fopen_func = (FILE*(*)(char const *, char const *))
                   dlsym(RTLD_NEXT, "fopen");
      if (!fopen_func)
        {
          fprintf (stderr, "Failed to find fopen()\n");
          errno = ESRCH;
          return NULL;
        }
    }

  /* Returning ENOENT here will get read_file_system_list()
     to fall back to using getmntent() below.  */
  if (STREQ (path, "/proc/self/mountinfo"))
    {
      errno = ENOENT;
      return NULL;
    }
  else
    return fopen_func(path, mode);
}

struct mntent *getmntent (FILE *fp)
{
  /* Prove that LD_PRELOAD works. */
  static int done = 0;
  if (!done)
    {
      fclose (fopen ("x", "w"));
      ++done;
    }
  /* Now simulate the failure. */
  errno = ENOENT;
  return NULL;
}
EOF

# Then compile/link it:
gcc_shared_ k.c k.so \
  || framework_failure_ 'failed to build shared library'

cleanup_() { unset LD_PRELOAD; }

export LD_PRELOAD=$LD_PRELOAD:./k.so

# Test if LD_PRELOAD works:
df 2>/dev/null
test -f x || skip_ "internal test failure: maybe LD_PRELOAD doesn't work?"

# These tests are supposed to succeed:
df '.' || fail=1
df -i '.' || fail=1
df -T '.' || fail=1
df -Ti '.' || fail=1
df --total '.' || fail=1

# These tests are supposed to fail:
returns_ 1 df || fail=1
returns_ 1 df -i || fail=1
returns_ 1 df -T || fail=1
returns_ 1 df -Ti || fail=1
returns_ 1 df --total || fail=1

returns_ 1 df -a || fail=1
returns_ 1 df -a '.' || fail=1

returns_ 1 df -l || fail=1
returns_ 1 df -l '.' || fail=1

returns_ 1 df -t hello || fail=1
returns_ 1 df -t hello '.' || fail=1

returns_ 1 df -x hello || fail=1
returns_ 1 df -x hello '.' || fail=1

Exit $fail
#!/bin/sh
# Ensure that df /dev/loop0 errors out if overmounted by another device

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df
require_root_

cwd=$(pwd)
cleanup_() { cd /; umount "$cwd/mnt"; umount "$cwd/mnt"; }

skip=0

# Create 2 file systems
for i in 1 2; do
  dd if=/dev/zero of=blob$i bs=8192 count=200 > /dev/null 2>&1 \
                                             || skip=1
  mkfs -t ext2 -F blob$i \
    || skip_ "failed to create ext2 file system"
done

# Mount both at the same place (eclipsing the first)
mkdir mnt                                    || skip=1
mount -oloop blob1 mnt                       || skip=1
eclipsed_dev=$(df --o=source mnt | tail -n1) || skip=1
mount -oloop blob2 mnt                       || skip=1

test $skip = 1 \
  && skip_ "insufficient mount/ext2 support"

df . || skip_ "failed to lookup the device for the current dir"

echo "df: cannot access '$eclipsed_dev': over-mounted by another device" > exp

# We should get an error for the eclipsed device and continue
df $eclipsed_dev . > out 2> err && fail=1

# header and single entry in output
test $(wc -l < out) = 2 || fail=1

compare exp err || fail=1

test "$fail" = 1 && dump_mount_list_

Exit $fail
#!/bin/sh
# Ensure that df outputs one line per entry

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df
require_root_

mnt='mount
point'

cwd=$(pwd)
cleanup_() { cd /; umount "$cwd/$mnt"; }

skip=0
# Create a file system, then mount it.
dd if=/dev/zero of=blob bs=8192 count=200 > /dev/null 2>&1 \
                                             || skip=1
mkdir "$mnt"                                 || skip=1
mkfs -t ext2 -F blob \
  || skip_ "failed to create ext2 file system"

mount -oloop blob "$mnt"                     || skip=1

test $skip = 1 \
  && skip_ "insufficient mount/ext2 support"

test $(df "$mnt" | wc -l) = 2 || fail=1

test "$fail" = 1 && dump_mount_list_

Exit $fail
#!/bin/sh
# Test df's behavior when the mount list contains duplicate entries.
# This test is skipped on systems that lack LD_PRELOAD support; that's fine.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df
require_gcc_shared_

# We use --local here so as to not activate
# potentially very many remote mounts.
df --local || skip_ 'df fails'

export CU_NONROOT_FS=$(df --local --output=target 2>&1 | grep /. | head -n1)
export CU_REMOTE_FS=$(df --local --output=target 2>&1 | grep /. |
                      tail -n+2 | head -n1)

unique_entries=1
test -z "$CU_NONROOT_FS" || unique_entries=$(expr $unique_entries + 1)
test -z "$CU_REMOTE_FS" || unique_entries=$(expr $unique_entries + 2)

grep '^#define HAVE_MNTENT_H 1' $CONFIG_HEADER > /dev/null \
      || skip_ "no mntent.h available to confirm the interface"

grep '^#define HAVE_GETMNTENT 1' $CONFIG_HEADER > /dev/null \
      || skip_ "getmntent is not used on this system"

# Simulate an mtab file to test various cases.
cat > k.c <<EOF || framework_failure_
#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <mntent.h>
#include <string.h>
#include <dlfcn.h>

#define STREQ(a, b) (strcmp (a, b) == 0)

FILE* fopen(const char *path, const char *mode)
{
  static FILE* (*fopen_func)(char const *, char const *);

  /* get reference to original (libc provided) fopen */
  if (!fopen_func)
    {
      fopen_func = (FILE*(*)(char const *, char const *))
                   dlsym(RTLD_NEXT, "fopen");
      if (!fopen_func)
        {
          fprintf (stderr, "Failed to find fopen()\n");
          errno = ESRCH;
          return NULL;
        }
    }

  /* Returning ENOENT here will get read_file_system_list()
     to fall back to using getmntent() below.  */
  if (STREQ (path, "/proc/self/mountinfo"))
    {
      errno = ENOENT;
      return NULL;
    }
  else
    return fopen_func(path, mode);
}

#define STREQ(a, b) (strcmp (a, b) == 0)

struct mntent *getmntent (FILE *fp)
{
  static char *nonroot_fs;
  static char *remote_fs;
  static int done;

  /* Prove that LD_PRELOAD works. */
  if (!done)
    {
      fclose (fopen ("x", "w"));
      ++done;
    }

  static struct mntent mntents[] = {
    {.mnt_fsname="/short",  .mnt_dir="/invalid/mount/dir",       .mnt_opts=""},
    {.mnt_fsname="fsname",  .mnt_dir="/",                        .mnt_opts=""},
    {.mnt_fsname="/fsname", .mnt_dir="/.",                       .mnt_opts=""},
    {.mnt_fsname="/fsname", .mnt_dir="/",                        .mnt_opts=""},
    {.mnt_fsname="virtfs",  .mnt_dir="/NONROOT", .mnt_type="t1", .mnt_opts=""},
    {.mnt_fsname="virtfs2", .mnt_dir="/NONROOT", .mnt_type="t2", .mnt_opts=""},
    {.mnt_fsname="netns",   .mnt_dir="net:[1234567]",            .mnt_opts=""},
    {.mnt_fsname="rem:ote1",.mnt_dir="/REMOTE",                  .mnt_opts=""},
    {.mnt_fsname="rem:ote1",.mnt_dir="/REMOTE",                  .mnt_opts=""},
    {.mnt_fsname="rem:ote2",.mnt_dir="/REMOTE",                  .mnt_opts=""},
  };

  if (done == 1)
    {
      nonroot_fs = getenv ("CU_NONROOT_FS");
      if (!nonroot_fs || !*nonroot_fs)
        nonroot_fs = "/"; /* merge into / entries.  */

      remote_fs = getenv ("CU_REMOTE_FS");
    }

  if (done == 1 && !getenv ("CU_TEST_DUPE_INVALID"))
    done++;  /* skip the first entry.  */

  while (done++ <= 10)
    {
      if (!mntents[done-2].mnt_type)
        mntents[done-2].mnt_type = "-";
      if (!mntents[done-2].mnt_opts)
        mntents[done-2].mnt_opts = "-";
      if (STREQ (mntents[done-2].mnt_dir, "/NONROOT"))
        mntents[done-2].mnt_dir = nonroot_fs;
      if (STREQ (mntents[done-2].mnt_dir, "/REMOTE"))
        {
          if (!remote_fs || !*remote_fs)
            continue;
          else
            mntents[done-2].mnt_dir = remote_fs;
        }
      return &mntents[done-2];
    }

  return NULL;
}
EOF

# Then compile/link it:
gcc_shared_ k.c k.so \
  || framework_failure_ 'failed to build shared library'

# Test if LD_PRELOAD works:
LD_PRELOAD=$LD_PRELOAD:./k.so df
test -f x || skip_ "internal test failure: maybe LD_PRELOAD doesn't work?"

# The fake mtab file should only contain entries
# having the same device number; thus the output should
# consist of a header and unique entries.
LD_PRELOAD=$LD_PRELOAD:./k.so df -T >out || fail=1
test $(wc -l <out) -eq $(expr 1 + $unique_entries) || { fail=1; cat out; }

# With --total we should suppress the duplicate but separate remote file system
LD_PRELOAD=$LD_PRELOAD:./k.so df --total >out || fail=1
test "$CU_REMOTE_FS" && elide_remote=1 || elide_remote=0
test $(wc -l <out) -eq $(expr 2 + $unique_entries - $elide_remote) ||
  { fail=1; cat out; }

# Ensure we don't fail when unable to stat (currently) unavailable entries
LD_PRELOAD=$LD_PRELOAD:./k.so CU_TEST_DUPE_INVALID=1 df -T >out || fail=1
test $(wc -l <out) -eq $(expr 1 + $unique_entries) || { fail=1; cat out; }

# df should also prefer "/fsname" over "fsname"
if test "$unique_entries" = 2; then
  test $(grep -c '/fsname' <out) -eq 1 || { fail=1; cat out; }
  # ... and "/fsname" with '/' as Mounted on over '/.'
  test $(grep -cF '/.' <out) -eq 0 || { fail=1; cat out; }
fi

# df should use the last seen devname (mnt_fsname) and devtype (mnt_type)
test $(grep -c 'virtfs2.*t2' <out) -eq 1 || { fail=1; cat out; }

# Ensure that filtering duplicates does not affect -a processing.
LD_PRELOAD=$LD_PRELOAD:./k.so df -a >out || fail=1
total_fs=6; test "$CU_REMOTE_FS" && total_fs=$(expr $total_fs + 3)
test $(wc -l <out) -eq $total_fs || { fail=1; cat out; }
# Ensure placeholder "-" values used for the eclipsed "virtfs"
test $(grep -c 'virtfs *-' <out) -eq 1 || { fail=1; cat out; }

# Ensure that filtering duplicates does not affect
# argument processing (now without the fake getmntent()).
df '.' '.' >out || fail=1
test $(wc -l <out) -eq 3 || { fail=1; cat out; }

Exit $fail
#!/bin/sh
# Test df's behavior for skipping the pseudo "rootfs" file system.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df

# Protect against inaccessible remote mounts etc.
timeout 10 df || skip_ "df fails"

# Verify that rootfs is in mtab (and shown when the -a option is specified).
# Note this is the case when /proc/self/mountinfo is parsed
# rather than /proc/mounts.  I.e., when libmount is being used.
df -a >out || fail=1
grep '^rootfs' out || skip_ 'no rootfs in mtab'

# Ensure that rootfs is suppressed when no options is specified.
df >out || fail=1
grep '^rootfs' out && { fail=1; cat out; }

# Ensure that rootfs is yet skipped when explicitly specifying "-t rootfs".
# As df emits "no file systems processed" in this case, it would be a failure
# if df exited with status Zero.
returns_ 1 df -t rootfs >out || fail=1
grep '^rootfs' out && { fail=1; cat out; }

# Ensure that the rootfs is shown when explicitly both specifying "-t rootfs"
# and the -a option.
df -t rootfs -a >out || fail=1
grep '^rootfs' out || { fail=1; cat out; }

# Ensure that the rootfs is omitted in all_fs mode when it is explicitly
# black-listed.
df -a -x rootfs >out || fail=1
grep '^rootfs' out && { fail=1; cat out; }

test "$fail" = 1 && dump_mount_list_

Exit $fail
#!/bin/sh
# Ensure that df exits non-Zero and writes an error message when
# --total is used but no file system has been processed.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df
require_mount_list_

cat <<\EOF > exp || framework_failure_
df: no file systems processed
EOF

# Check we exit with non-Zero.
# Note we don't check when the file system can't be determined
# as -t filtering is not applied in that case.
if test "$(df --output=fstype . | tail -n1)" != '-'; then
  df -t _non_existent_fstype_ --total . 2>out && fail=1
  compare exp out || fail=1
fi

cat <<\EOF > exp || framework_failure_
df: _does_not_exist_: No such file or directory
EOF

# Ensure that df writes the error message also in the following case.
df --total _does_not_exist_ 2>out && fail=1
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure "df --total" computes accurate totals

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df
require_perl_

# Protect against inaccessible remote mounts etc.
timeout 10 df || skip_ "df fails"

cat <<\EOF > check-df || framework_failure_
my ($total, $used, $avail) = (0, 0, 0);
while (<>)
  {
    $. == 1
      and next;  # skip first (header) line
    # Recognize df output lines like these:
    # /dev/sdc1                  0       0       0    -  /c
    # tmpfs                1536000   12965 1523035    1% /tmp
    # total                5285932  787409 4498523   15% -
    /^(.*?) +(-?\d+|-) +(-?\d+|-) +(-?\d+|-) +(?:-|[0-9]+%) (.*)$/
      or die "$0: invalid input line\n: $_";
    if ($1 eq 'total' && $5 eq '-')
      {
        $total == $2 or die "$total != $2";
        $used  == $3 or die "$used  != $3";
        $avail == $4 or die "$avail != $4";
        my $line = <>;
        defined $line
          and die "$0: extra line(s) after totals\n";
        exit 0;
      }
    $total += $2 unless $2 eq '-';
    $used  += $3 unless $3 eq '-';
    $avail += $4 unless $4 eq '-';
  }
die "$0: missing line of totals\n";
EOF

# Use --block-size=512 to keep df from printing rounded-to-kilobyte
# numbers which wouldn't necessarily add up to the displayed total.
df --total -P --block-size=512 > space || framework_failure_
cat space  # this helps when debugging any test failure
df --total -i -P               > inode || framework_failure_
cat inode

$PERL check-df space || fail=1
$PERL check-df inode || fail=1

test "$fail" = 1 && dump_mount_list_

Exit $fail
#!/bin/sh
# ensure that df can handle an unreadable argument

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ df
skip_if_root_

touch unreadable || fail=1
chmod a-r unreadable || fail=1
df unreadable || fail=1

test "$fail" = 1 && dump_mount_list_

Exit $fail
#!/bin/sh
# Ensure that du can handle a 2GB file (i.e., a file of size 2^31 bytes)
# Before coreutils-5.93, on systems with a signed, 32-bit stat.st_blocks
# one of du's computations would overflow.

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

# Creating a 2GB file counts as 'very expensive'.
very_expensive_

# Get number of free kilobytes on current partition, so we can
# skip this test if there is insufficient free space.
free_kb=$(df -k --output=avail . | tail -n1)
case "$free_kb" in
  [0-9]*) ;;
  *) skip_ "invalid size from df: $free_kb";;
esac

# Require about 3GB free.
min_kb=3000000
test $min_kb -lt $free_kb ||
{
  skip_ \
    "too little free space on current partition: $free_kb (need $min_kb KB)"
}

big=big

if ! fallocate -l2G $big; then
  rm -f $big
  {
    is_local_dir_ . || skip 'Not writing 2GB data to remote'
    for i in $(seq 100); do
      # Note: 2147483648 == 2^31. Print floor(2^31/100) per iteration.
      printf %21474836s x || fail=1
    done
    # After the final iteration, append the remaining 48 bytes.
    printf %48s x || fail=1
  } > $big || fail=1
fi

# The allocation may be done asynchronously (BTRFS for example)
sync $big || framework_failure_

du -k $big > out1 || fail=1
rm -f $big
sed 's/^2[0-9][0-9][0-9][0-9][0-9][0-9]	'$big'$/~2M/' out1 > out

cat <<\EOF > exp || fail=1
~2M
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that du does not rely on narrow types like size_t for
# file sizes or sums.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du
require_sparse_support_

dd bs=1 seek=8G of=big < /dev/null 2> /dev/null
if test $? != 0; then
  skip_ 'cannot create a file large enough for this test; possibly
because file offsets are only 32 bits on this file system'
fi

# FIXME: this should be a test of dd.
# On some systems (at least linux-2.4.18 + NFS to disks on a Solaris system)
# the 'dd' command above mistakenly creates a file of length '0', yet
# doesn't fail.  The root of that failure is that the ftruncate call
# returns zero but doesn't do its job.  Detect this failure.
set x $(ls -gG big)
size=$4
if test "$size" = 0; then
  skip_ "cannot create a file large enough for this test
possibly because this system's NFS support is buggy
Consider rerunning this test on a different file system."
fi


# This would print '0	big' with coreutils-4.5.8.
du -ab big > out || fail=1

cat <<\EOF > exp
8589934592	big
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Compare actual numbers from du, assuming block size matches mine.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

mkdir -p a/b d d/sub || framework_failure_

# Ensure that these files contain more than 64 bytes, so that we don't
# immediately disqualify file systems (e.g., NetApp) on which smaller
# files take up zero disk blocks.
printf '%*s' 257 make-sure-the-file-is-non-empty > a/b/F || framework_failure_
printf %4096s x > d/1
cp d/1 d/sub/2


B=$(stat --format=%B a/b/F)

du --block-size=$B -a a > out || fail=1
echo === >> out
du --block-size=$B -a -S a >> out || fail=1
echo === >> out
du --block-size=$B -s a >> out || fail=1

f=$(stat --format=%b a/b/F)
b=$(stat --format=%b a/b)
a=$(stat --format=%b a)
bf=$(expr $b + $f)
tot=$(expr $bf + $a)

cat <<EOF | sed 's/ *#.*//' > exp
$f	a/b/F
$bf	a/b
$tot	a
===
$f	a/b/F   # size of file, a/b/F
$bf	a/b     # size of dir entry, a/b, + size of file, a/b/F
$a	a       # size of dir entry, a
===
$tot	a
EOF

compare exp out || fail=1

# Perform this test only if "." is on a local file system.
# Otherwise, it would fail e.g., on an NFS-mounted Solaris ZFS file system.
if is_local_dir_ .; then
  rm -f out exp
  du --block-size=$B -a d | sort -r -k2,2 > out || fail=1
  echo === >> out
  du --block-size=$B -S d | sort -r -k2,2 >> out || fail=1

  t2=$(stat --format=%b d/sub/2)
  ts=$(stat --format=%b d/sub)
  t1=$(stat --format=%b d/1)
  td=$(stat --format=%b d)
  tot=$(expr $t1 + $t2 + $ts + $td)
  d1=$(expr $td + $t1)
  s2=$(expr $ts + $t2)

  cat <<EOF | sed 's/ *#.*//' > exp
$t2	d/sub/2
$s2	d/sub
$t1	d/1
$tot	d
===
$s2	d/sub
$d1	d           # d + d/1; don't count the dir. entry for d/sub
EOF

  compare exp out || fail=1
fi

Exit $fail
#!/bin/sh
# Exercise du on a file with a big time stamp.

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

export LC_ALL=C
export TZ=UTC0

# 2**63 - 1
bignum=9223372036854775807

touch -d @$bignum future 2>/dev/null &&
future_time=$(ls -l future) &&
case "$future_time" in
*" $bignum "*)
  : ;;
*' Dec  4  300627798676 '*)
  skip_ "file system and localtime both handle big timestamps" ;;
*)
  skip_ "file system or localtime mishandles big time stamps:" \
      "$future_time" ;;
esac || skip_ "file system cannot represent big time stamps"

printf "0\t$bignum\tfuture\n" > exp || framework_failure_
printf "du: time '$bignum' is out of range\n" > err_ok || framework_failure_

du --time future >out 2>err || fail=1

# On some systems an empty file occupies 4 blocks.
# Map the number of blocks to 0.
sed 's/^[0-9][0-9]*/0/' out > k && mv k out

compare exp out || fail=1
compare err err_ok || fail=1

Exit $fail
#!/bin/sh
# Check that du can handle sub-bind-mounts cycles as well.

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du
require_root_

cleanup_() { umount a/b/c; }

mkdir -p a/b/c || framework_failure_
mount --bind a a/b/c \
  || skip_ 'This test requires mount with a working --bind option.'

echo a/b/c > exp || framework_failure_
echo a/b >> exp || framework_failure_

du a/b > out 2> err || fail=1
sed 's/^[0-9][0-9]*	//' out > k && mv k out

compare /dev/null err || fail=1
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Exercise du's new ability to handle bind-mount-induced dir cycles.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du
require_root_

cleanup_() { umount a/b; }

mkdir -p a/b || framework_failure_
mount --bind a a/b \
  || skip_ "This test requires mount with a working --bind option."

echo a > exp || framework_failure_

du a > out 2> err || fail=1
sed 's/^[0-9][0-9]*	//' out > k && mv k out

compare /dev/null err || fail=1
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that --dereference-args (-D) gives reasonable names.
# This test would fail for coreutils-5.0.91.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

mkdir -p dir/a || framework_failure_
ln -s dir slink || framework_failure_
printf %65536s x > 64k || framework_failure_
ln -s 64k slink-to-64k || framework_failure_


du -D slink | sed 's/^[0-9][0-9]*	//' > out
# Ensure that the trailing slash is preserved and handled properly.
du -D slink/ | sed 's/^[0-9][0-9]*	//' >> out

# Ensure that -D makes du dereference even symlinks to non-directories.
# Be sure to use --apparent-size.  Otherwise, we'd get varying block counts
# depending on file system type (e.g. 68 on ext3 vs. 64 on tmpfs and 72
# on SELinux-enabled systems).
du --apparent-size --block-size=1K -D slink-to-64k >> out
cat <<\EOF > exp
slink/a
slink
slink/a
slink/
64	slink-to-64k
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# prior to coreutils-4.5.3, du -D didn't work in some cases
# Based on an example from Andreas Schwab and/or Michal Svec.
# Also, up to coreutils-8.5, du -L sometimes incorrectly
# counted the space of the followed symlinks.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

mkdir -p a/sub || framework_failure_
ln -s a/sub slink || framework_failure_
touch b || framework_failure_
ln -s .. a/sub/dotdot || framework_failure_
ln -s nowhere dangle || framework_failure_


# This used to fail with the following diagnostic:
# du: 'b': No such file or directory
du -sD slink b > /dev/null 2>&1 || fail=1

# This used to fail to report the dangling symlink.
returns_ 1 du -L dangle > /dev/null 2>&1 || fail=1

# du -L used to mess up, either by counting the symlink's disk space itself
# (-L should follow symlinks, not count their space)
# or (briefly in July 2010) by omitting the entry for "a".
du_L_output=$(du -L a) || fail=1
du_lL_output=$(du -lL a) || fail=1
du_x_output=$(du --exclude=dotdot a) || fail=1
test "X$du_L_output" = "X$du_x_output" || fail=1
test "X$du_lL_output" = "X$du_x_output" || fail=1

Exit $fail
#!/bin/sh
# make sure du's --exclude option works

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

mkdir -p a/b/c a/x/y a/u/v || framework_failure_


du --exclude=x a | sed 's/^[0-9][0-9]*	//' | sort > out || fail=1
printf '===\n' >> out
printf 'b\n' > excl
du --exclude-from=excl a | sed 's/^[0-9][0-9]*	//' | sort >> out || fail=1
printf '===\n' >> out
# Make sure that we can exclude an entire hierarchy.
du --exclude=a a >> out || fail=1
# Make sure that we can exclude based on more than one component.
# Before coreutils-5.3.0, this part would fail.
printf '===\n' >> out
du --exclude=a/u --exclude=a/b a \
  | sed 's/^[0-9][0-9]*	//' | sort >> out || fail=1
cat <<\EOF > exp
a
a/b
a/b/c
a/u
a/u/v
===
a
a/u
a/u/v
a/x
a/x/y
===
===
a
a/x
a/x/y
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# check for file descriptor leak

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

# Call this an expensive test.  It's not that expensive, but command line
# limitations might induce failure on some losing systems.
expensive_

# Create 1296 (36^2) files.
# Their names and separating spaces take up 3887 bytes.
x='a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9'
f=
for i in $x; do
  for j in $x; do
    f="$f $i$j"
  done
done

# This may fail due to command line limitations.
touch $f || framework_failure_


# With coreutils-5.0, this would fail due to a file descriptor leak.
du $f > out || fail=1

Exit $fail
#!/bin/sh
# ensure that du and wc handle --files0-from=DIR

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du wc

mkdir dir

# Skip this test if reading from a directory succeeds.
# In that case, using --files0-from=dir would yield garbage,
# interpreting the directory entry as a sequence of
# NUL-separated file names.
cat dir > /dev/null && skip_ "cat dir/ succeeds"

for prog in du wc; do
  $prog --files0-from=dir > /dev/null 2>err && fail=1
  printf "$prog: dir:\n" > exp || fail=1
  # The diagnostic string is usually "Is a directory" (ENOTDIR),
  # but accept a different string or errno value.
  sed "s/dir:.*/dir:/" err > k; mv k err
  compare exp err || fail=1
done

Exit $fail
#!/bin/sh
# Ensure that hard-linked files are counted (and listed) only once.
# Likewise for excluded directories.
# Ensure that hard links _are_ listed twice when using --count-links.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

mkdir -p dir/sub
( cd dir &&
  { echo non-empty > f1
    ln f1 f2
    ln -s f1 f3
    echo non-empty > sub/F; } )

du -a -L --exclude=sub --count-links dir \
  | sed 's/^[0-9][0-9]*	//' | sort -r > out || fail=1

# For these tests, transform f1 or f2 or f3 (whichever name is find
# first) to f_.  That is necessary because, depending on the type of
# file system, du could encounter any of those linked files first,
# thus listing that one and not the others.
for args in '-L' 'dir' '-L dir'
do
  echo === >> out
  du -a --exclude=sub $args dir \
    | sed 's/^[0-9][0-9]*	//' | sed 's/f[123]/f_/' >> out || fail=1
done

cat <<\EOF > exp
dir/f3
dir/f2
dir/f1
dir
===
dir/f_
dir
===
dir/f_
dir/f_
dir
===
dir/f_
dir
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Prior to coreutils-6.5, an inaccessible destination dir (chmod a-x)
# would cause du to exit prematurely on systems with native openat support.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du
skip_if_root_

mkdir f && cd f && mkdir a b c d e && touch c/j && chmod a-x c \
    || framework_failure_

du > ../t 2>&1 && fail=1

# Accept either of the following outputs.
# You get the first from a system with openat _emulation_ (via /proc),
# the second from a system with native openat support.
# FIXME: there may well be a third output, for systems with neither
# /proc support, nor native openat support.

sed 's/^[0-9][0-9]*	//' ../t | sort -u > out
cat <<\EOF > exp || fail=1
.
./a
./b
./c
./d
./e
du: cannot read directory './c': Permission denied
EOF

# Map a diagnostic like this
#   du: cannot access './c/j': Permission denied
# to this:
#   du: cannot access './c': Permission denied
# And accept "cannot read directory" in place of "cannot access"
sed "s,/c/j': ,/c': ," out > t && mv t out
sed 's,cannot access,cannot read directory,' out > t && mv t out

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that du counts the size of an inaccessible directory.
# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du
skip_if_root_

mkdir -p a/sub || framework_failure_


du -s a > exp || fail=1
chmod 0 a/sub || fail=1
# Expect failure, ignore diagnostics.
du -s a > out 2> /dev/null && fail=1

compare exp out || fail=1

# Same as above, but don't use -s, so we print
# an entry for the unreadable "sub", too.
chmod 700 a/sub || fail=1
du -k a > exp || fail=1
chmod 0 a/sub || fail=1
# Expect failure, ignore diagnostics.
du -k a > out 2> /dev/null && fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that even when run from an inaccessible directory, du can still
# operate on accessible directories elsewhere.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Before the switch to an fts-based implementation in coreutils 5.0.92,
# this test would fail.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

# Skip this test if your system has neither the openat-style functions
# nor /proc/self/fd support with which to emulate them.
require_openat_support_

skip_if_root_

cwd=$(pwd)
mkdir -p no-x a/b || framework_failure_
cd no-x || framework_failure_
chmod 0 . || framework_failure_


du "$cwd/a" > /dev/null || fail=1

Exit $fail
#!/bin/sh
# exercise du's --inodes option

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

# An empty directory uses only 1 inode.
mkdir d || framework_failure_
printf '1\td\n' > exp || framework_failure_

du --inodes d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Add a regular file: 2 inodes used.
touch d/f || framework_failure_
printf '2\td\n' > exp || framework_failure_

du --inodes d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Add a hardlink to the file: still only 2 inodes used.
ln -v d/f d/h || framework_failure_
du --inodes d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Now count also hardlinks (-l,--count-links): 3 inodes.
printf '3\td\n' > exp || framework_failure_
du --inodes -l d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Create a directory and summarize: 3 inodes.
mkdir d/d || framework_failure_
du --inodes -s d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Count inodes separated: 1-2.
printf '1\td/d\n2\td\n' > exp || framework_failure_
du --inodes -S d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Count inodes cumulative (default): 1-3.
printf '1\td/d\n3\td\n' > exp || framework_failure_
du --inodes d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Count all items: 1-1-3.
# Sort output because the directory entry order is not defined.
# Also replace the hardlink with the original file name because
# the system may either return 'd/f' or 'd/h' first, and du(1)
# will ignore the other one.
printf '1\td/d\n1\td/f\n3\td\n' | sort > exp || framework_failure_
du --inodes -a d > out.tmp 2>err || fail=1
sed 's/h$/f/' out.tmp | sort >out || framework_failure_
compare exp out || fail=1
compare /dev/null err || fail=1

# Count all items and hardlinks again: 1-1-1-4
# Sort output because the directory entry order is not defined.
printf '1\td/d\n1\td/h\n1\td/f\n4\td\n' | sort > exp || framework_failure_
du --inodes -al d > out.tmp 2>err || fail=1
sort <out.tmp >out || framework_failure_
compare exp out || fail=1
compare /dev/null err || fail=1

# Run with total (-c) line: 1-3-3
printf '1\td/d\n3\td\n3\ttotal\n' > exp || framework_failure_
du --inodes -c d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Create another file in the subdirectory: 2-4
touch d/d/f || framework_failure_
printf '2\td/d\n4\td\n' > exp || framework_failure_
du --inodes d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Ensure human output (-h, --si) works.
rm -rf d || framework_failure_
mkdir d || framework_failure_
seq --format="d/file%g" 1023 | xargs touch || framework_failure_
printf '1.0K\td\n' > exp || framework_failure_
du --inodes -h d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

printf '1.1k\td\n' > exp || framework_failure_
du --inodes --si d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Verify --inodes ignores -B.
printf '1024\td\n' > exp || framework_failure_
du --inodes -B10 d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Verify --inodes works with --threshold.
printf '1024\td\n' > exp || framework_failure_
du --inodes --threshold=1000 d > out 2>err || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

du --inodes --threshold=-1000 d > out 2>err || fail=1
compare /dev/null out || fail=1
compare /dev/null err || fail=1

# Verify --inodes raises a warning for --apparent-size and -b.
du --inodes -b d > out 2>err || fail=1
grep ' ineffective ' err >/dev/null || { fail=1; cat out err; }

du --inodes --apparent-size d > out 2>err || fail=1
grep ' ineffective ' err >/dev/null || { fail=1; cat out err; }

# Ensure that --inodes is mentioned in the usage.
du --help > out || fail=1
grep ' --inodes ' out >/dev/null || { fail=1; cat out; }
Exit $fail
#!/bin/sh
# Show fts fails on old-fashioned systems.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Show that fts (hence du, chmod, chgrp, chown) fails when all of the
# following are true:
#   - '.' is not readable
#   - operating on a hierarchy containing a relative name longer than PATH_MAX
#   - run on a system where gnulib's openat emulation must resort to using
#       save_cwd and restore_cwd (which fail if '.' is not readable).
# Thus, the following du invocation should succeed on newer Linux and
# Solaris systems, yet it must fail on systems lacking both openat and
# /proc support.  However, before coreutils-6.0 this test would fail even
# on Linux+PROC_FS systems because its fts implementation would revert
# unnecessarily to using FTS_NOCHDIR mode in this corner case.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

# ecryptfs for example uses some of the file name space
# for encrypting filenames, so we must check dynamically.
name_max=$(stat -f -c %l .)
test "$name_max" -ge '200' || skip_ "NAME_MAX=$name_max is not sufficient"

proc_file=/proc/self/fd
if test ! -d $proc_file; then
  skip_ 'This test would fail, since your system lacks /proc support.'
fi

dir=$(printf '%200s\n' ' '|tr ' ' x)

# Construct a hierarchy containing a relative file with a name
# longer than PATH_MAX.
# for i in $(seq 52); do
#   mkdir $dir || framework_failure_
#   cd $dir || framework_failure_
# done
# cd $tmp || framework_failure_

# Sheesh.  Bash 3.1.5 can't create this hierarchy.  I get
#   cd: error retrieving current directory: getcwd:
#     cannot access parent directories:
# (all on one line).

cwd=$(pwd)
# Use perl instead:
: ${PERL=perl}
$PERL \
    -e 'my $d = '$dir'; foreach my $i (1..52)' \
    -e '  { mkdir ($d, 0700) && chdir $d or die "$!" }' \
  || framework_failure_

mkdir inaccessible || framework_failure_
cd inaccessible || framework_failure_
chmod 0 . || framework_failure_

du -s "$cwd/$dir" > /dev/null || fail=1

Exit $fail
#!/bin/sh
# Use du to exercise a corner of fts's FTS_LOGICAL code.
# Show that du fails with ELOOP (Too many levels of symbolic links)
# when it encounters that condition.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

# Create lots of directories, each containing a single symlink
# pointing at the next directory in the list.

# This number should be larger than the number of symlinks allowed in
# file name resolution, but not too large as a number of entries
# in a single directory.
n=400

dir_list=$(seq $n)
mkdir $dir_list || framework_failure_
file=1
i_minus_1=0
for i in $dir_list $(expr $n + 1); do
  case $i_minus_1 in
  0) ;;
  *)
    ln -s ../$i $i_minus_1/s || framework_failure_
    file=$file/s;;
  esac
  i_minus_1=$i
done
echo foo > $i

# If a system can handle this many symlinks in a file name,
# just skip this test.

# The following also serves to record in 'err' the string
# corresponding to strerror (ELOOP).  This is necessary because while
# Linux/libc gives 'Too many levels of symbolic links', Solaris
# renders it as "Number of symbolic links encountered during path
# name traversal exceeds MAXSYMLINKS".

cat $file > /dev/null 2> err &&
    skip_ 'Your system appears to be able to handle more than $n symlinks
in file name resolution'
too_many=$(sed 's/.*: //' err)


# With coreutils-5.93 there was no failure.
# With coreutils-5.94 we get the desired diagnostic:
# du: cannot access '1/s/s/s/.../s': Too many levels of symbolic links
du -L 1 > /dev/null 2> out1 && fail=1
sed "s, .1/s/s/s/[/s]*',," out1 > out || fail=1

echo "du: cannot access: $too_many" > exp || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# exercise du's --max-depth=N option

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

mkdir -p a/b/c/d/e || framework_failure_
printf 'a/b/c\na/b\na\n' > exp || framework_failure_

du --max-depth=2 a > out 2>err || fail=1

# Remove the sizes.  They vary between file systems.
cut -f2- out > k && mv k out
compare exp out || fail=1
compare /dev/null err || fail=1

# Repeat, but use -d 1.
printf 'a/b\na\n' > exp || framework_failure_
du -d 1 a > out 2>err || fail=1
cut -f2- out > k && mv k out
compare exp out || fail=1
compare /dev/null err || fail=1

Exit $fail
#!/bin/sh
# Trigger a failed assertion in coreutils-8.9 and earlier.

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du
require_trap_signame_

# We use a python-inotify script, so...
python -m pyinotify -h > /dev/null \
  || skip_ 'python inotify package not installed'

# Move a directory "up" while du is processing its sub-directories.
# While du is processing a hierarchy .../B/C/D/... this script
# detects when du opens D/, and then moves C/ "up" one level
# so that it is a sibling of B/.
# Given the inherent race condition, we have to add enough "weight"
# under D/ so that in most cases, the monitor performs the single
# rename syscall before du finishes processing the subtree under D/.

cat <<'EOF' > inotify-watch-for-dir-access.py
#!/usr/bin/env python
import pyinotify as pn
import os,sys

dir = sys.argv[1]
dest_parent = os.path.dirname(os.path.dirname(dir))
dest = os.path.join(dest_parent, os.path.basename(dir))

class ProcessDir(pn.ProcessEvent):

    def process_IN_OPEN(self, event):
        os.rename(dir, dest)
        sys.exit(0)

    def process_default(self, event):
        pass

wm = pn.WatchManager()
notifier = pn.Notifier(wm)
wm.watch_transient_file(dir, pn.IN_OPEN, ProcessDir)
sys.stdout.write('started\n')
sys.stdout.flush()
notifier.loop()
EOF
chmod a+x inotify-watch-for-dir-access.py

t=T/U
mkdir d2 || framework_failure_
long=d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z
# One iteration of this loop creates a tree with which
# du sometimes completes its traversal before the above rename.
# Five iterations was not enough in 2 of 7 "make -j20 check" runs on a
# 6/12-core system.  However, using "10", I saw no failure in 20 trials.
# Using 10 iterations was not enough, either.
# Using 50, I saw no failure in 200 trials.
for i in $(seq 50); do
  mkdir -p $t/3/a/b/c/$i/$long || framework_failure_
done

# Terminate any background cp process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Prohibit suspension, which could otherwise cause a timeout-induced FP failure.
trap '' TSTP

timeout 6 ./inotify-watch-for-dir-access.py $t/3/a/b > start-msg & pid=$!

# Wait for the watcher to start...
nonempty() { sleep $1; test -s start-msg; }
retry_delay_ nonempty .1 5 || fail=1

# The above watches for an IN_OPEN event on $t/3/a/b,
# and when it triggers, moves the parent, $t/3/a, up one level
# so it's directly under $t.

du -a $t d2 2> err
# Before coreutils-8.10, du would abort.
test $? = 1 || fail=1

# check for the new diagnostic
printf "du: fts_read failed: $t/3/a/b: No such file or directory\n" > exp \
  || fail=1
compare exp err || fail=1

Exit $fail
#!/bin/sh
# Ensure that by default, du doesn't dereference command-line symlinks.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

mkdir -p dir/a/b || framework_failure_
ln -s dir slink || framework_failure_


du slink | sed 's/^[0-9][0-9]*	//' > out
cat <<\EOF > exp
slink
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Make sure du gives the right diagnostic for a readable,
# but inaccessible directory.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du
skip_if_root_

mkdir -p d/no-x/y || framework_failure_
chmod u=rw d/no-x || framework_failure_


# This must exit nonzero.
du d >/dev/null 2>out && fail=1

prog=du
# NOTE: this code is the same for all tests/*/no-x tests.
# Depending on whether fts is using native fdopendir, we see one
# of the following diagnostics (note also the /y suffix in one case):
#   prog: 'd/no-x': Permission denied
#   prog: cannot access 'd/no-x/y': Permission denied
#   prog: cannot read directory 'd/no-x': Permission denied
# Convert either of the latter two to the first one.
sed "s/^$prog: cannot access /$prog: /" out > t && mv t out
sed "s/^$prog: cannot read directory /$prog: /" out > t && mv t out
sed 's,d/no-x/y,d/no-x,' out > t && mv t out

cat <<EOF > exp
$prog: 'd/no-x': Permission denied
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test for bugs in du's --one-file-system (-x) option.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

mkdir -p b/c y/z d "$other_partition_tmpdir/x" || framework_failure_
ln -s "$other_partition_tmpdir/x" d || framework_failure_

# Due to a used-uninitialized variable, the "du -x" from coreutils-6.6
# would not traverse into second and subsequent directories listed
# on the command line.
du -ax b y > t || fail=1
sed 's/^[0-9][0-9]*	//' t > out
cat <<\EOF > exp || fail=1
b/c
b
y/z
y
EOF

compare exp out || fail=1

# "du -xL" reported a zero count for a file in a different file system,
# instead of ignoring it.
du -xL d > u || fail=1
sed 's/^[0-9][0-9]*	//' u > out1
echo d > exp1 || fail=1
compare exp1 out1 || fail=1

# With coreutils-8.15, "du -xs FILE" would print no output.
touch f
for opt in -x -xs; do
  du $opt f > u || fail=1
  sed 's/^[0-9][0-9]*	//' u > out2
  echo f > exp2 || fail=1
  compare exp2 out2 || fail=1
done

Exit $fail
#!/bin/sh
# due to a bug in glibc's ftw.c, in some cases, nftw w/FTW_CHDIR
# would not restore the working directory.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

mkdir a b || framework_failure_


# With du from coreutils-4.5.5 and 4.5.6, this would fail with
# du: 'b': No such file or directory

du a b > out || fail=1

Exit $fail
#!/bin/sh
# 'du /' would omit the '/' on the last line.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du
require_readable_root_


du --exclude='[^/]*' -x / > out-t || fail=1
sed 's/^[0-9][0-9]*	//' out-t > out
rm -f out-t
cat <<\EOF > exp
/
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Exercise du's --threshold option.

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

mkdir -p a/b a/c || framework_failure_

touch            a/b/0 || framework_failure_
printf '%1s' x > a/b/1 || framework_failure_
printf '%2s' x > a/b/2 || framework_failure_
printf '%3s' x > a/b/3 || framework_failure_

Ba=$(stat --format="%B * %b" a     | xargs expr)
Bb=$(stat --format="%B * %b" a/b   | xargs expr)
Bc=$(stat --format="%B * %b" a/c   | xargs expr)
B0=$(stat --format="%B * %b" a/b/0 | xargs expr)
B1=$(stat --format="%B * %b" a/b/1 | xargs expr)
B2=$(stat --format="%B * %b" a/b/2 | xargs expr)
B3=$(stat --format="%B * %b" a/b/3 | xargs expr)

Sa=$(stat --format=%s a    )
Sb=$(stat --format=%s a/b  )
Sc=$(stat --format=%s a/c  )
S0=$(stat --format=%s a/b/0)
S1=$(stat --format=%s a/b/1)
S2=$(stat --format=%s a/b/2)
S3=$(stat --format=%s a/b/3)

Bb0123=$(expr $Bb + $B0 + $B1 + $B2 + $B3)
Sb0123=$(expr $Sb + $S0 + $S1 + $S2 + $S3)

Bab0123=$(expr $Ba + $Bc + $Bb0123)
Sab0123=$(expr $Sa + $Sc + $Sb0123)

# Sanity checks
test $Ba -gt 4 || skip_ "block size of a directory is smaller than 4 bytes"
test $Bc -gt 4 || skip_ "block size of an empty directory is smaller than 4 \
bytes"
test $Sa -gt 4 || skip_ "apparent size of a directory is smaller than 4 bytes"
test $B1 -gt 4 || skip_ "block size of small file smaller than 4 bytes"
test $S3 -eq 3 || framework_failure_
test $S2 -eq 2 || framework_failure_
test $S1 -eq 1 || framework_failure_
test $S0 -eq 0 || framework_failure_
test $B0 -eq 0 || skip_ "block size of an empty file unequal Zero"
# block size of a/b/1 == a/b/2
test $B1 -eq $B2 || framework_failure_
# a is bigger than a/b.
test $Sab0123 -gt $Sb0123 || framework_failure_
test $Bab0123 -gt $Bb0123 || framework_failure_
# a/b is bigger than empty a/c.
test $Sb0123 -gt $Sc || framework_failure_
test $Bb0123 -gt $Bc || framework_failure_

# Exercise a bad argument: unparsable number.
cat <<EOF > exp
du: invalid --threshold argument 'SIZE'
EOF
du --threshold=SIZE a > out 2>&1 && fail=1
compare exp out || fail=1

cat <<EOF > exp
du: invalid -t argument 'SIZE'
EOF
du -t SIZE a > out 2>&1 && fail=1
compare exp out || fail=1

# Exercise a bad argument: -0 is not valid.
cat <<EOF > exp
du: invalid --threshold argument '-0'
EOF
du --threshold=-0 a > out 2>&1 && fail=1
compare exp out || fail=1

du -t -0 a > out 2>&1 && fail=1
compare exp out || fail=1

du -t-0 a > out 2>&1 && fail=1
compare exp out || fail=1

# Exercise a bad argument: empty argument.
cat <<EOF > exp
du: invalid --threshold argument ''
EOF
du --threshold= a > out 2>&1 && fail=1
compare exp out || fail=1

# Exercise a bad argument: no argument.
du --threshold > out.tmp 2>&1 && fail=1
sed 's/argument.*/argument/; s/option.*requires/option requires/' \
  < out.tmp > out || framework_failure_
cat <<EOF > exp
du: option requires an argument
Try 'du --help' for more information.
EOF
compare exp out || fail=1
rm -f out

dutest ()
{
  args="$1"
  exp="$2"

  rm -f exp out

  # Expected output.
  if [ "$exp" = "" ] ; then
    touch exp
  else
    printf "%s\n" $exp > exp
  fi

  rc=0
  du -B1 $args a > out1 2>&1 || { cat out1 ; rc=1 ; }

  # Remove the size column and sort the output.
  cut -f2- out1 | sort > out || framework_failure_

  compare exp out || { cat out1 ; rc=1 ; }
  return $rc
}

# Check numbers around the total size of the main directory 'a'.
# One byte greater than 'a'.
s=$(expr $Sab0123 + 1)  # apparent size
dutest "--app       -t $s"  ''                                  || fail=1
dutest "--app -a    -t $s"  ''                                  || fail=1
dutest "--app    -S -t $s"  ''                                  || fail=1
dutest "--app -a -S -t $s"  ''                                  || fail=1
dutest "--app       -t -$s" 'a a/b a/c'                         || fail=1
dutest "--app -a    -t -$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1
dutest "--app    -S -t -$s" 'a a/b a/c'                         || fail=1
dutest "--app -a -S -t -$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1
s=$(expr $Bab0123 + 1)  # block size
dutest "            -t $s"  ''                                  || fail=1
dutest "      -a    -t $s"  ''                                  || fail=1
dutest "         -S -t $s"  ''                                  || fail=1
dutest "      -a -S -t $s"  ''                                  || fail=1
dutest "            -t -$s" 'a a/b a/c'                         || fail=1
dutest "      -a    -t -$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1
dutest "         -S -t -$s" 'a a/b a/c'                         || fail=1
dutest "      -a -S -t -$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1

# Exactly the size of 'a'.
s=$Sab0123  # apparent size
dutest "--app       --th=$s"  'a'                                 || fail=1
dutest "--app -a    --th=$s"  'a'                                 || fail=1
dutest "--app    -S --th=$s"  ''                                  || fail=1
dutest "--app -a -S --th=$s"  ''                                  || fail=1
dutest "--app       --th=-$s" 'a a/b a/c'                         || fail=1
dutest "--app -a    --th=-$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1
dutest "--app    -S --th=-$s" 'a a/b a/c'                         || fail=1
dutest "--app -a -S --th=-$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1
s=$Bab0123  # block size
dutest "            --th=$s"  'a'                                 || fail=1
dutest "      -a    --th=$s"  'a'                                 || fail=1
dutest "         -S --th=$s"  ''                                  || fail=1
dutest "      -a -S --th=$s"  ''                                  || fail=1
dutest "            --th=-$s" 'a a/b a/c'                         || fail=1
dutest "      -a    --th=-$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1
dutest "         -S --th=-$s" 'a a/b a/c'                         || fail=1
dutest "      -a -S --th=-$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1

# One byte smaller than 'a'.
s=$(expr $Sab0123 - 1)  # apparent size
dutest "--app       --th=$s"  'a'                                 || fail=1
dutest "--app -a    --th=$s"  'a'                                 || fail=1
dutest "--app    -S --th=$s"  ''                                  || fail=1
dutest "--app -a -S --th=$s"  ''                                  || fail=1
dutest "--app       --th=-$s" 'a/b a/c'                           || fail=1
dutest "--app -a    --th=-$s" 'a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'   || fail=1
dutest "--app    -S --th=-$s" 'a a/b a/c'                         || fail=1
dutest "--app -a -S --th=-$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1
s=$(expr $Bab0123 - 1)  # block size
dutest "            --th=$s"  'a'                                 || fail=1
dutest "      -a    --th=$s"  'a'                                 || fail=1
dutest "         -S --th=$s"  ''                                  || fail=1
dutest "      -a -S --th=$s"  ''                                  || fail=1
dutest "            --th=-$s" 'a/b a/c'                           || fail=1
dutest "      -a    --th=-$s" 'a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'   || fail=1
dutest "         -S --th=-$s" 'a a/b a/c'                         || fail=1
dutest "      -a -S --th=-$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1


# Check numbers around the total size of the sub directory 'a/b'.
# One byte greater than 'a/b'.
s=$(expr $Sb0123 + 1)  # apparent size
dutest "--app       --th=$s"  'a'                                 || fail=1
dutest "--app -a    --th=$s"  'a'                                 || fail=1
dutest "--app    -S --th=$s"  ''                                  || fail=1
dutest "--app -a -S --th=$s"  ''                                  || fail=1
dutest "--app       --th=-$s" 'a/b a/c'                           || fail=1
dutest "--app -a    --th=-$s" 'a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'   || fail=1
dutest "--app    -S --th=-$s" 'a a/b a/c'                         || fail=1
dutest "--app -a -S --th=-$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c' || fail=1
s=$(expr $Bb0123 + 1)  # block size
dutest "            --th=$s"  'a'                                  || fail=1
dutest "      -a    --th=$s"  'a'                                  || fail=1
dutest "         -S --th=$s"  ''                                   || fail=1
dutest "      -a -S --th=$s"  ''                                   || fail=1
dutest "            --th=-$s" 'a/b a/c'                            || fail=1
dutest "      -a    --th=-$s" 'a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'    || fail=1
dutest "         -S --th=-$s" 'a a/b a/c'                          || fail=1
dutest "      -a -S --th=-$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'  || fail=1

# Exactly the size of 'a/b'.
s=$Sb0123  # apparent size
dutest "--app       --th=$s"  'a a/b'                              || fail=1
dutest "--app -a    --th=$s"  'a a/b'                              || fail=1
dutest "--app    -S --th=$s"  'a/b'                                || fail=1
dutest "--app -a -S --th=$s"  'a/b'                                || fail=1
dutest "--app       --th=-$s" 'a/b a/c'                            || fail=1
dutest "--app -a    --th=-$s" 'a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'    || fail=1
dutest "--app    -S --th=-$s" 'a a/b a/c'                          || fail=1
dutest "--app -a -S --th=-$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'  || fail=1
s=$Bb0123  # block size
dutest "            --th=$s"  'a a/b'                              || fail=1
dutest "      -a    --th=$s"  'a a/b'                              || fail=1
dutest "         -S --th=$s"  'a/b'                                || fail=1
dutest "      -a -S --th=$s"  'a/b'                                || fail=1
dutest "            --th=-$s" 'a/b a/c'                            || fail=1
dutest "      -a    --th=-$s" 'a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'    || fail=1
dutest "         -S --th=-$s" 'a a/b a/c'                          || fail=1
dutest "      -a -S --th=-$s" 'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'  || fail=1

# One byte smaller than 'a/b'.
s=$(expr $Sb0123 - 1)  # apparent size
dutest "--app       --th=$s"  'a a/b'                              || fail=1
dutest "--app -a    --th=$s"  'a a/b'                              || fail=1
dutest "--app    -S --th=$s"  'a/b'                                || fail=1
dutest "--app -a -S --th=$s"  'a/b'                                || fail=1
dutest "--app       --th=-$s" 'a/c'                                || fail=1
dutest "--app -a    --th=-$s" 'a/b/0 a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "--app    -S --th=-$s" 'a a/c'                              || fail=1
dutest "--app -a -S --th=-$s" 'a a/b/0 a/b/1 a/b/2 a/b/3 a/c'      || fail=1
s=$(expr $Bb0123 - 1)  # block size
dutest "            --th=$s"  'a a/b'                              || fail=1
dutest "      -a    --th=$s"  'a a/b'                              || fail=1
dutest "         -S --th=$s"  'a/b'                                || fail=1
dutest "      -a -S --th=$s"  'a/b'                                || fail=1
dutest "            --th=-$s" 'a/c'                                || fail=1
dutest "      -a    --th=-$s" 'a/b/0 a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "         -S --th=-$s" 'a a/c'                              || fail=1
dutest "      -a -S --th=-$s" 'a a/b/0 a/b/1 a/b/2 a/b/3 a/c'      || fail=1


# Check numbers around the total size of the files a/b/[0123]'.
echo One byte greater than 'a/b/3'.
s=$(expr $S3 + 1)  # apparent size
dutest "--app       --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app -a    --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app    -S --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app -a -S --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app       --th=-$s" ''                                   || fail=1
dutest "--app -a    --th=-$s" 'a/b/0 a/b/1 a/b/2 a/b/3'            || fail=1
dutest "--app    -S --th=-$s" ''                                   || fail=1
dutest "--app -a -S --th=-$s" 'a/b/0 a/b/1 a/b/2 a/b/3'            || fail=1
s=$(expr $B3 + 1)  # block size
dutest "            --th=$s"  'a a/b'                              || fail=1
dutest "      -a    --th=$s"  'a a/b'                              || fail=1
dutest "         -S --th=$s"  'a/b'                                || fail=1
dutest "      -a -S --th=$s"  'a/b'                                || fail=1
dutest "            --th=-$s" 'a/c'                                || fail=1
dutest "      -a    --th=-$s" 'a/b/0 a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "         -S --th=-$s" 'a a/c'                              || fail=1
dutest "      -a -S --th=-$s" 'a a/b/0 a/b/1 a/b/2 a/b/3 a/c'      || fail=1

# Exactly the size of 'a/b/3'.
echo Exactly the size of 'a/b/3'.
s=$S3  # apparent size
dutest "--app       --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app -a    --th=$s"  'a a/b a/b/3 a/c'                    || fail=1
dutest "--app    -S --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app -a -S --th=$s"  'a a/b a/b/3 a/c'                    || fail=1
dutest "--app       --th=-$s" ''                                   || fail=1
dutest "--app -a    --th=-$s" 'a/b/0 a/b/1 a/b/2 a/b/3'            || fail=1
dutest "--app    -S --th=-$s" ''                                   || fail=1
dutest "--app -a -S --th=-$s" 'a/b/0 a/b/1 a/b/2 a/b/3'            || fail=1
s=$B3  # block size
dutest "            --th=$s"  'a a/b a/c'                          || fail=1
dutest "      -a    --th=$s"  'a a/b a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "         -S --th=$s"  'a a/b a/c'                          || fail=1
dutest "      -a -S --th=$s"  'a a/b a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "            --th=-$s" 'a/c'                                || fail=1
dutest "      -a    --th=-$s" 'a/b/0 a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "         -S --th=-$s" 'a a/c'                              || fail=1
dutest "      -a -S --th=-$s" 'a a/b/0 a/b/1 a/b/2 a/b/3 a/c'      || fail=1

# Exactly the size of 'a/b/2'.
echo Exactly the size of 'a/b/2'.
s=$S2  # apparent size
dutest "--app       --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app -a    --th=$s"  'a a/b a/b/2 a/b/3 a/c'              || fail=1
dutest "--app    -S --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app -a -S --th=$s"  'a a/b a/b/2 a/b/3 a/c'              || fail=1
dutest "--app       --th=-$s" ''                                   || fail=1
dutest "--app -a    --th=-$s" 'a/b/0 a/b/1 a/b/2'                  || fail=1
dutest "--app    -S --th=-$s" ''                                   || fail=1
dutest "--app -a -S --th=-$s" 'a/b/0 a/b/1 a/b/2'                  || fail=1
s=$B2  # block size
dutest "            --th=$s"  'a a/b a/c'                          || fail=1
dutest "      -a    --th=$s"  'a a/b a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "         -S --th=$s"  'a a/b a/c'                          || fail=1
dutest "      -a -S --th=$s"  'a a/b a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "            --th=-$s" 'a/c'                                || fail=1
dutest "      -a    --th=-$s" 'a/b/0 a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "         -S --th=-$s" 'a a/c'                              || fail=1
dutest "      -a -S --th=-$s" 'a a/b/0 a/b/1 a/b/2 a/b/3 a/c'      || fail=1

# Exactly the size of 'a/b/1'.
echo Exactly the size of 'a/b/1'.
s=$S1  # apparent size
dutest "--app       --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app -a    --th=$s"  'a a/b a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "--app    -S --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app -a -S --th=$s"  'a a/b a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "--app       --th=-$s" ''                                   || fail=1
dutest "--app -a    --th=-$s" 'a/b/0 a/b/1'                        || fail=1
dutest "--app    -S --th=-$s" ''                                   || fail=1
dutest "--app -a -S --th=-$s" 'a/b/0 a/b/1'                        || fail=1
s=$B1  # block size
dutest "            --th=$s"  'a a/b a/c'                          || fail=1
dutest "      -a    --th=$s"  'a a/b a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "         -S --th=$s"  'a a/b a/c'                          || fail=1
dutest "      -a -S --th=$s"  'a a/b a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "            --th=-$s" 'a/c'                                || fail=1
dutest "      -a    --th=-$s" 'a/b/0 a/b/1 a/b/2 a/b/3 a/c'        || fail=1
dutest "         -S --th=-$s" 'a a/c'                              || fail=1
dutest "      -a -S --th=-$s" 'a a/b/0 a/b/1 a/b/2 a/b/3 a/c'      || fail=1

# Exactly the size of 'a/b/0'.
echo Exactly the size of 'a/b/0'.
s=$S0  # apparent size
dutest "--app       --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app -a    --th=$s"  'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'  || fail=1
dutest "--app    -S --th=$s"  'a a/b a/c'                          || fail=1
dutest "--app -a -S --th=$s"  'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'  || fail=1
# (maximum tests (-0) not possible).
s=$B0  # block size
dutest "            --th=$s"  'a a/b a/c'                          || fail=1
dutest "      -a    --th=$s"  'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'  || fail=1
dutest "         -S --th=$s"  'a a/b a/c'                          || fail=1
dutest "      -a -S --th=$s"  'a a/b a/b/0 a/b/1 a/b/2 a/b/3 a/c'  || fail=1
# (maximum tests (-0) not possible).

Exit $fail
#!/bin/sh
# Ensure that du works properly for an argument that refers to a
# symbolic link, and that is specified with a trailing slash.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Before coreutils-4.5.3, it would remove a single trailing slash.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

mkdir -p dir/1/2 || framework_failure_
ln -s dir slink || framework_failure_


du slink/ | sed 's/^[0-9][0-9]*	//' > out
echo === >> out

# Ensure that with -L we get the same results (modulo the trailing slash
# on the third line) even without the trailing slash on the command line.
du -L slink | sed 's/^[0-9][0-9]*	//' >> out
cat <<\EOF > exp
slink/1/2
slink/1
slink/
===
slink/1/2
slink/1
slink
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Make sure 'du d/1 d/2' works.
# That command failed with du from fileutils-4.0q.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ du

# Run this test from a sub-directory one level deeper than normal,
# so that the "du .." below doesn't traverse sibling directories
# that may be inaccessible due concurrently-running tests.
mkdir sub || framework_failure_
cd sub || framework_failure_

t=t
mkdir -p $t/1 $t/2 || framework_failure_

test -d $t || fail=1
du $t/1 $t/2 > /dev/null || fail=1

# Make sure 'du . $t' and 'du .. $t' work.
# These would fail prior to fileutils-4.0y.
du . $t > /dev/null || fail=1
du .. $t > /dev/null || fail=1

Exit $fail
#!/bin/sh
# Create the factor test scripts.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

test_name=$1
template=$2

# Extract the test name: remove .sh suffix from the basename.
t=`echo "$test_name"|sed 's,.*/,,;s,\.sh$,,'`

# prefix of 2^64
p=184467440737

# prefix of 2^96
q=79228162514264337593543

# Each of these numbers has a Pollard rho factor larger than 2^64,
# and thus exercises some hard-to-reach code in factor.c.
t1=170141183460469225450570946617781744489
t2=170141183460469229545748130981302223887

# Factors of the above:
# t1: 9223372036854775421 18446744073709551709
# t2: 9223372036854775643 18446744073709551709

# Each test is a triple: lo, hi, sha1 of result.
# The test script, run.sh, runs seq lo hi|factor|sha1sum
# and verifies that the actual and expected checksums are the same.
# New tests must be added to tests/local.mk (factor_tests), too.
case $t in
  t00) set            0     10000000 a451244522b1b662c86cb3cbb55aee3e085a61a0 ;;
  t01) set     10000000     20000000 c792a2e02f1c8536b5121f624b04039d20187016 ;;
  t02) set     20000000     30000000 8115e8dff97d1674134ec054598d939a2a5f6113 ;;
  t03) set     30000000     40000000 fe7b832c8e0ed55035152c0f9ebd59de73224a60 ;;
  t04) set     40000000     50000000 b8786d66c432e48bc5b342ee3c6752b7f096f206 ;;
  t05) set     50000000     60000000 a74fe518c5f79873c2b9016745b88b42c8fd3ede ;;
  t06) set     60000000     70000000 689bc70d681791e5d1b8ac1316a05d0c4473d6db ;;
  t07) set     70000000     80000000 d370808f2ab8c865f64c2ff909c5722db5b7d58d ;;
  t08) set     80000000     90000000 7978aa66bf2bdb446398336ea6f02605e9a77581 ;;
  t09) set          $t1          $t1 4622287c5f040cdb7b3bbe4d19d29a71ab277827 ;;
  t10) set          $t2          $t2 dea308253708b57afad357e8c0d2a111460ef50e ;;
  t11) set ${p}08551616 ${p}08651615 66c57cd58f4fb572df7f088d17e4f4c1d4f01bb1 ;;
  t12) set ${p}08651616 ${p}08751615 729228e693b1a568ecc85b199927424c7d16d410 ;;
  t13) set ${p}08751616 ${p}08851615 5a0c985017c2d285e4698f836f5a059e0b684563 ;;
  t14) set ${p}08851616 ${p}08951615 0482295c514e371c98ce9fd335deed0c9c44a4f4 ;;
  t15) set ${p}08951616 ${p}09051615 9c0e1105ac7c45e27e7bbeb5e213f530d2ad1a71 ;;
  t16) set ${p}09051616 ${p}09151615 604366d2b1d75371d0679e6a68962d66336cd383 ;;
  t17) set ${p}09151616 ${p}09251615 9192d2bdee930135b28d7160e6d395a7027871da ;;
  t18) set ${p}09251616 ${p}09351615 bcf56ae55d20d700690cff4d3327b78f83fc01bf ;;
  t19) set ${p}09351616 ${p}09451615 16b106398749e5f24d278ba7c58229ae43f650ac ;;
  t20) set ${p}09451616 ${p}09551615 ad2c6ed63525f8e7c83c4c416e7715fa1bebc54c ;;
  t21) set ${p}09551616 ${p}09651615 2b6f9c11742d9de045515a6627c27a042c49f8ba ;;
  t22) set ${p}09651616 ${p}09751615 54851acd51c4819beb666e26bc0100dc9adbc310 ;;
  t23) set ${p}09751616 ${p}09851615 6939c2a7afd2d81f45f818a159b7c5226f83a50b ;;
  t24) set ${p}09851616 ${p}09951615 0f2c8bc011d2a45e2afa01459391e68873363c6c ;;
  t25) set ${p}09951616 ${p}10051615 630dc2ad72f4c222bad1405e6c5bea590f92a98c ;;
  t26) set   ${q}940336   ${q}942335 63cbd6313d78247b04d63bbbac50cb8f8d33ff71 ;;
  t27) set   ${q}942336   ${q}944335 0d03d63653767173182491b86fa18f8f680bb036 ;;
  t28) set   ${q}944336   ${q}946335 ca43bd38cd9f97cc5bb63613cb19643578640f0b ;;
  t29) set   ${q}946336   ${q}948335 86d59545a0c13567fa96811821ea5cde950611b1 ;;
  t30) set   ${q}948336   ${q}950335 c3740e702fa9c97e6cf00150860e0b936a141a6b ;;
  t31) set   ${q}950336   ${q}952335 551c3c4c4640d86fda311b5c3006dac45505c0ce ;;
  t32) set   ${q}952336   ${q}954335 b1b0b00463c2f853d70ef9c4f7a96de5cb614156 ;;
  t33) set   ${q}954336   ${q}956335 8938a484a9ef6bb16478091d294fcde9f8ecea69 ;;
  t34) set   ${q}956336   ${q}958335 d1ae6bc712d994f35edf55c785d71ddf31f16535 ;;
  t35) set   ${q}958336   ${q}960335 2374919a89196e1fce93adfe779cb4664556d4b6 ;;
  t36) set   ${q}960336   ${q}962335 569e4363e8d9e8830a187d9ab27365eef08abde1 ;;
  *)
    echo "$0: error: unknown test: '$test_name' -> '$t'" >&2
    exit 1
    ;;
esac

TEMPLATE="TEST SCRIPT DERIVED FROM THE TEMPLATE $template"

# Create the test script from the template for this test
# by substituting the START, the END and the CKSUM.
exec sed \
  -e "s/__START__/$1/" \
  -e "s/__END__/$2/" \
  -e "s/__CKSUM__/$3/" \
  -e "s!__TEMPLATE__!$TEMPLATE!" "$template"
#!/bin/sh

# === THIS IS A __TEMPLATE__ ===

# Test the factor rewrite.
# The test is to run this command
# seq $START $END | factor | shasum -c --status <(echo $CKSUM  -)
# I.e., to ensure that the factorizations of integers $1..$2
# match what we expect.
#
# See: tests/factor/create-test.sh

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src

# Don't run these tests by default.
very_expensive_

print_ver_ factor seq sha1sum

# Template variables.
START=__START__
  END=__END__
CKSUM=__CKSUM__

test "$START" = '__ST''ART__' && skip_ 'ignoring factor test template'

echo "$CKSUM  -" > exp

f=1
seq $START $END | factor | sha1sum -c --status exp && f=0

Exit $f
#!/bin/sh
# Exercise the fmt -g option.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ fmt

cat <<\_EOF_ > base || fail=1

@command{fmt} prefers breaking lines at the end of a sentence, and tries to
avoid line breaks after the first word of a sentence or before the last word
of a sentence.  A @dfn{sentence break} is defined as either the end of a
paragraph or a word ending in any of @samp{.?!}, followed by two spaces or end
of line, ignoring any intervening parentheses or quotes.  Like @TeX{},
@command{fmt} reads entire ''paragraphs'' before choosing line breaks; the
algorithm is a variant of that given by
Donald E. Knuth and Michael F. Plass
in ''Breaking Paragraphs Into Lines'',
@cite{Software---Practice & Experience}
@b{11}, 11 (November 1981), 1119--1184.
_EOF_

fmt -g 60 -w 72 base > out || fail=1

cat <<\_EOF_ > exp

@command{fmt} prefers breaking lines at the end of a sentence,
and tries to avoid line breaks after the first word of a sentence
or before the last word of a sentence.  A @dfn{sentence break}
is defined as either the end of a paragraph or a word ending
in any of @samp{.?!}, followed by two spaces or end of line,
ignoring any intervening parentheses or quotes.  Like @TeX{},
@command{fmt} reads entire ''paragraphs'' before choosing line
breaks; the algorithm is a variant of that given by Donald
E. Knuth and Michael F. Plass in ''Breaking Paragraphs Into
Lines'', @cite{Software---Practice & Experience} @b{11}, 11
(November 1981), 1119--1184.
_EOF_

compare exp out || fail=1

Exit $fail
#!/bin/sh
# make sure fmt -s works even on long lines

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ fmt

printf '%2030s\n' ' '|sed 's/../ y/g' > in || framework_failure_

cat <<\EOF > exp || framework_failure_
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
 y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y y
EOF


fmt -s in > out || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that "id" outputs SELinux context only without specified user
# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ id
# Require selinux - when selinux is disabled, id never prints scontext.
require_selinux_


# Check without specified user, context string should be present.
id | grep context= >/dev/null || fail=1

# Check with specified user, no context string should be present.
# But if the current user is nameless, skip this part.
name=$(id -nu) || { test $? -ne 1 && fail=1; }
if test "$name"; then
  id "$name" > id_name || fail=1
  grep context= id_name >/dev/null && fail=1
fi

Exit $fail
#!/bin/sh
# On GNU, 'id' must fail for processes with zero UIDs.

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ id

require_gnu_

sush - true || skip_ "the 'sush' command does not work"

# Run 'id' with zero UIDs.  It should exit with a non-zero status.
returns_ 1 sush - id > out || fail=1

Exit $fail
#!/bin/sh
# With POSIXLY_CORRECT, id must not print context=...

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ id

# We don't need selinux *FS* support to test id,
# but this is as good a witness as any, in general.
require_selinux_


# Require the context=... part by default.
id > out || fail=1
grep context= out || fail=1

# Require no context=... part in conforming mode.
POSIXLY_CORRECT=1 id > out || fail=1
grep context= out && fail=1

Exit $fail
#!/bin/sh
# Verify that id [-G] prints the right group when run set-GID.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ id
require_root_

# Construct a different group number
gp1=$(expr $NON_ROOT_GID + 1)

echo $gp1 > exp || framework_failure_

# With coreutils-8.16 and earlier, id -G would print both:
#  $gp1 $NON_ROOT_GID
chroot --skip-chdir --user=$NON_ROOT_USERNAME:+$gp1 --groups='' / \
  env PATH="$PATH" id -G > out || fail=1
compare exp out || fail=1

# With coreutils-8.22 and earlier, id would erroneously print
#  groups=$NON_ROOT_GID
chroot --skip-chdir --user=$NON_ROOT_USERNAME:+$gp1 --groups='' / \
  env PATH="$PATH" id > out || fail=1
grep -F "groups=$gp1" out || { cat out; fail=1; }

Exit $fail
#!/bin/sh
# SMACK test for the id-command.
# Derived from tests/id/context.sh and tests/id/no-context.sh.
# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ id

require_smack_

# Check the string "context=" presence without specified user.
id > out || fail=1
grep 'context=' out || { cat out; fail=1; }

# Check context=" is absent without specified user in conforming mode.
POSIXLY_CORRECT=1 id > out || fail=1
grep 'context=' out && fail=1

# Check the string "context=" absence with specified user.
# But if the current user is nameless, skip this part.
id -nu > /dev/null && id $(id -nu) > out
grep 'context=' out && fail=1

Exit $fail
#!/bin/sh
# Ensure that "id" works with numeric user ids
# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ id

uid=$(id -u) || fail=1
user=$(id -nu) || fail=1

# Ensure the empty user spec is discarded
returns_ 1 id '' || fail=1

for mode in '' '-G' '-g'; do
  id $mode $user > user_out || fail=1 # lookup name for comparison

  id $mode $uid > uid_out || fail=1   # lookup name "$uid" before id "$uid"
  compare user_out uid_out || fail=1

  id $mode +$uid > uid_out || fail=1  # lookup only id "$uid"
  compare user_out uid_out || fail=1
done

Exit $fail
#!/bin/sh
# Exercise "id --zero".

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ id

u="$( id -nu )"
id || fail=1
id "$u" || fail=1

# id(1) should refuse --zero in default format.
echo 'id: option --zero not permitted in default format' > err-exp \
  || framework_failure_
id --zero > out 2>err && fail=1
compare /dev/null out || fail=1
compare err-exp   err || fail=1

# Create a nice list of users.
# Add $USER to ensure we have at least one explicit entry.
users="$u"
# Add a few typical users to test single group and multiple groups.
for u in root man postfix sshd nobody ; do
  id $u >/dev/null 2>&1 && users="$users $u"
done
# Add $users and '' (implicit $USER) to list to process.
printf '%s\n' $users '' >> users || framework_failure_

# Exercise "id -z" with various options.
printf '\n' > exp || framework_failure_
> out || framework_failure_

while read u ; do
  for o in g gr G Gr u ur ; do
    for n in '' n ; do
      printf   '%s: ' "id -${o}${n}[z] $u" >> exp || framework_failure_
      printf '\n%s: ' "id -${o}${n}[z] $u" >> out || framework_failure_
      # There may be no name corresponding to an id, so don't check
      # exit status when in name lookup mode
      id -${o}${n}  $u >> exp ||
        { test $? -ne 1 || test -z "$n" && fail=1; }
      id -${o}${n}z $u  > tmp ||
        { test $? -ne 1 || test -z "$n" && fail=1; }
      head -c-1 < tmp >> out || framework_failure_
    done
  done
done < users
printf '\n' >> out || framework_failure_
tr '\0' ' ' < out > out2 || framework_failure_
compare exp out2 || fail=1

Exit $fail
# source this file; set up for tests

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Using this file in a test
# =========================
#
# The typical skeleton of a test looks like this:
#
#   #!/bin/sh
#   . "${srcdir=.}/init.sh"; path_prepend_ .
#   Execute some commands.
#   Note that these commands are executed in a subdirectory, therefore you
#   need to prepend "../" to relative filenames in the build directory.
#   Note that the "path_prepend_ ." is useful only if the body of your
#   test invokes programs residing in the initial directory.
#   For example, if the programs you want to test are in src/, and this test
#   script is named tests/test-1, then you would use "path_prepend_ ../src",
#   or perhaps export PATH='$(abs_top_builddir)/src$(PATH_SEPARATOR)'"$$PATH"
#   to all tests via automake's TESTS_ENVIRONMENT.
#   Set the exit code 0 for success, 77 for skipped, or 1 or other for failure.
#   Use the skip_ and fail_ functions to print a diagnostic and then exit
#   with the corresponding exit code.
#   Exit $?

# Executing a test that uses this file
# ====================================
#
# Running a single test:
#   $ make check TESTS=test-foo.sh
#
# Running a single test, with verbose output:
#   $ make check TESTS=test-foo.sh VERBOSE=yes
#
# Running a single test, with single-stepping:
#   1. Go into a sub-shell:
#   $ bash
#   2. Set relevant environment variables from TESTS_ENVIRONMENT in the
#      Makefile:
#   $ export srcdir=../../tests # this is an example
#   3. Execute the commands from the test, copy&pasting them one by one:
#   $ . "$srcdir/init.sh"; path_prepend_ .
#   ...
#   4. Finally
#   $ exit

ME_=`expr "./$0" : '.*/\(.*\)$'`

# We use a trap below for cleanup.  This requires us to go through
# hoops to get the right exit status transported through the handler.
# So use 'Exit STATUS' instead of 'exit STATUS' inside of the tests.
# Turn off errexit here so that we don't trip the bug with OSF1/Tru64
# sh inside this function.
Exit () { set +e; (exit $1); exit $1; }

# Print warnings (e.g., about skipped and failed tests) to this file number.
# Override by defining to say, 9, in init.cfg, and putting say,
#   export ...ENVVAR_SETTINGS...; $(SHELL) 9>&2
# in the definition of TESTS_ENVIRONMENT in your tests/Makefile.am file.
# This is useful when using automake's parallel tests mode, to print
# the reason for skip/failure to console, rather than to the .log files.
: ${stderr_fileno_=2}

# Note that correct expansion of "$*" depends on IFS starting with ' '.
# Always write the full diagnostic to stderr.
# When stderr_fileno_ is not 2, also emit the first line of the
# diagnostic to that file descriptor.
warn_ ()
{
  # If IFS does not start with ' ', set it and emit the warning in a subshell.
  case $IFS in
    ' '*) printf '%s\n' "$*" >&2
          test $stderr_fileno_ = 2 \
            || { printf '%s\n' "$*" | sed 1q >&$stderr_fileno_ ; } ;;
    *) (IFS=' '; warn_ "$@");;
  esac
}
fail_ () { warn_ "$ME_: failed test: $@"; Exit 1; }
skip_ () { warn_ "$ME_: skipped test: $@"; Exit 77; }
fatal_ () { warn_ "$ME_: hard error: $@"; Exit 99; }
framework_failure_ () { warn_ "$ME_: set-up failure: $@"; Exit 99; }

# This is used to simplify checking of the return value
# which is useful when ensuring a command fails as desired.
# I.e., just doing `command ... &&fail=1` will not catch
# a segfault in command for example.  With this helper you
# instead check an explicit exit code like
#   returns_ 1 command ... || fail
returns_ () {
  # Disable tracing so it doesn't interfere with stderr of the wrapped command
  { set +x; } 2>/dev/null

  local exp_exit="$1"
  shift
  "$@"
  test $? -eq $exp_exit && ret_=0 || ret_=1

  if test "$VERBOSE" = yes && test "$gl_set_x_corrupts_stderr_" = false; then
    set -x
  fi
  { return $ret_; } 2>/dev/null
}

# Sanitize this shell to POSIX mode, if possible.
DUALCASE=1; export DUALCASE
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in
    *posix*) set -o posix ;;
  esac
fi

# We require $(...) support unconditionally.
# We require a few additional shell features only when $EXEEXT is nonempty,
# in order to support automatic $EXEEXT emulation:
# - hyphen-containing alias names
# - we prefer to use ${var#...} substitution, rather than having
#   to work around lack of support for that feature.
# The following code attempts to find a shell with support for these features.
# If the current shell passes the test, we're done.  Otherwise, test other
# shells until we find one that passes.  If one is found, re-exec it.
# If no acceptable shell is found, skip the current test.
#
# The "...set -x; P=1 true 2>err..." test is to disqualify any shell that
# emits "P=1" into err, as /bin/sh from SunOS 5.11 and OpenBSD 4.7 do.
#
# Use "9" to indicate success (rather than 0), in case some shell acts
# like Solaris 10's /bin/sh but exits successfully instead of with status 2.

# Eval this code in a subshell to determine a shell's suitability.
# 10 - passes all tests; ok to use
#  9 - ok, but enabling "set -x" corrupts app stderr; prefer higher score
#  ? - not ok
gl_shell_test_script_='
test $(echo y) = y || exit 1
f_local_() { local v=1; }; f_local_ || exit 1
score_=10
if test "$VERBOSE" = yes; then
  test -n "$( (exec 3>&1; set -x; P=1 true 2>&3) 2> /dev/null)" && score_=9
fi
test -z "$EXEEXT" && exit $score_
shopt -s expand_aliases
alias a-b="echo zoo"
v=abx
     test ${v%x} = ab \
  && test ${v#a} = bx \
  && test $(a-b) = zoo \
  && exit $score_
'

if test "x$1" = "x--no-reexec"; then
  shift
else
  # Assume a working shell.  Export to subshells (setup_ needs this).
  gl_set_x_corrupts_stderr_=false
  export gl_set_x_corrupts_stderr_

  # Record the first marginally acceptable shell.
  marginal_=

  # Search for a shell that meets our requirements.
  for re_shell_ in __current__ "${CONFIG_SHELL:-no_shell}" \
      /bin/sh bash dash zsh pdksh fail
  do
    test "$re_shell_" = no_shell && continue

    # If we've made it all the way to the sentinel, "fail" without
    # finding even a marginal shell, skip this test.
    if test "$re_shell_" = fail; then
      test -z "$marginal_" && skip_ failed to find an adequate shell
      re_shell_=$marginal_
      break
    fi

    # When testing the current shell, simply "eval" the test code.
    # Otherwise, run it via $re_shell_ -c ...
    if test "$re_shell_" = __current__; then
      # 'eval'ing this code makes Solaris 10's /bin/sh exit with
      # $? set to 2.  It does not evaluate any of the code after the
      # "unexpected" first '('.  Thus, we must run it in a subshell.
      ( eval "$gl_shell_test_script_" ) > /dev/null 2>&1
    else
      "$re_shell_" -c "$gl_shell_test_script_" 2>/dev/null
    fi

    st_=$?

    # $re_shell_ works just fine.  Use it.
    if test $st_ = 10; then
      gl_set_x_corrupts_stderr_=false
      break
    fi

    # If this is our first marginally acceptable shell, remember it.
    if test "$st_:$marginal_" = 9: ; then
      marginal_="$re_shell_"
      gl_set_x_corrupts_stderr_=true
    fi
  done

  if test "$re_shell_" != __current__; then
    # Found a usable shell.  Preserve -v and -x.
    case $- in
      *v*x* | *x*v*) opts_=-vx ;;
      *v*) opts_=-v ;;
      *x*) opts_=-x ;;
      *) opts_= ;;
    esac
    re_shell=$re_shell_
    export re_shell
    exec "$re_shell_" $opts_ "$0" --no-reexec "$@"
    echo "$ME_: exec failed" 1>&2
    exit 127
  fi
fi

# If this is bash, turn off all aliases.
test -n "$BASH_VERSION" && unalias -a

# Note that when supporting $EXEEXT (transparently mapping from PROG_NAME to
# PROG_NAME.exe), we want to support hyphen-containing names like test-acos.
# That is part of the shell-selection test above.  Why use aliases rather
# than functions?  Because support for hyphen-containing aliases is more
# widespread than that for hyphen-containing function names.
test -n "$EXEEXT" && shopt -s expand_aliases

# Enable glibc's malloc-perturbing option.
# This is useful for exposing code that depends on the fact that
# malloc-related functions often return memory that is mostly zeroed.
# If you have the time and cycles, use valgrind to do an even better job.
: ${MALLOC_PERTURB_=87}
export MALLOC_PERTURB_

# This is a stub function that is run upon trap (upon regular exit and
# interrupt).  Override it with a per-test function, e.g., to unmount
# a partition, or to undo any other global state changes.
cleanup_ () { :; }

# Emit a header similar to that from diff -u;  Print the simulated "diff"
# command so that the order of arguments is clear.  Don't bother with @@ lines.
emit_diff_u_header_ ()
{
  printf '%s\n' "diff -u $*" \
    "--- $1	1970-01-01" \
    "+++ $2	1970-01-01"
}

# Arrange not to let diff or cmp operate on /dev/null,
# since on some systems (at least OSF/1 5.1), that doesn't work.
# When there are not two arguments, or no argument is /dev/null, return 2.
# When one argument is /dev/null and the other is not empty,
# cat the nonempty file to stderr and return 1.
# Otherwise, return 0.
compare_dev_null_ ()
{
  test $# = 2 || return 2

  if test "x$1" = x/dev/null; then
    test -s "$2" || return 0
    emit_diff_u_header_ "$@"; sed 's/^/+/' "$2"
    return 1
  fi

  if test "x$2" = x/dev/null; then
    test -s "$1" || return 0
    emit_diff_u_header_ "$@"; sed 's/^/-/' "$1"
    return 1
  fi

  return 2
}

if diff_out_=`exec 2>/dev/null; diff -u "$0" "$0" < /dev/null` \
   && diff -u Makefile "$0" 2>/dev/null | grep '^[+]#!' >/dev/null; then
  # diff accepts the -u option and does not (like AIX 7 'diff') produce an
  # extra space on column 1 of every content line.
  if test -z "$diff_out_"; then
    compare_ () { diff -u "$@"; }
  else
    compare_ ()
    {
      if diff -u "$@" > diff.out; then
        # No differences were found, but Solaris 'diff' produces output
        # "No differences encountered". Hide this output.
        rm -f diff.out
        true
      else
        cat diff.out
        rm -f diff.out
        false
      fi
    }
  fi
elif diff_out_=`exec 2>/dev/null; diff -c "$0" "$0" < /dev/null`; then
  if test -z "$diff_out_"; then
    compare_ () { diff -c "$@"; }
  else
    compare_ ()
    {
      if diff -c "$@" > diff.out; then
        # No differences were found, but AIX and HP-UX 'diff' produce output
        # "No differences encountered" or "There are no differences between the
        # files.". Hide this output.
        rm -f diff.out
        true
      else
        cat diff.out
        rm -f diff.out
        false
      fi
    }
  fi
elif cmp -s /dev/null /dev/null 2>/dev/null; then
  compare_ () { cmp -s "$@"; }
else
  compare_ () { cmp "$@"; }
fi

# Usage: compare EXPECTED ACTUAL
#
# Given compare_dev_null_'s preprocessing, defer to compare_ if 2 or more.
# Otherwise, propagate $? to caller: any diffs have already been printed.
compare ()
{
  # This looks like it can be factored to use a simple "case $?"
  # after unchecked compare_dev_null_ invocation, but that would
  # fail in a "set -e" environment.
  if compare_dev_null_ "$@"; then
    return 0
  else
    case $? in
      1) return 1;;
      *) compare_ "$@";;
    esac
  fi
}

# An arbitrary prefix to help distinguish test directories.
testdir_prefix_ () { printf gt; }

# Run the user-overridable cleanup_ function, remove the temporary
# directory and exit with the incoming value of $?.
remove_tmp_ ()
{
  __st=$?
  cleanup_
  # cd out of the directory we're about to remove
  cd "$initial_cwd_" || cd / || cd /tmp
  chmod -R u+rwx "$test_dir_"
  # If removal fails and exit status was to be 0, then change it to 1.
  rm -rf "$test_dir_" || { test $__st = 0 && __st=1; }
  exit $__st
}

# Given a directory name, DIR, if every entry in it that matches *.exe
# contains only the specified bytes (see the case stmt below), then print
# a space-separated list of those names and return 0.  Otherwise, don't
# print anything and return 1.  Naming constraints apply also to DIR.
find_exe_basenames_ ()
{
  feb_dir_=$1
  feb_fail_=0
  feb_result_=
  feb_sp_=
  for feb_file_ in $feb_dir_/*.exe; do
    # If there was no *.exe file, or there existed a file named "*.exe" that
    # was deleted between the above glob expansion and the existence test
    # below, just skip it.
    test "x$feb_file_" = "x$feb_dir_/*.exe" && test ! -f "$feb_file_" \
      && continue
    # Exempt [.exe, since we can't create a function by that name, yet
    # we can't invoke [ by PATH search anyways due to shell builtins.
    test "x$feb_file_" = "x$feb_dir_/[.exe" && continue
    case $feb_file_ in
      *[!-a-zA-Z/0-9_.+]*) feb_fail_=1; break;;
      *) # Remove leading file name components as well as the .exe suffix.
         feb_file_=${feb_file_##*/}
         feb_file_=${feb_file_%.exe}
         feb_result_="$feb_result_$feb_sp_$feb_file_";;
    esac
    feb_sp_=' '
  done
  test $feb_fail_ = 0 && printf %s "$feb_result_"
  return $feb_fail_
}

# Consider the files in directory, $1.
# For each file name of the form PROG.exe, create an alias named
# PROG that simply invokes PROG.exe, then return 0.  If any selected
# file name or the directory name, $1, contains an unexpected character,
# define no alias and return 1.
create_exe_shims_ ()
{
  case $EXEEXT in
    '') return 0 ;;
    .exe) ;;
    *) echo "$0: unexpected \$EXEEXT value: $EXEEXT" 1>&2; return 1 ;;
  esac

  base_names_=`find_exe_basenames_ $1` \
    || { echo "$0 (exe_shim): skipping directory: $1" 1>&2; return 0; }

  if test -n "$base_names_"; then
    for base_ in $base_names_; do
      alias "$base_"="$base_$EXEEXT"
    done
  fi

  return 0
}

# Use this function to prepend to PATH an absolute name for each
# specified, possibly-$initial_cwd_-relative, directory.
path_prepend_ ()
{
  while test $# != 0; do
    path_dir_=$1
    case $path_dir_ in
      '') fail_ "invalid path dir: '$1'";;
      /*) abs_path_dir_=$path_dir_;;
      *) abs_path_dir_=$initial_cwd_/$path_dir_;;
    esac
    case $abs_path_dir_ in
      *:*) fail_ "invalid path dir: '$abs_path_dir_'";;
    esac
    PATH="$abs_path_dir_:$PATH"

    # Create an alias, FOO, for each FOO.exe in this directory.
    create_exe_shims_ "$abs_path_dir_" \
      || fail_ "something failed (above): $abs_path_dir_"
    shift
  done
  export PATH
}

setup_ ()
{
  if test "$VERBOSE" = yes; then
    # Test whether set -x may cause the selected shell to corrupt an
    # application's stderr.  Many do, including zsh-4.3.10 and the /bin/sh
    # from SunOS 5.11, OpenBSD 4.7 and Irix 5.x and 6.5.
    # If enabling verbose output this way would cause trouble, simply
    # issue a warning and refrain.
    if $gl_set_x_corrupts_stderr_; then
      warn_ "using SHELL=$SHELL with 'set -x' corrupts stderr"
    else
      set -x
    fi
  fi

  initial_cwd_=$PWD
  fail=0

  pfx_=`testdir_prefix_`
  test_dir_=`mktempd_ "$initial_cwd_" "$pfx_-$ME_.XXXX"` \
    || fail_ "failed to create temporary directory in $initial_cwd_"
  cd "$test_dir_" || fail_ "failed to cd to temporary directory"

  # As autoconf-generated configure scripts do, ensure that IFS
  # is defined initially, so that saving and restoring $IFS works.
  gl_init_sh_nl_='
'
  IFS=" ""	$gl_init_sh_nl_"

  # This trap statement, along with a trap on 0 below, ensure that the
  # temporary directory, $test_dir_, is removed upon exit as well as
  # upon receipt of any of the listed signals.
  for sig_ in 1 2 3 13 15; do
    eval "trap 'Exit $(expr $sig_ + 128)' $sig_"
  done
}

# Create a temporary directory, much like mktemp -d does.
# Written by Jim Meyering.
#
# Usage: mktempd_ /tmp phoey.XXXXXXXXXX
#
# First, try to use the mktemp program.
# Failing that, we'll roll our own mktemp-like function:
#  - try to get random bytes from /dev/urandom
#  - failing that, generate output from a combination of quickly-varying
#      sources and gzip.  Ignore non-varying gzip header, and extract
#      "random" bits from there.
#  - given those bits, map to file-name bytes using tr, and try to create
#      the desired directory.
#  - make only $MAX_TRIES_ attempts

# Helper function.  Print $N pseudo-random bytes from a-zA-Z0-9.
rand_bytes_ ()
{
  n_=$1

  # Maybe try openssl rand -base64 $n_prime_|tr '+/=\012' abcd first?
  # But if they have openssl, they probably have mktemp, too.

  chars_=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
  dev_rand_=/dev/urandom
  if test -r "$dev_rand_"; then
    # Note: 256-length($chars_) == 194; 3 copies of $chars_ is 186 + 8 = 194.
    dd ibs=$n_ count=1 if=$dev_rand_ 2>/dev/null \
      | LC_ALL=C tr -c $chars_ 01234567$chars_$chars_$chars_
    return
  fi

  n_plus_50_=`expr $n_ + 50`
  cmds_='date; date +%N; free; who -a; w; ps auxww; ps ef; netstat -n'
  data_=` (eval "$cmds_") 2>&1 | gzip `

  # Ensure that $data_ has length at least 50+$n_
  while :; do
    len_=`echo "$data_"|wc -c`
    test $n_plus_50_ -le $len_ && break;
    data_=` (echo "$data_"; eval "$cmds_") 2>&1 | gzip `
  done

  echo "$data_" \
    | dd bs=1 skip=50 count=$n_ 2>/dev/null \
    | LC_ALL=C tr -c $chars_ 01234567$chars_$chars_$chars_
}

mktempd_ ()
{
  case $# in
  2);;
  *) fail_ "Usage: mktempd_ DIR TEMPLATE";;
  esac

  destdir_=$1
  template_=$2

  MAX_TRIES_=4

  # Disallow any trailing slash on specified destdir:
  # it would subvert the post-mktemp "case"-based destdir test.
  case $destdir_ in
  /) ;;
  */) fail_ "invalid destination dir: remove trailing slash(es)";;
  esac

  case $template_ in
  *XXXX) ;;
  *) fail_ \
       "invalid template: $template_ (must have a suffix of at least 4 X's)";;
  esac

  # First, try to use mktemp.
  d=`unset TMPDIR; { mktemp -d -t -p "$destdir_" "$template_"; } 2>/dev/null` \
    || fail=1

  # The resulting name must be in the specified directory.
  case $d in "$destdir_"*);; *) fail=1;; esac

  # It must have created the directory.
  test -d "$d" || fail=1

  # It must have 0700 permissions.  Handle sticky "S" bits.
  perms=`ls -dgo "$d" 2>/dev/null|tr S -` || fail=1
  case $perms in drwx------*) ;; *) fail=1;; esac

  test $fail = 0 && {
    echo "$d"
    return
  }

  # If we reach this point, we'll have to create a directory manually.

  # Get a copy of the template without its suffix of X's.
  base_template_=`echo "$template_"|sed 's/XX*$//'`

  # Calculate how many X's we've just removed.
  template_length_=`echo "$template_" | wc -c`
  nx_=`echo "$base_template_" | wc -c`
  nx_=`expr $template_length_ - $nx_`

  err_=
  i_=1
  while :; do
    X_=`rand_bytes_ $nx_`
    candidate_dir_="$destdir_/$base_template_$X_"
    err_=`mkdir -m 0700 "$candidate_dir_" 2>&1` \
      && { echo "$candidate_dir_"; return; }
    test $MAX_TRIES_ -le $i_ && break;
    i_=`expr $i_ + 1`
  done
  fail_ "$err_"
}

# If you want to override the testdir_prefix_ function,
# or to add more utility functions, use this file.
test -f "$srcdir/init.cfg" \
  && . "$srcdir/init.cfg"

setup_ "$@"
# This trap is here, rather than in the setup_ function, because some
# shells run the exit trap at shell function exit, rather than script exit.
trap remove_tmp_ 0
#!/bin/sh
# Basic tests for "install".

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ginstall
skip_if_root_

dir=dir
file=file

rm -rf $dir $file || framework_failure_
mkdir -p $dir || framework_failure_
echo foo > $file || framework_failure_

ginstall $file $dir || fail=1
# Make sure the source file still exists.
test -f $file || fail=1
# Make sure the dest file has been created.
test -f $dir/$file || fail=1

# Make sure strip works.
dd=dd$EXEEXT
dd2=dd2$EXEEXT

just_built_dd=$abs_top_builddir/src/$dd

test -r "$just_built_dd" \
  || warn_ "WARNING!!! Your just-built dd binary, $just_built_dd
is not readable, so skipping the remaining tests in this file."

cp "$just_built_dd" . || fail=1
cp $dd $dd2 || fail=1

strip=-s
if ! strip $dd2; then
  ! test -e $abs_top_builddir/src/coreutils \
    && warn_ "WARNING!!! Your strip command doesn't seem to work,
so skipping the test of install's --strip option."
  strip=
fi

# This test would fail with 3.16s when using versions of strip that
# don't work on read-only files (the one from binutils works fine).
ginstall $strip -c -m 555 $dd $dir || fail=1
# Make sure the source file is still around.
test -f $dd || fail=1

# Make sure that the destination file has the requested permissions.
mode=$(ls -l $dir/$dd|cut -b-10)
test "$mode" = -r-xr-xr-x || fail=1

# These failed in coreutils CVS from 2004-06-25 to 2004-08-11.
ginstall -d . || fail=1
ginstall -d newdir || fail=1
test -d newdir || fail=1
ginstall -d newdir1 newdir2 newdir3 || fail=1
test -d newdir1 || fail=1
test -d newdir2 || fail=1
test -d newdir3 || fail=1

# This fails because mkdir-p.c's make_dir_parents fails to return to its
# initial working directory ($iwd) after creating the first argument, and
# hence cannot do anything meaningful with the following relative-named dirs.
iwd=$(pwd)
mkdir sub || fail=1
(cd sub &&
 chmod 0 . &&
 returns_ 1 ginstall -d "$iwd/xx/yy" rel/sub1 rel/sub2 2> /dev/null
) || fail=1
chmod 755 sub

# Ensure that the first argument-dir has been created.
test -d xx/yy || fail=1

# Make sure that the 'rel' directory was not created...
test -d sub/rel && fail=1
# and make sure it was not created in the wrong place.
test -d xx/rel && fail=1

# Test that we can install from an unreadable directory with an
# inaccessible parent.  coreutils 5.97 fails this test.
# Perform this test only if "." is on a local file system.
# Otherwise, it would fail e.g., on an NFS-mounted file system.
if is_local_dir_ .; then
  mkdir -p sub1/d || fail=1
  (cd sub1/d && chmod a-r . && chmod a-rx .. &&
   ginstall -d "$iwd/xx/zz" rel/a rel/b) || fail=1
  chmod 755 sub1 sub1/d || fail=1
  test -d xx/zz || fail=1
  test -d sub1/d/rel/a || fail=1
  test -d sub1/d/rel/b || fail=1
fi

touch file || fail=1
ginstall -Dv file sub3/a/b/c/file >out 2>&1 || fail=1
compare - out <<\EOF || fail=1
ginstall: creating directory 'sub3'
ginstall: creating directory 'sub3/a'
ginstall: creating directory 'sub3/a/b'
ginstall: creating directory 'sub3/a/b/c'
'file' -> 'sub3/a/b/c/file'
EOF

# Test -D together with -t (available since coreutils >= 8.23).
# Let ginstall create a completely new destination hierarchy.
ginstall -t sub4/a/b/c -Dv file >out 2>&1 || fail=1
compare - out <<\EOF || fail=1
ginstall: creating directory 'sub4'
ginstall: creating directory 'sub4/a'
ginstall: creating directory 'sub4/a/b'
ginstall: creating directory 'sub4/a/b/c'
'file' -> 'sub4/a/b/c/file'
EOF

# Ensure that -D with an already existing file as -t's option argument fails.
touch sub4/file_exists || framework_failure_
ginstall -t sub4/file_exists -Dv file >out 2>&1 && fail=1
compare - out <<\EOF || fail=1
ginstall: target 'sub4/file_exists' is not a directory
EOF

# Ensure that -D with an already existing directory for -t's option argument
# succeeds.
mkdir sub4/dir_exists || framework_failure_
touch sub4/dir_exists || framework_failure_
ginstall -t sub4/dir_exists -Dv file >out 2>&1 || fail=1
compare - out <<\EOF || fail=1
'file' -> 'sub4/dir_exists/file'
EOF

Exit $fail
#!/bin/sh
# Test -D option.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Note that the tests below use 'ginstall', not install, because
# that's the name of the binary in ../../src.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ginstall


file=file
echo foo > $file || framework_failure_

# Before 4.0q, this would mistakenly create $file, not 'dest'
# in no-dir1/no-dir2/.
ginstall -D $file no-dir1/no-dir2/dest || fail=1
test -d no-dir1/no-dir2 || fail=1
test -r no-dir1/no-dir2/dest || fail=1

# Between 6.1 and 8.24, this would not copy $file
# due to incorrectly modified working directory
mkdir dir1 || framework_failure_
touch dir1/file1 || framework_failure_
ginstall -D "$PWD/dir1/file1" $file -t "$PWD/no-dir2/" || fail=1
test -r no-dir2/$file && test -r no-dir2/file1 || fail=1

Exit $fail
#!/bin/sh
# Ensure that ginstall -d works with arguments specified with a trailing "/.".

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ginstall


ginstall -d d1/. || fail=1
test -d d1 || fail=1

ginstall -d d2/.. || fail=1
test -d d2 || fail=1

Exit $fail
#!/bin/sh
# Ensure "install -C" compares owner and group.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ginstall
require_root_
skip_if_setgid_
skip_if_nondefault_group_

u1=1
u2=2
g1=1
g2=2


echo test > a || framework_failure_
echo "'a' -> 'b'" > out_installed_first
echo "removed 'b'
'a' -> 'b'" > out_installed_second
> out_empty

# destination file does not exist
ginstall -Cv -o$u1 -g$g1 a b > out || fail=1
compare out out_installed_first || fail=1

# destination file exists
ginstall -Cv -o$u1 -g$g1 a b > out || fail=1
compare out out_empty || fail=1

# destination file exists but -C is not given
ginstall -v -o$u1 -g$g1 a b > out || fail=1
compare out out_installed_second || fail=1

# destination file exists but owner differs
ginstall -Cv -o$u2 -g$g1 a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv -o$u2 -g$g1 a b > out || fail=1
compare out out_empty || fail=1

# destination file exists but group differs
ginstall -Cv -o$u2 -g$g2 a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv -o$u2 -g$g2 a b > out || fail=1
compare out out_empty || fail=1

# destination file exists but owner differs from getuid ()
ginstall -Cv -o$u2 a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv a b > out || fail=1
compare out out_empty || fail=1

# destination file exists but group differs from getgid ()
ginstall -Cv -g$g2 a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv a b > out || fail=1
compare out out_empty || fail=1

Exit $fail
#!/bin/sh
# Ensure "install -C" compares SELinux context.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ginstall
require_selinux_
skip_if_nondefault_group_

echo test > a || framework_failure_
chcon -u system_u a || skip_ "chcon doesn't work"

echo "'a' -> 'b'" > out_installed_first
echo "removed 'b'
'a' -> 'b'" > out_installed_second
> out_empty

# destination file does not exist
ginstall -Cv --preserve-context a b > out || fail=1
compare out out_installed_first || fail=1

# destination file exists
ginstall -Cv --preserve-context a b > out || fail=1
compare out out_empty || fail=1

# destination file exists but -C is not given
ginstall -v --preserve-context a b > out || fail=1
compare out out_installed_second || fail=1

# destination file exists but SELinux context differs
chcon -u unconfined_u a || skip_ "chcon doesn't work"
ginstall -Cv --preserve-context a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv --preserve-context a b > out || fail=1
compare out out_empty || fail=1

Exit $fail
#!/bin/sh
# Ensure "install -C" works. (basic tests)

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ginstall
skip_if_setgid_
skip_if_nondefault_group_

# Note if a group is not specified, install(1) will assume that a file
# would be installed with the current user's group ID, and thus if the
# file is the same except that it does have a different group due to
# its parent directory being g+s for example, then the copy will be
# done again redundantly in a futile attempt to reset the group ID to
# that of the current user.
#
#  install -d -g wheel -m 2775 test  # Create setgid dir
#  touch test/a                      # Create source
#  install -Cv -m664 test/a test/i1  # install source with mode
#  install -Cv -m664 test/i1 test/i2 # install dest
#  install -Cv -m664 test/i1 test/i2 # again to see redundant install
#
# Similarly if an existing file exists that is the same and has the
# current users group ID, but when an actual install of the file would
# reset to a different group ID due to the directory being g+s for example,
# then the install will not be done when it should.
#
#  install -Cv -m664 -g "$(id -nrg)" test/i1 test/i2 # set i2 to uesr's gid
#  install -Cv -m664 test/i1 test/i2 # this should install but doesn't
#
# Therefore we skip the test in the presence of setgid dirs
# An additional complication on HFS is that it...

mode1=0644
mode2=0755
mode3=2755


echo test > a || framework_failure_
echo "'a' -> 'b'" > out_installed_first || framework_failure_
echo "removed 'b'
'a' -> 'b'" > out_installed_second || framework_failure_
> out_empty || framework_failure_

# destination file does not exist
ginstall -Cv -m$mode1 a b > out || fail=1
compare out out_installed_first || fail=1

# destination file exists
ginstall -Cv -m$mode1 a b > out || fail=1
compare out out_empty || fail=1

# destination file exists (long option)
ginstall -v --compare -m$mode1 a b > out || fail=1
compare out out_empty || fail=1

# destination file exists but -C is not given
ginstall -v -m$mode1 a b > out || fail=1
compare out out_installed_second || fail=1

# option -C ignored if any non-permission mode should be set
ginstall -Cv -m$mode3 a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv -m$mode3 a b > out || fail=1
compare out out_installed_second || fail=1

# files are not regular files
ln -s a c || framework_failure_
ln -s b d || framework_failure_
ginstall -Cv -m$mode1 c d > out || fail=1
echo "removed 'd'
'c' -> 'd'" > out_installed_second_cd
compare out out_installed_second_cd || fail=1

# destination file exists but content differs
echo test1 > a || framework_failure_
ginstall -Cv -m$mode1 a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv -m$mode1 a b > out || fail=1
compare out out_empty || fail=1

# destination file exists but content differs (same size)
echo test2 > a || framework_failure_
ginstall -Cv -m$mode1 a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv -m$mode1 a b > out || fail=1
compare out out_empty || fail=1

# destination file exists but mode differs
ginstall -Cv -m$mode2 a b > out || fail=1
compare out out_installed_second || fail=1
ginstall -Cv -m$mode2 a b > out || fail=1
compare out out_empty || fail=1

# options -C and --preserve-timestamps are mutually exclusive
returns_ 1 ginstall -C --preserve-timestamps a b || fail=1

# options -C and --strip are mutually exclusive
returns_ 1 ginstall -C --strip --strip-program=echo a b || fail=1

Exit $fail
#!/bin/sh
# Ensure "install -s --strip-program=PROGRAM" uses the program to strip

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ginstall

working_umask_or_skip_

cat <<EOF > b || framework_failure_
#!$SHELL
sed s/b/B/ \$1 > \$1.t && mv \$1.t \$1
EOF
chmod a+x b || framework_failure_


echo abc > src || fail=1
echo aBc > exp || fail=1
ginstall src dest -s --strip-program=./b || fail=1
compare exp dest || fail=1

# Check that install cleans up properly if strip fails.
returns_ 1 ginstall src dest2 -s --strip-program=./FOO || fail=1
test -e dest2 && fail=1

Exit $fail
#!/bin/sh
# Ensure that 'install -s' doesn't infloop when its parent
# process traps CHLD signal.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ginstall
require_trap_signame_


# Use a subshell and an exec to work around a bug in FreeBSD 5.0 /bin/sh.
(
  trap '' CHLD

  # Before 2004-04-21, install would infloop, in the 'while (wait...' loop:
  exec ginstall -s "$abs_top_builddir/src/ginstall$EXEEXT" .
)

Exit $fail
#!/bin/sh
# Try to create a symlink with backup where the destination file exists
# and the backup file name is a hard link to the destination file.

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Based on a problem report from Jamie Lokier.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ln

touch a b || framework_failure_

ln b b~ || fail=1
ln -f --b=simple a b || fail=1

Exit $fail
#!/bin/sh
# Ensure that 'ln --backup F F' gives a proper diagnostic.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ln

touch f || framework_failure_


ln --backup f f 2> out && fail=1
cat <<\EOF > exp || fail=1
ln: 'f' and 'f' are the same file
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Tests for ln -L/-P.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ln


# ===================================================
# ensure -s silently overrides -L, -P
touch a || framework_failure_
ln -L -s a symlink1 || fail=1
ln -P -s symlink1 symlink2 || fail=1
ln -s -L -P symlink2 symlink3 || fail=1

# ===================================================
# ensure that -L follows symlinks, and overrides -P
if ln -P -L symlink3 hard-to-a; then
  ls=$(ls -lG hard-to-a)x
  case "$ls" in
    *'hard-to-ax') ;;
    *'hard-to-a -> '*x) fail=1 ;;
    *) framework_failure_ ;;
  esac
else
  fail=1
fi

# ===================================================
# ensure that -P links (or at least duplicates) symlinks, and overrides -L
if ln -L -P symlink3 hard-to-3; then
  ls=$(ls -lG hard-to-3)x
  case "$ls" in
    *'hard-to-3 -> symlink2x') ;;
    *'hard-to-3x') fail=1 ;;
    *'hard-to-3 -> '*x) fail=1 ;;
    *) framework_failure_ ;;
  esac
else
  fail=1
fi

# ===================================================
# Create a hard link to a dangling symlink.
ln -s /no-such-dir || framework_failure_
ln -L no-such-dir hard-to-dangle 2>err && fail=1
case $(cat err) in
  *" failed to access 'no-such-dir'":*) ;;
  *) fail=1 ;;
esac
ln -P no-such-dir hard-to-dangle || fail=1

# ===================================================
# Create a hard link to a symlink to a directory.
mkdir d || framework_failure_
ln -s d link-to-dir || framework_failure_
ln -L link-to-dir hard-to-dir-link 2>err && fail=1
case $(cat err) in
  *": link-to-dir: hard link not allowed for directory"*) ;;
  *) fail=1 ;;
esac
ln -P link-to-dir/ hard-to-dir-link 2>err && fail=1
case $(cat err) in
  *": link-to-dir/: hard link not allowed for directory"*) ;;
  *) fail=1 ;;
esac
ln -P link-to-dir hard-to-dir-link || fail=1

Exit $fail
#!/bin/sh
# Miscellaneous tests for "ln".

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ln

t=tln-symlink
d=tln-subdir
ld=tln-symlink-to-subdir
f=tln-file

# Create a simple symlink with both source and destination files
# in current directory.
touch $f || framework_failure_
rm -f $t || framework_failure_
ln -s $f $t || fail=1
test -f $t || fail=1
rm $t $f

# Create a symlink with source file and explicit destination directory/file.
touch $f || framework_failure_
rm -rf $d || framework_failure_
mkdir $d || framework_failure_
ln -s ../$f $d/$t || fail=1
test -f $d/$t || fail=1
rm -rf $d $f

# Create a symlink with source file and destination directory.
touch $f || framework_failure_
rm -rf $d || framework_failure_
mkdir $d || framework_failure_
ln -s ../$f $d || fail=1
test -f $d/$f || fail=1
rm -rf $d $f

# See whether a trailing slash is followed too far.
touch $f || framework_failure_
rm -rf $d || framework_failure_
mkdir $d $d/$f || framework_failure_
returns_ 1 ln $f $d/ 2> /dev/null || fail=1
returns_ 1 ln -s $f $d/ 2> /dev/null || fail=1
rm -rf $d $f

# Make sure we get a failure with existing dest without -f option
touch $t || framework_failure_
# FIXME: don't ignore the error message but rather test
# it to make sure it's the right one.
returns_ 1 ln -s $t $t 2> /dev/null || fail=1
rm $t

# Make sure -sf fails when src and dest are the same
touch $t || framework_failure_
returns_ 1 ln -sf $t $t 2> /dev/null || fail=1
rm $t

# Create a symlink with source file and no explicit directory
rm -rf $d || framework_failure_
mkdir $d || framework_failure_
touch $d/$f || framework_failure_
ln -s $d/$f || fail=1
test -f $f || fail=1
rm -rf $d $f

# Create a symlink with source file and destination symlink-to-directory.
rm -rf $d $f $ld || framework_failure_
touch $f || framework_failure_
mkdir $d || framework_failure_
ln -s $d $ld
ln -s ../$f $ld || fail=1
test -f $d/$f || fail=1
rm -rf $d $f $ld

# Create a symlink with source file and destination symlink-to-directory.
# BUT use the new --no-dereference option.
rm -rf $d $f $ld || framework_failure_
touch $f || framework_failure_
mkdir $d || framework_failure_
ln -s $d $ld
af=$(pwd)/$f
ln --no-dereference -fs "$af" $ld || fail=1
test -f $ld || fail=1
rm -rf $d $f $ld

# Try to create a symlink with backup where the destination file exists
# and the backup file name is a hard link to the destination file.
touch a b || framework_failure_
ln b b~ || framework_failure_
ln -f --b=simple a b || fail=1

# ===================================================

# Make sure ln can make simple backups.
# This was fixed in 4.0.34.  Broken in 4.0r.
for cmd in ln cp mv ginstall; do
  rm -rf a x a.orig
  touch a x || framework_failure_
  $cmd --backup=simple --suffix=.orig x a || fail=1
  test -f a.orig || fail=1
done

# ===================================================
# With coreutils-5.2.1, this would mistakenly access argv[1][-1].
# I'm including it here, in case some day programs like valgrind detect that.
# Purify probably would have done so.
ln foo '' 2> /dev/null

# ===================================================

Exit $fail
#!/bin/sh
# Test "ln --relative".

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ln

mkdir -p usr/bin || framework_failure_
mkdir -p usr/lib/foo || framework_failure_
touch usr/lib/foo/foo || framework_failure_

ln -sr usr/lib/foo/foo usr/bin/foo
test $(readlink usr/bin/foo) = '../lib/foo/foo' || fail=1

ln -sr usr/bin/foo usr/lib/foo/link-to-foo
test $(readlink usr/lib/foo/link-to-foo) = 'foo' || fail=1

# Correctly update an existing link, which was broken in <= 8.21
ln -s dir1/dir2/f existing_link
ln -srf here existing_link
test $(readlink existing_link) = 'here' || fail=1

# Demonstrate resolved symlinks used to generate relative links
# so here, 'web/latest' will not be linked to the intermediate 'latest' link.
# You'd probably want to use realpath(1) in conjunction
# with ln(1) without --relative to give greater control.
ln -s release1 alpha
ln -s release2 beta
ln -s beta latest
mkdir web
ln -sr latest web/latest
test $(readlink web/latest) = '../release2' || fail=1

# Expect this to fail with exit status 1, or to succeed quietly (freebsd).
# Prior to coreutils-8.23, it would segfault.
ln -sr '' F
case $? in [01]) ;; *) fail=1;; esac

Exit $fail
#!/bin/sh
# Test "ln -sf".

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ln

echo foo > a || framework_failure_

# Check that a target directory of '.' is supported
# and that indirectly specifying the same target and link name
# through that is detected.
ln -s . b || framework_failure_
ln -sf a b > err 2>&1 && fail=1
case $(cat err) in
  *'are the same file') ;;
  *) fail=1 ;;
esac

# Ensure we replace symlinks that don't or can't link to an existing target.
# coreutils-8.22 would fail to replace {ENOTDIR,ELOOP,ENAMETOOLONG}_link below.
name_max_plus1=$(expr $(stat -f -c %l .) + 1)
test $name_max_plus1 -gt 1 || skip_ 'Error determining NAME_MAX'
long_name=$(printf '%0*d' $name_max_plus1 0)
for f in '' f; do
  ln -s$f missing ENOENT_link || fail=1
  ln -s$f a/b ENOTDIR_link || fail=1
  ln -s$f ELOOP_link ELOOP_link || fail=1
  ln -s$f "$long_name" ENAMETOOLONG_link || fail=1
done

Exit $fail
#!/bin/sh
# ensure that touch f; ln -T f no-such-file/ does not mistakenly succeed

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ln

touch f || framework_failure_


# Before coreutils-7.6, this would succeed on Solaris 10
returns_ 1 ln -T f no-such-file/ || fail=1
test -e no-such-file && fail=1

Exit $fail
#!/bin/sh
# Test "ln --target-dir" with one file.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Before coreutils-4.5.3, --target-dir didn't work with one file.
# It would create the desired link, but would fail with a diagnosis like this:
# ln: 'd/.': cannot overwrite directory
# Based on a test case from Dmitry V. Levin.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ln

mkdir d || framework_failure_
ln -s --target-dir=d ../f || fail=1

Exit $fail
#!/bin/sh
# Ensure ls output is aligned when using abbreviated months from the locale

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

for mon in $(seq -w 12); do
    touch -d"+$mon month" $mon.ts || framework_failure_
done


# Note some of the following locales may be missing but if so
# we should fail back to the C locale which should be aligned

for format in "%b" "[%b" "%b]" "[%b]"; do
  for LOC in C gv_GB ga_IE fi_FI.utf8 zh_CN ar_SY $LOCALE_FR_UTF8; do
    # The sed usage here is slightly different from the original,
    # removing the \(.*\), to avoid triggering misbehavior in at least
    # GNU sed 4.2 (possibly miscompiled) on Mac OS X (Darwin 9.8.0).
    n_widths=$(
      LC_ALL=$LOC TIME_STYLE=+"$format" ls -lgG *.ts |
      LC_ALL=C sed 's/.\{15\}//;s/ ..\.ts$//;s/ /./g' |
      while read mon; do echo "$mon" | LC_ALL=$LOC wc -L; done |
      uniq | wc -l
    )
    test "$n_widths" = "1" || { fail=1; break 2; }
  done
done
if test "$fail" = "1"; then
   echo "misalignment detected in $LOC locale:"
   LC_ALL=$LOC TIME_STYLE=+%b ls -lgG *.ts
fi

Exit $fail
#!/bin/sh
# Exercise ls --block-size and related options.

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

TZ=UTC0
export TZ

mkdir sub
cd sub

for size in 1024 4096 262144; do
  echo foo | dd conv=sync bs=$size >file$size || fail=1
done
touch -d '2001-01-01 00:00' file* || fail=1

size_etc='s/[^ ]* *[^ ]* *//'

ls -og * | sed "$size_etc" >../out || fail=1
POSIXLY_CORRECT=1 ls -og * | sed "$size_etc" >>../out || fail=1
POSIXLY_CORRECT=1 ls -k -og * | sed "$size_etc" >>../out || fail=1

for var in BLOCKSIZE BLOCK_SIZE LS_BLOCK_SIZE; do
  for blocksize in 1 512 1K 1KiB; do
    (eval $var=$blocksize && export $var &&
     ls -og * &&
     ls -og -k * &&
     ls -og -k --block-size=$blocksize *
    ) | sed "$size_etc" >>../out || fail=1
  done
done

cd ..

cat >exp <<'EOF'
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
2 Jan  1  2001 file1024
512 Jan  1  2001 file262144
8 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
2 Jan  1  2001 file1024
512 Jan  1  2001 file262144
8 Jan  1  2001 file4096
2 Jan  1  2001 file1024
512 Jan  1  2001 file262144
8 Jan  1  2001 file4096
2 Jan  1  2001 file1024
512 Jan  1  2001 file262144
8 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
1024 Jan  1  2001 file1024
262144 Jan  1  2001 file262144
4096 Jan  1  2001 file4096
2 Jan  1  2001 file1024
512 Jan  1  2001 file262144
8 Jan  1  2001 file4096
2 Jan  1  2001 file1024
512 Jan  1  2001 file262144
8 Jan  1  2001 file4096
2 Jan  1  2001 file1024
512 Jan  1  2001 file262144
8 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
1 Jan  1  2001 file1024
256 Jan  1  2001 file262144
4 Jan  1  2001 file4096
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure "ls --color" properly colorizes file with capability.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls printf
require_root_

grep '^#define HAVE_CAP 1' $CONFIG_HEADER > /dev/null \
  || skip_ "configured without libcap support"

(setcap --help) 2>&1 |grep 'usage: setcap' > /dev/null \
  || skip_ "setcap utility not found"

# Don't let a different umask perturb the results.
umask 22

# We create 2 files of the same name as
# before coreutils 8.1 only the name rather than
# the full path was used to read the capabilities
# thus giving false positives and negatives.
mkdir test test/dir
cd test
touch cap_pos dir/cap_pos dir/cap_neg
for file in cap_pos dir/cap_neg; do
  setcap 'cap_net_bind_service=ep' $file ||
    skip_ "setcap doesn't work"
done

code='30;41'
# Note we explicitly disable "executable" coloring
# so that capability coloring is not dependent on it,
# as was the case before coreutils 8.1
for ex in '' ex=:; do
  LS_COLORS="di=:${ex}ca=$code" \
    ls --color=always cap_pos dir > out || fail=1

  env printf "\
\e[0m\e[${code}mcap_pos\e[0m

dir:
\e[${code}mcap_neg\e[0m
cap_pos
" > out_ok || framework_failure_

  compare out out_ok || fail=1
done

Exit $fail
#!/bin/sh
# ensure that ls --color works well when a colored name is wrapped

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

long_name=zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.foo
touch $long_name || framework_failure_

e='\33'
color_code='0;31;42'
c_pre="$e[0m$e[${color_code}m"
c_post="$e[0m$e[K\n"
printf "$c_pre$long_name$c_post\n" > exp || framework_failure_

env TERM=xterm COLUMNS=80 LS_COLORS="*.foo=$color_code" TIME_STYLE=+T \
  ls -og --color=always $long_name > out || fail=1

# Append a newline, to accommodate less-capable versions of sed.
echo >> out || fail=1

sed 's/.*T //' out > k && mv k out

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure "ls --color" properly colors other-writable and sticky directories.
# Before coreutils-6.2, this test would fail, coloring all three
# directories the same as the first one -- but only on a file system
# with dirent.d_type support.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

# Don't let a different umask perturb the results.
umask 22

mkdir d other-writable sticky || framework_failure_
chmod o+w other-writable || framework_failure_
chmod o+t sticky || framework_failure_


TERM=xterm ls --color=always > out || fail=1
cat -A out > o1 || fail=1
mv o1 out || fail=1

cat <<\EOF > exp || fail=1
^[[0m^[[01;34md^[[0m$
^[[34;42mother-writable^[[0m$
out$
^[[37;44msticky^[[0m$
EOF

compare exp out || fail=1

rm exp

# Turn off colors for other-writable dirs and ensure
# we fall back to the color for standard directories.

LS_COLORS="ow=:" ls --color=always > out || fail=1
cat -A out > o1 || fail=1
mv o1 out || fail=1

cat <<\EOF > exp || fail=1
^[[0m^[[01;34md^[[0m$
^[[01;34mother-writable^[[0m$
out$
^[[37;44msticky^[[0m$
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure "ls --color" properly colors "normal" text and files.
# I.e., that it uses NORMAL to style non file name output and
# file names with no associated color (unless FILE is also set).

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

# Don't let a different umask perturb the results.
umask 22

# Output time as something constant
export TIME_STYLE="+norm"

# helper to strip ls columns up to "norm" time
qls() { sed 's/-r.*norm/norm/'; }

touch exe || framework_failure_
chmod u+x exe || framework_failure_
touch nocolor || framework_failure_

TCOLORS="no=7:ex=01;32"

# Non coloured files inherit NORMAL attributes
LS_COLORS=$TCOLORS      ls -gGU --color exe nocolor | qls >> out || fail=1
LS_COLORS=$TCOLORS      ls -xU  --color exe nocolor       >> out || fail=1
LS_COLORS=$TCOLORS      ls -gGU --color nocolor exe | qls >> out || fail=1
LS_COLORS=$TCOLORS      ls -xU  --color nocolor exe       >> out || fail=1

# NORMAL does not override FILE though
LS_COLORS=$TCOLORS:fi=1 ls -gGU --color nocolor exe | qls >> out || fail=1

# Support uncolored ordinary files that do _not_ inherit from NORMAL.
# Note there is a redundant RESET output before a non colored
# file in this case which may be removed in future.
LS_COLORS=$TCOLORS:fi=  ls -gGU --color nocolor exe | qls >> out || fail=1
LS_COLORS=$TCOLORS:fi=0 ls -gGU --color nocolor exe | qls >> out || fail=1

# A caveat worth noting is that commas (-m), indicator chars (-F)
# and the "total" line, do not currently use NORMAL attributes
LS_COLORS=$TCOLORS      ls -mFU --color nocolor exe       >> out || fail=1

# Ensure no coloring is done unless enabled
LS_COLORS=$TCOLORS      ls -gGU         nocolor exe | qls >> out || fail=1

cat -A out > out.display || framework_failure_
mv out.display out || framework_failure_

cat <<\EOF > exp || framework_failure_
^[[0m^[[7mnorm ^[[m^[[01;32mexe^[[0m$
^[[7mnorm nocolor^[[0m$
^[[0m^[[7m^[[m^[[01;32mexe^[[0m  ^[[7mnocolor^[[0m$
^[[0m^[[7mnorm nocolor^[[0m$
^[[7mnorm ^[[m^[[01;32mexe^[[0m$
^[[0m^[[7mnocolor^[[0m  ^[[7m^[[m^[[01;32mexe^[[0m$
^[[0m^[[7mnorm ^[[m^[[1mnocolor^[[0m$
^[[7mnorm ^[[m^[[01;32mexe^[[0m$
^[[0m^[[7mnorm ^[[m^[[mnocolor^[[0m$
^[[7mnorm ^[[m^[[01;32mexe^[[0m$
^[[0m^[[7mnorm ^[[m^[[0mnocolor^[[0m$
^[[7mnorm ^[[m^[[01;32mexe^[[0m$
^[[0m^[[7mnocolor^[[0m, ^[[7m^[[m^[[01;32mexe^[[0m*$
norm nocolor$
norm exe$
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure "ls --color" doesn't output colors for TERM=dumb

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

# Output time as something constant
export TIME_STYLE="+norm"

touch exe || framework_failure_
chmod u+x exe || framework_failure_

# output colors
LS_COLORS='' COLORTERM='nonempty' TERM='' ls --color=always exe >> out || fail=1
LS_COLORS='' COLORTERM='' TERM='xterm' ls --color=always exe >> out || fail=1

# Don't output colors
LS_COLORS='' COLORTERM='' TERM='dumb' ls --color=always exe >> out || fail=1
LS_COLORS='' COLORTERM='' TERM='' ls --color=always exe >> out || fail=1

cat -A out > out.display || framework_failure_
mv out.display out || framework_failure_

cat <<\EOF > exp || framework_failure_
^[[0m^[[01;32mexe^[[0m$
^[[0m^[[01;32mexe^[[0m$
exe$
exe$
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Make sure ls properly handles dangling symlinks vs. ls's -L, -H, options.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

LS_MINOR_PROBLEM=1
LS_FAILURE=2

ln -s no-such-file dangle || framework_failure_
mkdir -p dir/sub || framework_failure_
ln -s dir slink-to-dir || framework_failure_
mkdir d || framework_failure_
ln -s no-such d/dangle || framework_failure_
printf '? dangle\n' > subdir_Li_exp || framework_failure_
printf 'total 0\n? dangle\n' > subdir_Ls_exp || framework_failure_

# This must exit nonzero.
returns_ $LS_FAILURE ls -L dangle > /dev/null 2>&1 || fail=1
# So must this.
returns_ $LS_FAILURE ls -H dangle > /dev/null 2>&1 || fail=1

# This must exit successfully.
ls dangle >> out || fail=1

ls slink-to-dir >> out 2>&1 || fail=1
ls -H slink-to-dir >> out 2>&1 || fail=1
ls -L slink-to-dir >> out 2>&1 || fail=1

cat <<\EOF > exp
dangle
sub
sub
sub
EOF

compare exp out || fail=1

# Ensure that ls -Li prints "?" as the inode of a dangling symlink.
rm -f out
returns_ $LS_MINOR_PROBLEM ls -Li d > out 2>/dev/null || fail=1
compare subdir_Li_exp out || fail=1

# Ensure that ls -Ls prints "?" as the allocation of a dangling symlink.
rm -f out
returns_ $LS_MINOR_PROBLEM ls -Ls d > out 2>/dev/null || fail=1
compare subdir_Ls_exp out || fail=1

Exit $fail
#!/bin/sh
# make sure --dired option works

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

mkdir dir || framework_failure_


LC_MESSAGES=C ls -lR --dired dir > out || fail=1
cat <<EOF > exp
  dir:
  total 0
//SUBDIRED// 2 5
//DIRED-OPTIONS// --quoting-style=literal
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# contrast ls -F, ls -p, and ls --indicator-style=file-type

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

mkdir sub
cd sub
mkdir dir
touch regular executable
chmod a+x executable
ln -s regular slink-reg
ln -s dir slink-dir
ln -s nowhere slink-dangle
mknod block b 20 20 2> /dev/null && block="block
"
mknod char c 10 10 2> /dev/null && char="char
"
mkfifo_or_skip_ fifo
cd ..



ls -F sub > out || fail=1
cat <<EOF > exp
$block${char}dir/
executable*
fifo|
regular
slink-dangle@
slink-dir@
slink-reg@
EOF

sed 's/\*//' exp > exp2
ls --indicator-style=file-type sub > out2 || fail=1

sed 's/[@|]$//' exp2 > exp3
ls -p sub > out3 || fail=1

compare exp out || fail=1

compare exp2 out2 || fail=1

compare exp3 out3 || fail=1

ls --color=auto -F sub > out || fail=1
compare exp out || fail=1

Exit $fail
#!/bin/sh
# make sure ls -L always follows symlinks

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

LS_FAILURE=2

# Isolate output files from directory being listed
mkdir dir dir/sub dir1 || framework_failure_
cd dir || framework_failure_
ln -s link link || framework_failure_
ln -s ../../dir1 sub/link-to-dir || framework_failure_

# Make sure the symlink was created.
# 'ln -s link link' succeeds, but creates no file on
# systems running some DJGPP-2.03 libc.
ls -F link > /dev/null || framework_failure_


# When explicitly listing a broken link, the command must fail.
returns_ $LS_FAILURE ls -L link 2> /dev/null || fail=1

# When encountering a broken link implicitly, Solaris 9 and OpenBSD 3.4
# list the link, provided no further information about the link needed
# to be printed.  Since POSIX does not specify one way or the other, we
# opt for compatibility (this was broken in 5.3.0 through 5.94).
LC_ALL=C ls -L > ../out-L || fail=1
LC_ALL=C ls -FLR sub > ../out-FLR-sub || fail=1

cd .. || fail=1

cat <<\EOF > exp-L
link
sub
EOF

cat <<\EOF > exp-FLR-sub
sub:
link-to-dir/

sub/link-to-dir:
EOF

compare exp-L out-L || fail=1
compare exp-FLR-sub out-FLR-sub || fail=1

Exit $fail
#!/bin/sh
# Show that we've eliminated most of ls' failing getxattr syscalls,
# regardless of how many files are in a directory we list.
# This test is skipped on systems that lack LD_PRELOAD support; that's fine.
# Similarly, on a system that lacks getxattr altogether, skipping it is fine.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls
require_gcc_shared_

# Replace each getxattr and lgetxattr call with a call to these stubs.
# Count those and write the total number of calls to the file "x"
# via a global destructor.
cat > k.c <<'EOF' || framework_failure_
#include <errno.h>
#include <stdio.h>
#include <sys/types.h>

static unsigned long int n_calls;

static void __attribute__ ((destructor))
print_call_count (void)
{
  FILE *fp = fopen ("x", "w"); if (!fp) return;
  fprintf (fp, "%lu\n", n_calls); fclose (fp);
}

static ssize_t incr () { ++n_calls; errno = ENOTSUP; return -1; }
ssize_t getxattr (const char *path, const char *name, void *value, size_t size)
{ return incr (); }
ssize_t lgetxattr(const char *path, const char *name, void *value, size_t size)
{ return incr (); }
EOF

# Then compile/link it:
gcc_shared_ k.c k.so \
  || framework_failure_ 'failed to build shared library'

# Create a few files:
seq 20 | xargs touch || framework_failure_

# Finally, run the test:
LD_PRELOAD=$LD_PRELOAD:./k.so ls --color=always -l . || fail=1

test -f x || skip_ "internal test failure: maybe LD_PRELOAD doesn't work?"

# Ensure that there were no more than 3 *getxattr calls.
n_calls=$(cat x)
test "$n_calls" -le 3 || fail=1

Exit $fail
#!/bin/sh
# accept hex/oct numbers to -w and -T

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

ls -x -T0x10 -w010 || fail=1

Exit $fail
#!/bin/sh
# show that the following no longer makes ls infloop
# mkdir loop; cd loop; ln -s ../loop sub; ls -RL
# Also ensure ls exits with status = 2 in that case.
# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

mkdir loop || framework_failure_
ln -s ../loop loop/sub || framework_failure_

cat <<\EOF > exp-out || framework_failure_
loop:
sub
EOF

cat <<\EOF > exp-err || framework_failure_
ls: loop/sub: not listing already-listed directory
EOF

timeout 10 ls -RL loop >out 2>err
# Ensure that ls exits with status 2 upon detecting a cycle
test $? = 2 || fail=1

compare exp-err err || fail=1
compare exp-out out || fail=1

Exit $fail
#!/bin/sh
# Make sure that ls -i works properly on symlinks.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

touch f || framework_failure_
ln -s f slink || framework_failure_


# When listed explicitly:

set x $(ls -Ci f slink); shift
test $# = 4 || fail=1
# The inode numbers should differ.
test "$1" != "$3" || fail=1

set x $(ls -CLi f slink); shift
test $# = 4 || fail=1
# With -L, they must be the same.
test "$1" = "$3" || fail=1

set x $(ls -CHi f slink); shift
test $# = 4 || fail=1
# With -H, they must be the same, too, from the command line.
# Note that POSIX says -H must make ls dereference only
# symlinks (specified on the command line) to directories,
# but the historical BSD meaning of -H is to dereference
# any symlink given on the command line.  For compatibility GNU ls
# implements the BSD semantics.
test "$1" = "$3" || fail=1

# When listed from a directory:

set x $(ls -Ci); shift
test $# = 4 || fail=1
# The inode numbers should differ.
test "$1" != "$3" || fail=1

set x $(ls -CLi); shift
test $# = 4 || fail=1
# With -L, they must be the same.
test "$1" = "$3" || fail=1

set x $(ls -CHi); shift
test $# = 4 || fail=1
# With -H, they must be different from inside a directory.
test "$1" != "$3" || fail=1

Exit $fail
#!/bin/sh
# exercise the -m option

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

seq 2000 > b || framework_failure_
touch a || framework_failure_


# Before coreutils-5.1.1, the following would output a space after the comma.
ls -w2 -m a b > out || fail=1

# Before coreutils-5.1.1, the following would produce leading white space.
# All of the sed business is because the sizes are not portable.
ls -sm a b | sed 's/^[0-9]/0/;s/, [0-9][0-9]* b/, 12 b/' >> out || fail=1
cat <<\EOF > exp || fail=1
a,
b
0 a, 12 b
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure "ls --color" properly colorizes hard linked files.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls
working_umask_or_skip_

touch file file1 || framework_failure_
ln file1 file2 || skip_ "can't create hard link"
code_mh='44;37'
code_ex='01;32'
code_png='01;35'
c0=$(printf '\033[0m')
c_mh=$(printf '\033[%sm' $code_mh)
c_ex=$(printf '\033[%sm' $code_ex)
c_png=$(printf '\033[%sm' $code_png)

# regular file - not hard linked
LS_COLORS="mh=$code_mh" ls -U1 --color=always file > out || fail=1
printf "file\n" > out_ok || framework_failure_
compare out out_ok || fail=1

# hard links
LS_COLORS="mh=$code_mh" ls -U1 --color=always file1 file2 > out || fail=1
printf "$c0${c_mh}file1$c0
${c_mh}file2$c0
" > out_ok || framework_failure_
compare out out_ok || fail=1

# hard links and png (hard link coloring takes precedence)
mv file2 file2.png || framework_failure_
LS_COLORS="mh=$code_mh:*.png=$code_png" ls -U1 --color=always file1 file2.png \
  > out || fail=1
printf "$c0${c_mh}file1$c0
${c_mh}file2.png$c0
" > out_ok || framework_failure_
compare out out_ok || fail=1

# hard links and exe (exe coloring takes precedence)
chmod a+x file2.png || framework_failure_
LS_COLORS="mh=$code_mh:*.png=$code_png:ex=$code_ex" \
  ls -U1 --color=always file1 file2.png > out || fail=1
chmod a-x file2.png || framework_failure_
printf "$c0${c_ex}file1$c0
${c_ex}file2.png$c0
" > out_ok || framework_failure_
compare out out_ok || fail=1

# hard links and png (hard link coloring disabled => png coloring enabled)
LS_COLORS="mh=00:*.png=$code_png" ls -U1 --color=always file1 file2.png > out \
  || fail=1
printf "file1
$c0${c_png}file2.png$c0
" > out_ok || framework_failure_
compare out out_ok || fail=1

# hard links and png (hard link coloring not enabled explicitly => png coloring)
LS_COLORS="*.png=$code_png" ls -U1 --color=always file1 file2.png > out \
  || fail=1
printf "file1
$c0${c_png}file2.png$c0
" > out_ok || framework_failure_
compare out out_ok || fail=1

Exit $fail
#!/bin/sh
# Ensure that ls -l works on files with nameless uid and/or gid

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

require_root_
require_perl_

nameless_uid=$($PERL -e '
  foreach my $i (1000..16*1024) { getpwuid $i or (print "$i\n"), exit }
')

if test x$nameless_uid = x; then
  skip_ "couldn't find a nameless UID"
fi

touch f || framework_failure_
chown $nameless_uid f || framework_failure_


set -- $(ls -o f) || fail=1
test $3 = $nameless_uid || fail=1

Exit $fail
#!/bin/sh
# make sure ls and 'ls -R' do the right thing when invoked with no arguments.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

mkdir -p dir/subdir || framework_failure_
touch dir/subdir/file2 || framework_failure_
ln -s f symlink || framework_failure_

cat > exp <<\EOF || framework_failure_
dir
exp
out
symlink
EOF


ls -1 > out || fail=1

compare exp out || fail=1

cat > exp <<\EOF
.:
dir
exp
out
symlink

./dir:
subdir

./dir/subdir:
file2
EOF

ls -R1 > out || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# ensure that an empty "ca=" attribute disables ls's capability-checking

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls
require_strace_ capget

LS_COLORS=ca=1; export LS_COLORS
strace -e capget ls --color=always > /dev/null 2> out || fail=1
$EGREP 'capget\(' out || skip_ "your ls doesn't call capget"

rm -f out

LS_COLORS=ca=:; export LS_COLORS
strace -e capget ls --color=always > /dev/null 2> out || fail=1
$EGREP 'capget\(' out && fail=1

Exit $fail
#!/bin/sh
# ls -l /proc/sys would segfault when built against libselinux1 2.0.15-2+b1

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

f=/proc/sys
test -r $f || f=.

ls -l $f > out || fail=1

Exit $fail
#!/bin/sh
# ensure that ls -i works also for mount points

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

# We use --local here so as to not activate
# potentially very many remote mounts.
df --local --out=target | sed -n '/^\/./p' > mount_points
test -s mount_points ||
  skip_ "this test requires a non-root mount point"

# Given e.g., /dev/shm, produce the list of GNU ls options that
# let us list just that entry using readdir data from its parent:
# ls -i -I '[^s]*' -I 's[^h]*' -I 'sh[^m]*' -I 'shm?*' -I '.?*' \
# -I '?' -I '??' /dev

ls_ignore_options()
{
  name=$1
  opts="-I '.?*' -I '$name?*'"
  while :; do
    glob=$(echo "$name"|sed 's/\(.*\)\(.\)$/\1[^\2]*/')
    opts="$opts -I '$glob'"
    name=$(echo "$name"|sed 's/.$//')
    test -z "$name" && break
    glob=$(echo "$name"|sed 's/./?/g')
    opts="$opts -I '$glob'"
  done
  echo "$opts"
}

inode_via_readdir()
{
  mount_point=$1
  base=$(basename "$mount_point")
  case "$base" in
    .*) skip_ 'mount point component starts with "."' ;;
    *[*?]*) skip_ 'mount point component contains "?" or "*"' ;;
  esac
  opts=$(ls_ignore_options "$base")
  parent_dir=$(dirname "$mount_point")
  eval "ls -i $opts '$parent_dir'" | sed 's/ .*//'
}

while read dir; do
  readdir_inode=$(inode_via_readdir "$dir")
  test $? = 77 && continue
  stat_inode=$(timeout 1 stat --format=%i "$dir")
  # If stat fails or says the inode is 0, skip $dir.
  case $stat_inode in 0|'') continue;; esac
  test "$readdir_inode" = "$stat_inode" || fail=1
done < mount_points

Exit $fail
#!/bin/sh
# 4.1.1 and 4.1.2 had a bug whereby some recursive listings
# didn't include a blank line between per-directory groups of files.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

mkdir x y a b c a/1 a/2 a/3 || framework_failure_
touch f a/1/I a/1/II || framework_failure_


# This first example is from Andreas Schwab's bug report.
ls -R1 a b c > out || fail=1
cat <<EOF > exp
a:
1
2
3

a/1:
I
II

a/2:

a/3:

b:

c:
EOF

compare exp out || fail=1

rm -rf out exp
ls -R1 x y f > out || fail=1
cat <<EOF > exp
f

x:

y:
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Exercise the 8.17 ls bug with coloring relative-named symlinks in "/".

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls test

symlink_to_rel=
for i in /*; do
  # Skip non-symlinks:
  env test -h "$i" || continue

  # Skip dangling symlinks:
  env test -e "$i" || continue

  # Skip any symlink-to-absolute-name:
  case $(readlink "$i") in /*) continue ;; esac

  symlink_to_rel=$i
  break
done

test -z "$symlink_to_rel" \
  && skip_ no relative symlink in /

e='\33'
color_code='01;36'
c_pre="$e[0m$e[${color_code}m"
c_post="$e[0m"
printf "$c_pre$symlink_to_rel$c_post\n" > exp || framework_failure_

env TERM=xterm LS_COLORS="ln=$color_code:or=1;31;42" \
  ls -d --color=always "$symlink_to_rel" > out || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Make sure name is used as secondary key when sorting on mtime or ctime.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls touch

date=1998-01-15

touch -d "$date" c || framework_failure_
touch -d "$date" a || framework_failure_
touch -d "$date" b || framework_failure_


ls -1t a b c > out || fail=1
cat <<EOF > exp
a
b
c
EOF
compare exp out || fail=1

rm -rf out exp
ls -1rt a b c > out || fail=1
cat <<EOF > exp
c
b
a
EOF
compare exp out || fail=1

Exit $fail
#!/bin/sh
# verify that ls -lL works when applied to a symlink to an ACL'd file

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

require_setfacl_

touch k || framework_failure_
setfacl -m user::r-- k || framework_failure_
ln -s k s || framework_failure_

set _ $(ls -Log s); shift; link=$1
set _ $(ls -og k);  shift; reg=$1

test "$link" = "$reg" || fail=1

Exit $fail
#!/bin/sh
# Ensure that ls --file-type does not call stat unnecessarily.
# Also check for the dtype-related (and fs-type dependent) bug
# in coreutils-6.0 that made ls -CF columns misaligned.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# The trick is to create an un-stat'able symlink and to see if ls
# can report its type nonetheless, using dirent.d_type.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

# Skip this test unless "." is on a file system with useful d_type info.
# FIXME: This uses "ls -p" to decide whether to test "ls" with other options,
# but if ls's d_type code is buggy then "ls -p" might be buggy too.
mkdir -p c/d || framework_failure_
chmod a-x c || framework_failure_
if test "X$(ls -p c 2>&1)" != Xd/; then
  skip_ "'.' is not on a suitable file system for this test"
fi

mkdir d || framework_failure_
ln -s / d/s || framework_failure_
chmod 600 d || framework_failure_

mkdir -p e/a2345 e/b || framework_failure_
chmod 600 e || framework_failure_


ls --file-type d > out || fail=1
cat <<\EOF > exp || fail=1
s@
EOF

compare exp out || fail=1

rm -f out exp
# Check for the ls -CF misaligned-columns bug:
ls -CF e > out || fail=1

# coreutils-6.0 would print two spaces after the first slash,
# rather than the appropriate TAB.
printf 'a2345/\tb/\n' > exp || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Verify that ls works properly when it fails to stat a file that is
# not mentioned on the command line.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls
skip_if_root_

LS_MINOR_PROBLEM=1

mkdir d || framework_failure_
ln -s / d/s || framework_failure_
chmod 600 d || framework_failure_


ls -Log d > out
test $? = 1 || fail=1

# Linux 2.6.32 client with Isilon OneFS always returns d_type==DT_DIR ('d')
# Newer Linux 3.10.0 returns the more correct DT_UNKNOWN ('?')
grep '^[l?]?' out || skip_ 'unrecognized d_type returned'

cat <<\EOF > exp || framework_failure_
total 0
?????????? ? ?            ? s
EOF

sed 's/^l/?/' out | compare exp - || fail=1

# Ensure that the offsets in --dired output are accurate.
rm -f out exp
returns_ $LS_MINOR_PROBLEM ls --dired -l d > out || fail=1

cat <<\EOF > exp || framework_failure_
  total 0
  ?????????? ? ? ? ?            ? s
//DIRED// 44 45
//DIRED-OPTIONS// --quoting-style=literal
EOF

sed 's/^  l/  ?/' out | compare exp - || fail=1

Exit $fail
#!/bin/sh
# Show that --color need not use stat, as long as we have d_type support.

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

# Note this list of _file name_ stat functions must be
# as cross platform as possible and so doesn't include
# fstatat64 as that's not available on aarch64 for example.
stats='stat,lstat,stat64,lstat64,newfstatat'

require_strace_ $stats
require_dirent_d_type_

# Disable enough features via LS_COLORS so that ls --color
# can do its job without calling stat (other than the obligatory
# one-call-per-command-line argument).
cat <<EOF > color-without-stat || framework_failure_
RESET 0
DIR 01;34
LINK 01;36
FIFO 40;33
SOCK 01;35
DOOR 01;35
BLK 40;33;01
CHR 40;33;01
ORPHAN 00
SETUID 00
SETGID 00
CAPABILITY 00
STICKY_OTHER_WRITABLE 00
OTHER_WRITABLE 00
STICKY 00
EXEC 00
MULTIHARDLINK 00
EOF
eval $(dircolors -b color-without-stat)

# The system may perform additional stat-like calls before main.
# Furthermore, underlying library functions may also implicitly
# add an extra stat call, e.g. opendir since glibc-2.21-360-g46f894d.
# To avoid counting those, first get a baseline count for running
# ls with one empty directory argument.  Then, compare that with the
# invocation under test.
mkdir d || framework_failure_

strace -o log1 -e $stats ls --color=always d || fail=1
n_stat1=$(wc -l < log1) || framework_failure_

test $n_stat1 = 0 \
  && skip_ 'No stat calls recognized on this platform'

# Populate the test directory.
mkdir d/subdir \
  && touch d/regf \
  && ln d/regf d/hlink \
  && ln -s regf d/slink \
  && ln -s nowhere d/dangle \
  || framework_failure_

# Invocation under test.
strace -o log2 -e $stats ls --color=always d || fail=1
n_stat2=$(wc -l < log2) || framework_failure_

# Expect the same number of stat calls.
test $n_stat1 = $n_stat2 \
  || { fail=1; head -n30 log*; }

Exit $fail
#!/bin/sh
# ensure that ls does not stat a symlink in an unusual case

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls
require_strace_ stat

touch x || framework_failure_
chmod a+x x || framework_failure_
ln -s x link-to-x || framework_failure_


# ls from coreutils 6.9 would unnecessarily stat a symlink in an unusual case:
# When not coloring orphan and missing entries, and without ln=target,
# ensure that ls -F (or -d, or -l: i.e., when not dereferencing)
# does not stat a symlink to directory, and does still color that
# symlink and an executable file properly.

LS_COLORS='or=0:mi=0:ex=01;32:ln=01;35' \
  strace -qe stat ls -F --color=always x link-to-x > out.tmp 2> err || fail
# Elide info messages strace can send to stdout of the form:
#   [ Process PID=1234 runs in 32 bit mode. ]
sed '/Process PID=/d' out.tmp > out

# With coreutils 6.9 and earlier, this file would contain a
# line showing ls had called stat on "x".
grep '^stat("x"' err && fail=1

# Check that output is colorized, as requested, too.
{
  printf '\033[0m\033[01;35mlink-to-x\033[0m@\n'
  printf '\033[01;32mx\033[0m*\n'
} > exp || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that d_ino (from ls -di) and st_ino (from stat --format=%i) match.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls


root_dev_ino=$(stat --format=%d-%i /)
t=$(pwd)
while :; do
  ls -i1 "$t" > tmp
  if test $? = 0; then
    # Extract the inode number from the first line of output from ls -i1.
    # This value comes from dirent.d_ino, on systems with d_ino support.
    d_ino=$(sed -n '1s/^ *\([0-9][0-9]*\) .*/\1/p;q' tmp)

    # Extract the name of the corresponding directory entry.
    file=$(sed -n '1s/^ *[0-9][0-9]* //p;q' tmp)

    # Get its inode number (stat.st_ino) via stat(1)'s call to lstat.
    st_ino=$(stat --format=%i "$t/$file")

    # Make sure that they are the same.
    # We know from experience that there may be mismatches on some
    # buggy file systems, at mount points.
    # Note that when a directory contains only entries whose names
    # start with ".", d_ino and file will both be empty.  In that case,
    # skip the test.
    if test -n "$d_ino" && test "$d_ino" != "$st_ino"; then
      echo "$0: test failed: $t/$file: d_ino($d_ino) != st_ino($st_ino)
        This may indicate a flaw in your kernel or file system implementation.
        The flaw isn't serious for coreutils, but it might break other tools,
        so you should report it to your operating system vendor." 1>&2

      fail=1
      break
    fi
  fi

  t=$(cd "$t/.."; pwd)
  dev_ino=$(stat --format=%d-%i "$t")
  test $dev_ino = $root_dev_ino && break
done

Exit $fail
#!/bin/sh
# Do dereference a symlink arg if its name is written with a trailing slash.

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

mkdir dir || framework_failure_
ln -s dir symlink || framework_failure_

set $(ls -l symlink/)

# Prior to fileutils-4.0k, the following would have output '... symlink -> dir'.
test "$*" = 'total 0' && : || fail=1

Exit $fail
#!/bin/sh
# Ensure that an invalid --time-style=ARG is diagnosed the way we want.

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

ls -l --time-style=XX > out 2> err
test $? = 2 || fail=1

cat <<\EOF > exp || fail=1
ls: invalid argument 'XX' for 'time style'
Valid arguments are:
  - [posix-]full-iso
  - [posix-]long-iso
  - [posix-]iso
  - [posix-]locale
  - +FORMAT (e.g., +%H:%M) for a 'date'-style format
Try 'ls --help' for more information.
EOF

compare exp err || fail=1
compare /dev/null out || fail=1

Exit $fail
#!/bin/sh
# exercise the -w option

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls
getlimits_

touch a b || framework_failure_
chmod a+x a || framework_failure_

# Negative values disallowed
returns_ 2 ls -w-1 || fail=1

# Verify octal parsing (especially since 0 is allowed)
returns_ 2 ls -w08 || fail=1

# Overflowed values are capped at SIZE_MAX
ls -w$SIZE_OFLOW || fail=1

# After coreutils 8.24 -w0 means no limit
# and delimiting with spaces
ls -w0 -x -T1 a b > out || fail=1
printf '%s\n' 'a  b' > exp || framework_failure_
compare exp out || fail=1

# Ensure that 0 line length doesn't cause division by zero
TERM=xterm ls -w0 -x --color=always || fail=1

# coreutils <= 8.24 could display 1 column too few
ls -w4 -x -T0 a b > out || fail=1
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Exercise the -x option.

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

mkdir subdir || framework_failure_
touch subdir/b || framework_failure_
touch subdir/a || framework_failure_


# Coreutils 6.8 and 6.9 would output this in the wrong order.
ls -x subdir > out || fail=1
ls -rx subdir >> out || fail=1
cat <<\EOF > exp || fail=1
a  b
b  a
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that arch output is equal to uname -m

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ arch

arch > out || fail=1
uname -m > exp || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that cat outputs processed data immediately.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cat

# Use a fifo rather than a pipe in the tests below
# so that the producer (cat) will wait until the
# consumer (dd) opens the fifo therefore increasing
# the chance that dd will read the data from each
# write separately.
mkfifo_or_skip_ fifo

# Terminate any background cp process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

echo 1 > exp

cat_buf_1()
{
  local delay="$1"

  > out || framework_failure_
  dd count=1 if=fifo > out & pid=$!
  (echo 1; sleep $delay; echo 2) | cat -v > fifo
  wait $pid
  compare exp out
}

retry_delay_ cat_buf_1 .1 6 || fail=1

Exit $fail
#!/bin/sh
# Ensure that cat -E produces same output as cat, module '$'s,
# even when applied to a file in /proc.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cat


f=/proc/cpuinfo
test -f $f \
  || skip_ "no $f"


# Yes, parts of /proc/cpuinfo might change between cat runs.
# If that happens, consider choosing a file that's less likely to change,
# or just filter out the changing lines.  The sed filter should help
# to avoid any spurious numeric differences.
cat -E $f | sed 's/[0-9][0-9]*/D/g' | tr -d '$' > out || fail=1
cat    $f | sed 's/[0-9][0-9]*/D/g' | tr -d '$' > exp || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Check that cat operates correctly when the input is the same as the output.

# Copyright 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cat

echo x >out || framework_failure_
echo x >out1 || framework_failure_
returns_ 1 cat out >>out || fail=1
compare out out1 || fail=1

# This example is taken from the POSIX spec for 'cat'.
echo x >doc || framework_failure_
echo y >doc.end || framework_failure_
cat doc doc.end >doc || fail=1
compare doc doc.end || fail=1

Exit $fail
#!/bin/sh
# Ensure that chcon fails when it should.
# These tests don't use any actual SE Linux syscalls.

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chcon


# neither context nor file
returns_ 1 chcon 2> /dev/null || fail=1

# No file
returns_ 1 chcon CON 2> /dev/null || fail=1

# No file
touch f
returns_ 1 chcon --reference=f 2> /dev/null || fail=1

# No file
returns_ 1 chcon -u anyone 2> /dev/null || fail=1

Exit $fail
#!/bin/sh
# exercise chcon

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chcon
require_root_
require_selinux_
skip_if_mcstransd_is_running_

mkdir -p d/sub/s2 || framework_failure_
touch f g d/sub/1 d/sub/2 || framework_failure_


# Set to a specified context.
# Use root:object_r:tmp_t:s0.  It is special in that
# it works even when mcstransd isn't running.
u1=root
r1=object_r
t1=tmp_t
range=s0
ctx=$u1:$r1:$t1:$range
chcon $ctx f || fail=1
stat --printf='f|%C\n' f > out || fail=1

# Use --reference.
chcon --ref=f g || fail=1
stat --printf='g|%C\n' g >> out || fail=1

# Change the individual parts of the context, one by one.
u2=user_u
r2=object_r
t2=unlabeled_t
for i in --user=$u2 --role=$r2 --type=$t2 --range=$range; do
  chcon $i f || fail=1
  stat --printf="f|$i|"'%C\n' f >> out || fail=1
done

# Same, but change back using the short-named options.
for i in -u$u1 -r$r1 -t$t1; do
  chcon $i f || fail=1
  stat --printf="f|$i|"'%C\n' f >> out || fail=1
done

cat <<EOF > exp || fail=1
f|$ctx
g|$ctx
f|--user=$u2|$u2:$r1:$t1:$range
f|--role=$r2|$u2:$r2:$t1:$range
f|--type=$t2|$u2:$r2:$t2:$range
f|--range=$range|$u2:$r2:$t2:$range
f|-uroot|root:object_r:$t2:$range
f|-robject_r|root:object_r:$t2:$range
f|-ttmp_t|root:object_r:tmp_t:$range
EOF

compare exp out || fail=1

chcon --verbose -u$u1 f > out || fail=1
echo "changing security context of 'f'" > exp
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Verify that the credentials are changed correctly.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chroot

require_root_

EXIT_CANCELED=125

grep '^#define HAVE_SETGROUPS 1' "$CONFIG_HEADER" >/dev/null \
  && HAVE_SETGROUPS=1

root=$(id -nu 0) || skip_ "Couldn't look up root username"

# verify numeric IDs looked up similarly to names
NON_ROOT_UID=$(id -u $NON_ROOT_USERNAME)
NON_ROOT_GROUP=$NON_ROOT_GID # Used where we want name lookups to occur

# "uid:" is supported (unlike chown etc.) since we treat it like "uid"
chroot --userspec=$NON_ROOT_UID: / true || fail=1

# verify that invalid groups are diagnosed
for g in ' ' ',' '0trail'; do
  returns_ $EXIT_CANCELED chroot --groups="$g" / id -G >invalid || fail=1
  compare /dev/null invalid || fail=1
done

# Verify that root credentials are kept.
test $(chroot / whoami) = "$root" || fail=1
test "$(groups)" = "$(chroot / groups)" || fail=1

# Verify that credentials are changed correctly.
whoami_after_chroot=$(
  chroot --userspec=$NON_ROOT_USERNAME:$NON_ROOT_GROUP / whoami
)
test "$whoami_after_chroot" != "$root" || fail=1

# Verify that when specifying only a group we don't change the
# list of supplemental groups
test "$(chroot --userspec=:$NON_ROOT_GROUP / id -G)" = \
     "$NON_ROOT_GID $(id -G)" || fail=1

if ! test "$HAVE_SETGROUPS"; then
  Exit $fail
fi


# Verify that there are no additional groups.
id_G_after_chroot=$(
  chroot --userspec=$NON_ROOT_USERNAME:$NON_ROOT_GROUP \
    --groups=$NON_ROOT_GROUP / id -G
)
test "$id_G_after_chroot" = $NON_ROOT_GID || fail=1

# Verify that when specifying only the user name we get all their groups
test "$(chroot --userspec=$NON_ROOT_USERNAME / id -G)" = \
     "$(id -G $NON_ROOT_USERNAME)" || fail=1

# Ditto with trailing : on the user name.
test "$(chroot --userspec=$NON_ROOT_USERNAME: / id -G)" = \
     "$(id -G $NON_ROOT_USERNAME)" || fail=1

# Verify that when specifying only the user and clearing supplemental groups
# that we only get the primary group
test "$(chroot --userspec=$NON_ROOT_USERNAME --groups='' / id -G)" = \
     $NON_ROOT_GID || fail=1

# Verify that when specifying only the UID we get all their groups
test "$(chroot --userspec=$NON_ROOT_UID / id -G)" = \
     "$(id -G $NON_ROOT_USERNAME)" || fail=1

# Verify that when specifying only the user and clearing supplemental groups
# that we only get the primary group. Note this variant with prepended '+'
# results in no lookups in the name database which could be useful depending
# on your chroot setup.
test "$(chroot --userspec=+$NON_ROOT_UID:+$NON_ROOT_GID --groups='' / id -G)" =\
     $NON_ROOT_GID || fail=1

# Verify that when specifying only a group we get the current user ID
test "$(chroot --userspec=:$NON_ROOT_GROUP / id -u)" = "$(id -u)" \
  || fail=1

# verify that arbitrary numeric IDs are supported
test "$(chroot --userspec=1234:+5678 --groups=' +8765,4321' / id -G)" \
  || fail=1

# demonstrate that extraneous commas are supported
test "$(chroot --userspec=1234:+5678 --groups=',8765,,4321,' / id -G)" \
  || fail=1

# demonstrate that --groups is not cumulative
test "$(chroot --groups='invalid ignored' --groups='' / id -G)" \
  || fail=1

if ! id -u +12342; then
  # Ensure supplemental groups cleared from some arbitrary unknown ID
  test "$(chroot --userspec=+12342:+5678 / id -G)" = '5678' || fail=1

  # Ensure we fail when we don't know what groups to set for an unknown ID
  returns_ $EXIT_CANCELED chroot --userspec=+12342 / true || fail=1
fi

Exit $fail
#!/bin/sh
# Verify that internal failure in chroot gives exact status.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chroot pwd

# These tests verify exact status of internal failure; since none of
# them actually run a command, we don't need root privileges
chroot # missing argument
test $? = 125 || fail=1
chroot --- / true # unknown option
test $? = 125 || fail=1

# chroot("/") succeeds for non-root users on some systems, but not all.
if chroot / true ; then
  can_chroot_root=1
  chroot / sh -c 'exit 2' # exit status propagation
  test $? = 2 || fail=1
  chroot / . # invalid command
  test $? = 126 || fail=1
  chroot / no_such # no such command
  test $? = 127 || fail=1
else
  test $? = 125 || fail=1
  can_chroot_root=0
fi

# Ensure that --skip-chdir fails with a non-"/" argument.
cat <<\EOF > exp || framework_failure_
chroot: option --skip-chdir only permitted if NEWROOT is old '/'
Try 'chroot --help' for more information.
EOF
chroot --skip-chdir . env pwd >out 2>err && fail=1
compare /dev/null out || fail=1
compare exp err || fail=1

# Ensure we chdir("/") appropriately when NEWROOT is old "/".
if test $can_chroot_root = 1; then
  ln -s / isroot || framework_failure_
  for dir in '/' '/.' '/../' isroot; do
    # Verify that chroot(1) succeeds and performs chdir("/")
    # (chroot(1) of coreutils-8.23 failed to run the latter).
    curdir=$(chroot "$dir" env pwd) || fail=1
    test "$curdir" = '/' || fail=1

    # Test the "--skip-chdir" option.
    curdir=$(chroot --skip-chdir "$dir" env pwd) || fail=1
    test "$curdir" = '/' && fail=1
  done
fi

Exit $fail
#!/bin/sh
# Ensure that several programs work fine, even with stdout initially closed.
# This is effectively a test of closeout.c's close_stdout function.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

p=$abs_top_builddir


# Ensure these exit successfully, even though stdout is closed,
# because they generate no output.
touch a
cp a b >&- || fail=1
test -f b || fail=1
chmod o-w . >&- || fail=1
ln a c >&- || fail=1
rm c >&- || fail=1
mkdir d >&- || fail=1
mv d e >&- || fail=1
rmdir e >&- || fail=1
touch e >&- || fail=1
sleep 0 >&- || fail=1
"$p/src/true" >&- || fail=1
"$p/src/printf" '' >&- || fail=1

# If >&- works, ensure these fail, because stdout is closed and they
# *do* generate output.  >&- apparently does not work in HP-UX 11.23.
# This test is ineffective unless /dev/stdout also works.
if "$p/src/test" -w /dev/stdout >/dev/null &&
   "$p/src/test" ! -w /dev/stdout >&-; then
  returns_ 1 "$p/src/printf" 'foo' >&- 2>/dev/null || fail=1
  returns_ 1 cp --verbose a b >&- 2>/dev/null || fail=1
  rm -Rf tmpfile-?????? || fail=1
  returns_ 1 mktemp tmpfile-XXXXXX >&- 2>/dev/null || fail=1
  returns_ 1 mktemp tmpfile-XXXXXX -q >&- 2>/dev/null || fail=1
  case $(echo tmpfile-??????) in 'tmpfile-??????') ;; *) fail=1 ;; esac
fi

# Likewise for /dev/full, if /dev/full works.
if test -w /dev/full && test -c /dev/full; then
  returns_ 1 "$p/src/printf" 'foo' >/dev/full 2>/dev/null || fail=1
  returns_ 1 cp --verbose a b >/dev/full 2>/dev/null || fail=1
  rm -Rf tmpdir-?????? || fail=1
  returns_ 1 mktemp -d tmpdir-XXXXXX >/dev/full 2>/dev/null || fail=1
  returns_ 1 mktemp -d -q tmpdir-XXXXXX >/dev/full 2>/dev/null || fail=1
  case $(echo tmpfile-??????) in 'tmpfile-??????') ;; *) fail=1 ;; esac
fi

Exit $fail
#!/bin/sh
# Verify behavior of separate coreutils multicall binary

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ coreutils

test -s "$abs_top_builddir/src/coreutils.h" \
 || skip_ "multicall binary is disabled"

# Yes outputs all its params so is good to verify argv manipulations
echo 'y' > exp
coreutils --coreutils-prog=yes | head -n10 | uniq > out
compare exp out || fail=1

# Ensure if incorrect program passed, we diagnose
echo "coreutils: unknown program 'blah'" > exp
coreutils --coreutils-prog='blah' --help 2>err && fail=1
compare exp err || fail=1

Exit $fail
#!/bin/sh
# cause a 1-byte heap buffer overrun

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ csplit

# Before coreutils-8.7, this would overrun the 6-byte filename_space buffer.
# It's hard to detect that without using valgrind, so here, we simply
# run the demonstrator.
seq 1000 | csplit - '/./' '{*}' || fail=1
test -f xx1000 || fail=1
test -f xx1001 && fail=1

Exit $fail
#!/bin/sh
# ensure that csplit uses a bounded amount of memory

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ csplit

# Determine basic amount of memory needed.
{ echo y; echo n; } > f || framework_failure_
vm=$(get_min_ulimit_v_ csplit -z f %n%1) \
  || skip_ "this shell lacks ulimit support"

(
 ulimit -v $(($vm + 1000)) \
   && { yes | head -n2500000; echo n; } | csplit -z - %n%1
) || fail=1

Exit $fail
#!/bin/sh
# Ensure we handle i/o errors correctly in csplit

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ csplit
require_gcc_shared_

if ! test -w /dev/full || ! test -c /dev/full; then
  skip_ '/dev/full is required'
fi

# Ensure error messages are in English
LC_ALL=C
export LC_ALL

# Replace fwrite and ferror, always returning an error
cat > k.c <<'EOF' || framework_failure_
#include <stdio.h>
#include <errno.h>

#undef fwrite
#undef fwrite_unlocked

size_t
fwrite (const void *ptr, size_t size, size_t nitems, FILE *stream)
{
  fclose (fopen ("preloaded","w")); /* marker for preloaded interception */
  errno = ENOSPC;
  return 0;
}

size_t
fwrite_unlocked (const void *ptr, size_t size, size_t nitems, FILE *stream)
{
  return fwrite (ptr, size, nitems, stream);
}
EOF

# Get the wording of the OS-dependent ENOSPC message
returns_ 1 seq 1 >/dev/full 2>msgt || framework_failure_
sed 's/seq: write error: //' msgt > msg || framework_failure_

# Create the expected error message
{ printf "%s" "csplit: write error for 'xx01': " ; cat msg ; } > exp \
  || framework_failure_

# compile/link the interception shared library:
gcc_shared_ k.c k.so \
  || skip_ 'failed to build forced-fwrite-failure shared library'

# Split the input, and force fwrite() failure -
# the 'csplit' command should fail with exit code 1
# (checked with 'returns_ 1 ... || fail=1')
seq 10 \
  | LD_PRELOAD=$LD_PRELOAD:./k.so returns_ 1 csplit - 1 4 2>out \
  || fail=1

test -e preloaded || skip_ 'LD_PRELOAD interception failed'

# Ensure we got the expected error message
compare exp out || fail=1

Exit $fail
#!/bin/sh
# various csplit tests

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ csplit


# csplit could get a failed assertion to 2.0.17
(echo a; echo; echo) > in
csplit in '/^$/' 2 > out || fail=1
cat <<EOF > exp
2
0
2
EOF
compare exp out || fail=1
rm -f in out exp

# Ensure that xx02 contains just two newlines.
# This would fail due to reading from freed buffer with coreutils-5.0.91.
printf '\n\n' > exp
cp xx02 out || fail=1
compare exp out || fail=1
rm -f in out exp

# csplit would infloop
(echo; echo a) > in
csplit in '/a/-1' '{*}' > out || fail=1
cat <<EOF > exp
0
3
EOF
compare exp out || fail=1
rm -f in out exp

# 'echo |csplit - 1 1' used to abort.
echo > in
csplit in 1 1 > out 2> err || fail=1
cat <<EOF > exp
0
0
1
EOF
compare exp out || fail=1
cat <<\EOF > experr
csplit: warning: line number '1' is the same as preceding line number
EOF
compare experr err || fail=1
rm -f in out exp err experr

# 'echo | csplit -b '%0#6.3x' - 1' incorrectly warned about the format
# up through coreutils 8.6.
echo > in
csplit -b '%0#6.3x' in 1 > out 2> err || fail=1
cat <<EOF > exp
0
1
EOF
compare exp out || fail=1
touch experr
compare experr err || fail=1
compare 'xx   000' experr || fail=1
compare 'xx 0x001' in || fail=1
rm -f in out exp err experr xx*

# make sure 'csplit FILE 0' fails.
echo > in
csplit in 0 > out 2> err && fail=1
csplit in 2 1 > out 2>> err && fail=1
csplit in 3 3 > out 2>> err && fail=1
cat <<\EOF > experr
csplit: 0: line number must be greater than zero
csplit: line number '1' is smaller than preceding line number, 2
csplit: warning: line number '3' is the same as preceding line number
csplit: '3': line number out of range
EOF
compare experr err || fail=1

# Ensure that lines longer than the initial buffer length don't cause
# trouble (e.g. reading from freed memory, resulting in corrupt output).
# This test failed at least in coreutils-5.2.1 and 5.3.0, and was fixed
# in 5.3.1.
rm -f in out exp err experr xx??
printf 'x%8199s\nx\n%8199s\nx\n' x x > in
csplit in '/x\{1\}/' '{*}' > /dev/null || fail=1
cat xx?? | compare - in || fail=1

Exit $fail
#!/bin/sh
# Ensure that cut does not allocate mem for large ranges

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cut
getlimits_

vm=$(get_min_ulimit_v_ cut -b1 /dev/null) \
  || skip_ "this shell lacks ulimit support"

# sed script to subtract one from the input.
# Each input line should consist of a positive decimal number.
# Each output line's number is one less than the input's.
# There's no limit (other than line length) on the number's magnitude.
subtract_one='
  s/$/@/
  : again
  s/0@/@9/
  s/1@/0/
  s/2@/1/
  s/3@/2/
  s/4@/3/
  s/5@/4/
  s/6@/5/
  s/7@/6/
  s/8@/7/
  s/9@/8/
  t again
'

# Ensure we can cut up to our sentinel value.
# This is currently SIZE_MAX, but could be raised to UINTMAX_MAX
# if we didn't allocate memory for each line as a unit.
# Don't use expr to subtract one, since SIZE_MAX may exceed its maximum value.
CUT_MAX=$(echo $SIZE_MAX | sed "$subtract_one")

# From coreutils-8.10 through 8.20, this would make cut try to allocate
# a 256MiB bit vector.
(ulimit -v $vm && cut -b$CUT_MAX- /dev/null > err 2>&1) || fail=1

# Up to and including coreutils-8.21, cut would allocate possibly needed
# memory upfront.  Subsequently extra memory is no longer needed.
(ulimit -v $vm && cut -b1-$CUT_MAX /dev/null >> err 2>&1) || fail=1

# Explicitly disallow values above CUT_MAX
(ulimit -v $vm && returns_ 1 cut -b$SIZE_MAX /dev/null 2>/dev/null) || fail=1
(ulimit -v $vm && returns_ 1 cut -b$SIZE_OFLOW /dev/null 2>/dev/null) || fail=1

compare /dev/null err || fail=1

Exit $fail
#!/bin/sh
# Ensure that a command like
# date --date="21:04 +0100" +%S' always prints '00'.
# Before coreutils-5.2.1, it would print the seconds from the current time.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ date



# It would be easier simply to sleep for two seconds between two runs
# of $(date --date="21:04 +0100" +%S) and ensure that both outputs
# are '00', but I prefer not to sleep unconditionally.  'make check'
# takes long enough as it is.

n=0
# See if the current number of seconds is '00' or just before.
s=$(date +%S)
case "$s" in
  58) n=3;;
  59) n=2;;
  00) n=1;;
esac

# If necessary, wait for the system clock to pass the minute mark.
test $n = 0 || sleep $n

s=$(date --date="21:04 +0100" +%S)
case "$s" in
  00) ;;
  *) fail=1;;
esac

Exit $fail
#!/bin/sh
# Verify behavior of env -0 and printenv -0.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ env printenv

# POSIX is clear that environ may, but need not be, sorted.
# Environment variable values may contain newlines, which cannot be
# observed by merely inspecting output from env.
# Cygwin requires a minimal environment to launch new processes: execve
# adds missing variables SYSTEMROOT and WINDIR, which show up in a
# subsequent env.  Cygwin also requires /bin to always be part of PATH,
# and attempts to unset or reduce PATH may cause execve to fail.
#
# For these reasons, it is better to compare two outputs from distinct
# programs that should be the same, rather than building an exp file.
env -i PATH="$PATH" env -0 > out1 || fail=1
env -i PATH="$PATH" printenv -0 > out2 || fail=1
compare out1 out2 || fail=1
env -i PATH="$PATH" env --null > out2 || fail=1
compare out1 out2 || fail=1
env -i PATH="$PATH" printenv --null > out2 || fail=1
compare out1 out2 || fail=1

# env -0 does not work if a command is specified.
env -0 echo hi > out
test $? = 125 || fail=1
compare /dev/null out || fail=1

# Test env -0 on a one-variable environment.
printf 'a=b\nc=\0' > exp || framework_failure_
env -i -0 "$(printf 'a=b\nc=')" > out || fail=1
compare exp out || fail=1

# Test printenv -0 on particular values.
printf 'b\nc=\0' > exp || framework_failure_
env "$(printf 'a=b\nc=')" printenv -0 a > out || fail=1
compare exp out || fail=1
env -u a printenv -0 a > out
test $? = 1 || fail=1
compare /dev/null out || fail=1
env -u b "$(printf 'a=b\nc=')" printenv -0 b a > out
test $? = 1 || fail=1
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Verify behavior of env.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ env

# A simple shebang program to call "echo" from symlinks like "./-u" or "./--".
echo "#!$abs_top_builddir/src/echo simple_echo" > simple_echo \
  || framework_failure_
chmod a+x simple_echo || framework_failure_

# Verify we can run the shebang which is not the case if
# there are spaces in $abs_top_builddir.
./simple_echo || skip_ "Error running simple_echo script"

# Verify clearing the environment
a=1
export a
env - > out || fail=1
compare /dev/null out || fail=1
env -i > out || fail=1
compare /dev/null out || fail=1
env -u a -i -u a -- > out || fail=1
compare /dev/null out || fail=1
env -i -- a=b > out || fail=1
echo a=b > exp || framework_failure_
compare exp out || fail=1

# These tests verify exact status of internal failure.
env --- # unknown option
test $? = 125 || fail=1
env -u # missing option argument
test $? = 125 || fail=1
env sh -c 'exit 2' # exit status propagation
test $? = 2 || fail=2
env . # invalid command
test $? = 126 || fail=1
env no_such # no such command
test $? = 127 || fail=1

# POSIX is clear that environ may, but need not be, sorted.
# Environment variable values may contain newlines, which cannot be
# observed by merely inspecting output from env.
# Cygwin requires a minimal environment to launch new processes: execve
# adds missing variables SYSTEMROOT and WINDIR, which show up in a
# subsequent env.  Cygwin also requires /bin to always be part of PATH,
# and attempts to unset or reduce PATH may cause execve to fail.
#
# For these reasons, it is more portable to grep that our desired changes
# took place, rather than comparing output of env over an entire environment.
if env | grep '^ENV_TEST' >/dev/null ; then
  skip_ "environment has potential interference from ENV_TEST*"
fi

ENV_TEST1=a
export ENV_TEST1
>out || framework_failure_
env ENV_TEST2= > all || fail=1
grep '^ENV_TEST' all | LC_ALL=C sort >> out || framework_failure_
env -u ENV_TEST1 ENV_TEST3=c > all || fail=1
grep '^ENV_TEST' all | LC_ALL=C sort >> out || framework_failure_
env ENV_TEST1=b > all || fail=1
grep '^ENV_TEST' all | LC_ALL=C sort >> out || framework_failure_
env ENV_TEST2= env > all || fail=1
grep '^ENV_TEST' all | LC_ALL=C sort >> out || framework_failure_
env -u ENV_TEST1 ENV_TEST3=c env > all || fail=1
grep '^ENV_TEST' all | LC_ALL=C sort >> out || framework_failure_
env ENV_TEST1=b env > all || fail=1
grep '^ENV_TEST' all | LC_ALL=C sort >> out || framework_failure_
cat <<EOF >exp || framework_failure_
ENV_TEST1=a
ENV_TEST2=
ENV_TEST3=c
ENV_TEST1=b
ENV_TEST1=a
ENV_TEST2=
ENV_TEST3=c
ENV_TEST1=b
EOF
compare exp out || fail=1

# PATH modifications affect exec.
mkdir unlikely_name || framework_failure_
cat <<EOF > unlikely_name/also_unlikely || framework_failure_
#!/bin/sh
echo pass
EOF
chmod +x unlikely_name/also_unlikely || framework_failure_
returns_ 127 env also_unlikely || fail=1
test x$(PATH=$PATH:unlikely_name env also_unlikely) = xpass || fail=1
test x$(env PATH="$PATH":unlikely_name also_unlikely) = xpass || fail=1

# Explicitly put . on the PATH for the rest of this test.
PATH=$PATH:
export PATH

# Use -- to end options (but not variable assignments).
# On some systems, execve("-i") invokes a shebang script ./-i on PATH as
# '/bin/sh -i', rather than '/bin/sh -- -i', which doesn't do what we want.
# Avoid the issue by using a shebang to 'echo' passing a second parameter
# before the '-i'. See the definition of simple_echo before.
# Test -u, rather than -i, to minimize PATH problems.
ln -s "simple_echo" ./-u || framework_failure_
case $(env -u echo echo good) in
  good) ;;
  *) fail=1 ;;
esac
case $(env -u echo -- echo good) in
  good) ;;
  *) fail=1 ;;
esac
case $(env -- -u pass) in
  *pass) ;;
  *) fail=1 ;;
esac

# After options have ended, the first argument not containing = is a program.
env a=b -- true
test $? = 127 || fail=1
ln -s "simple_echo" ./-- || framework_failure_
case $(env a=b -- true || echo fail) in
  *true) ;;
  *) fail=1 ;;
esac

# No way to directly invoke program name containing =.
cat <<EOF >./c=d || framework_failure_
#!/bin/sh
echo pass
EOF
chmod +x c=d || framework_failure_
test "x$(env c=d echo fail)" = xfail || fail=1
test "x$(env -- c=d echo fail)" = xfail || fail=1
test "x$(env ./c=d echo fail)" = xfail || fail=1
test "x$(env sh -c 'exec "$@"' sh c=d echo fail)" = xpass || fail=1
test "x$(sh -c '\c=d echo fail')" = xpass && #dash 0.5.4 fails so check first
  { test "x$(env sh -c '\c=d echo fail')" = xpass || fail=1; }

# catch unsetenv failure, broken through coreutils 8.0
returns_ 125 env -u a=b true || fail=1
returns_ 125 env -u '' true || fail=1

Exit $fail
#!/bin/sh
# Test for complete lines on output

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ factor


odd() { LC_ALL=C sed '/[24680]$/d'; }
primes() { LC_ALL=C sed 's/.*: //; / /d'; }

# Before v8.24 the number reported here would vary
# Note -u not supplied to split, increased batching of quickly processed items.
# As processing cost increases it becomes advantageous to use -u to keep
# the factor processes supplied with data.
nprimes=$(seq 1e6 | odd | split -nr/4 --filter='factor' | primes | wc -l)

test "$nprimes" = '78498' || fail=1

Exit $fail
#!/bin/sh
# ensure that false exits nonzero even with --help or --version
# and ensure that true exits nonzero when it can't write --help or --version

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ false true

returns_ 1 env false --version > /dev/null || fail=1
returns_ 1 env false --help > /dev/null || fail=1

if test -w /dev/full && test -c /dev/full; then
  returns_ 1 env true --version > /dev/full || fail=1
  returns_ 1 env true --help > /dev/full || fail=1
fi

Exit $fail
#!/bin/sh
# ensure groups handles -- sanely

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ groups

# Coreutils 6.9 and earlier failed to display information on first argument
# if later argument was --.
groups none -- > out 2>&1 && fail=1
echo $? >> out
groups -- none -- > exp 2>&1 && fail=1
echo $? >> exp

compare exp out || fail=1

Exit $fail
#!/bin/sh
# ensure groups --version output is similar to id --version

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ groups

groups --version | sed 's/^groups/id/; /^$/q' > out || fail=1
id --version | sed '/^$/q' > exp || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# exercise head -c

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ head
getlimits_

vm=$(get_min_ulimit_v_ head -c1 /dev/null) \
  || skip_ "this shell lacks ulimit support"

# exercise the fix of 2001-08-18, based on test case from Ian Bruce
echo abc > in || framework_failure_
(head -c1; head -c1) < in > out || fail=1
case "$(cat out)" in
  ab) ;;
  *) fail=1 ;;
esac

# Test for a bug in coreutils 5.0.1 through 8.22.
printf 'abc\ndef\n' > in1 || framework_failure_
(dd bs=1 skip=1 count=0 status=none && head -c-4) < in1 > out1 || fail=1
case "$(cat out1)" in
  bc) ;;
  *) fail=1 ;;
esac

# Only allocate memory as needed.
# Coreutils <= 8.21 would allocate memory up front
# based on the value passed to -c
(ulimit -v $(($vm+8000)) && head --bytes=-$SSIZE_MAX < /dev/null) || fail=1

# Make sure it works on funny files in /proc and /sys.

for file in /proc/version /sys/kernel/profiling; do
  if test -r $file; then
    cp -f $file copy &&
    head -c -1 copy > exp1 || framework_failure_

    head -c -1 $file > out1 || fail=1
    compare exp1 out1 || fail=1
  fi
done

Exit $fail
#!/bin/sh
# When reading a specified number of lines, ensure that the output
# file pointer is positioned just after those lines.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ head

(echo a; echo b) > in || framework_failure_
echo b > exp || framework_failure_

for i in -1 1; do
  (head -n $i >/dev/null; cat) < in > out || fail=1
  compare exp out || fail=1
done

# Exercise the (start_pos < pos) block in elide_tail_lines_seekable.
# So far, this is the only test to do that.
# Do that by creating a file larger than BUFSIZ (I've seen 128K) and
# elide a suffix of it (by line count) that is also larger than BUFSIZ.
# 50000 lines times 6 bytes per line gives us enough leeway even on a
# system with a BUFSIZ of 256K.
n_lines=50000
seq 70000 > in2 || framework_failure_
echo $n_lines > exp-n || framework_failure_

(head -n-$n_lines>/dev/null; wc -l) < in2 > n
compare exp-n n || fail=1

Exit $fail
#!/bin/sh
# Ensure we diagnose and not continue writing to
# the output if we get a write error.

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ head

if ! test -w /dev/full || ! test -c /dev/full; then
  skip_ '/dev/full is required'
fi

# We can't use /dev/zero as that's bypassed in the --lines case
# due to lseek() indicating it has a size of zero.
yes | head -c10M > bigseek || framework_failure_

# This is the single output diagnostic expected,
# (without the possibly varying :strerror(ENOSPC) suffix).
printf '%s\n' "head: error writing 'standard output'" > exp

# Memory is bounded in these cases
for item in lines bytes; do
  for N in 0 1; do
    # pipe case
    yes | timeout 10s head --$item=-$N > /dev/full 2> errt && fail=1
    test $? = 124 && fail=1
    sed 's/\(head:.*\):.*/\1/' errt > err
    compare exp err || fail=1

    # seekable case
    timeout 10s head --$item=-$N bigseek > /dev/full 2> errt && fail=1
    test $? = 124 && fail=1
    sed 's/\(head:.*\):.*/\1/' errt > err
    compare exp err || fail=1
  done
done

Exit $fail
#!/bin/sh
# Make sure all of these programs work properly
# when invoked with --help or --version.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src

# Terminate any background processes
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

expected_failure_status_chroot=125
expected_failure_status_env=125
expected_failure_status_nice=125
expected_failure_status_nohup=125
expected_failure_status_stdbuf=125
expected_failure_status_timeout=125
expected_failure_status_printenv=2
expected_failure_status_tty=3
expected_failure_status_sort=2
expected_failure_status_expr=3
expected_failure_status_lbracket=2
expected_failure_status_dir=2
expected_failure_status_ls=2
expected_failure_status_vdir=2

expected_failure_status_cmp=2
expected_failure_status_zcmp=2
expected_failure_status_sdiff=2
expected_failure_status_diff3=2
expected_failure_status_diff=2
expected_failure_status_zdiff=2
expected_failure_status_zgrep=2
expected_failure_status_zegrep=2
expected_failure_status_zfgrep=2

expected_failure_status_grep=2
expected_failure_status_egrep=2
expected_failure_status_fgrep=2

test "$built_programs" \
  || fail_ "built_programs not specified!?!"

test "$VERSION" \
  || fail_ "set envvar VERSION; it is required for a PATH sanity-check"

# Extract version from --version output of the first program
for i in $built_programs; do
  v=$(env $i --version | sed -n '1s/.* //p;q')
  break
done

# Ensure that it matches $VERSION.
test "x$v" = "x$VERSION" \
  || fail_ "--version-\$VERSION mismatch"

for i in $built_programs; do

  # Skip 'test'; it doesn't accept --help or --version.
  test $i = test && continue

  # false fails even when invoked with --help or --version.
  # true and false are tested with these options separately.
  test $i = false || test $i = true && continue

  # The just-built install executable is always named 'ginstall'.
  test $i = install && i=ginstall

  # Make sure they exit successfully, under normal conditions.
  env $i --help    >/dev/null || fail=1
  env $i --version >/dev/null || fail=1

  # Make sure they fail upon 'disk full' error.
  if test -w /dev/full && test -c /dev/full; then
    test $i = [ && prog=lbracket || prog=$(echo $i|sed "s/$EXEEXT$//")
    eval "expected=\$expected_failure_status_$prog"
    test x$expected = x && expected=1

    returns_ $expected env $i --help    >/dev/full 2>/dev/null &&
    returns_ $expected env $i --version >/dev/full 2>/dev/null ||
    {
      fail=1
      env $i --help >/dev/full 2>/dev/null
      status=$?
      echo "*** $i: bad exit status '$status' (expected $expected)," 1>&2
      echo "  with --help or --version output redirected to /dev/full" 1>&2
    }
  fi
done

bigZ_in=bigZ-in.Z
zin=zin.gz
zin2=zin2.gz

tmp=tmp-$$
tmp_in=in-$$
tmp_in2=in2-$$
tmp_dir=dir-$$
tmp_out=out-$$
mkdir $tmp || fail=1
cd $tmp || fail=1

comm_setup () { args="$tmp_in $tmp_in"; }
csplit_setup () { args="$tmp_in //"; }
cut_setup () { args='-f 1'; }
join_setup () { args="$tmp_in $tmp_in"; }
tr_setup () { args='a a'; }

chmod_setup () { args="a+x $tmp_in"; }
# Punt on these.
chgrp_setup () { args=--version; }
chown_setup () { args=--version; }
mkfifo_setup () { args=--version; }
mknod_setup () { args=--version; }
# Punt on uptime, since it fails (e.g., failing to get boot time)
# on some systems, and we shouldn't let that stop 'make check'.
uptime_setup () { args=--version; }

# Create a file in the current directory, not in $TMPDIR.
mktemp_setup () { args=mktemp.XXXX; }

cmp_setup () { args="$tmp_in $tmp_in2"; }

# Tell dd not to print the line with transfer rate and total.
# The transfer rate would vary between runs.
dd_setup () { args=status=noxfer; }

zdiff_setup () { args="$zin $zin2"; }
zcmp_setup () { args="$zin $zin2"; }
zcat_setup () { args=$zin; }
gunzip_setup () { args=$zin; }
zmore_setup () { args=$zin; }
zless_setup () { args=$zin; }
znew_setup () { args=$bigZ_in; }
zforce_setup () { args=$zin; }
zgrep_setup () { args="z $zin"; }
zegrep_setup () { args="z $zin"; }
zfgrep_setup () { args="z $zin"; }
gzexe_setup () { args=$tmp_in; }

# We know that $tmp_in contains a "0"
grep_setup () { args="0 $tmp_in"; }
egrep_setup () { args="0 $tmp_in"; }
fgrep_setup () { args="0 $tmp_in"; }

diff_setup () { args="$tmp_in $tmp_in2"; }
sdiff_setup () { args="$tmp_in $tmp_in2"; }
diff3_setup () { args="$tmp_in $tmp_in2 $tmp_in2"; }
cp_setup () { args="$tmp_in $tmp_in2"; }
ln_setup () { args="$tmp_in ln-target"; }
ginstall_setup () { args="$tmp_in $tmp_in2"; }
mv_setup () { args="$tmp_in $tmp_in2"; }
mkdir_setup () { args=$tmp_dir/subdir; }
realpath_setup () { args=$tmp_in; }
rmdir_setup () { args=$tmp_dir; }
rm_setup () { args=$tmp_in; }
shred_setup () { args=$tmp_in; }
touch_setup () { args=$tmp_in2; }
truncate_setup () { args="--reference=$tmp_in $tmp_in2"; }

mkid_setup () { printf 'f(){}\ntypedef int t;\n' > f.c; args=. ; }
lid_setup () { args=; }
fid_setup () { args=f.c; }
fnid_setup () { args=; }
xtokid_setup () { args=; }
aid_setup () { args=f; }
eid_setup () { args=--version; }
gid_setup () { args=f; }
defid_setup () { args=t; }

basename_setup () { args=$tmp_in; }
dirname_setup () { args=$tmp_in; }
expr_setup () { args=foo; }

# Punt, in case GNU 'id' hasn't been installed yet.
groups_setup () { args=--version; }

pathchk_setup () { args=$tmp_in; }
yes_setup () { args=--version; }
logname_setup () { args=--version; }
nohup_setup () { args=--version; }
printf_setup () { args=foo; }
seq_setup () { args=10; }
sleep_setup () { args=0; }
stdbuf_setup () { args="-oL true"; }
timeout_setup () { args=--version; }

# I'd rather not run sync, since it spins up disks that I've
# deliberately caused to spin down (but not unmounted).
sync_setup () { args=--version; }

test_setup () { args=foo; }

# This is necessary in the unusual event that there is
# no valid entry in /etc/mtab.
df_setup () { args=/; }

# This is necessary in the unusual event that getpwuid (getuid ()) fails.
id_setup () { args=-u; }

# Use env to avoid invoking built-in sleep of Solaris 11's /bin/sh.
kill_setup () {
  external=env
  $external sleep 10m & pid=$!
  args=$pid
}

link_setup () { args="$tmp_in link-target"; }
unlink_setup () { args=$tmp_in; }

readlink_setup () {
  ln -s . slink
  args=slink;
}

stat_setup () { args=$tmp_in; }
unlink_setup () { args=$tmp_in; }
lbracket_setup () { args=": ]"; }

parted_setup () { args="-s $tmp_in mklabel gpt"
  dd if=/dev/null of=$tmp_in seek=2000; }

# Ensure that each program "works" (exits successfully) when doing
# something more than --help or --version.
for i in $built_programs; do
  # Skip these.
  case $i in chroot|stty|tty|false|chcon|runcon|coreutils) continue;; esac

  rm -rf $tmp_in $tmp_in2 $tmp_dir $tmp_out $bigZ_in $zin $zin2
  echo z |gzip > $zin
  cp $zin $zin2
  cp $zin $bigZ_in

  # This is sort of kludgey: use numbers so this is valid input for factor,
  # and two tokens so it's valid input for tsort.
  echo 2147483647 0 > $tmp_in
  # Make $tmp_in2 identical. Then, using $tmp_in and $tmp_in2 as arguments
  # to the likes of cmp and diff makes them exit successfully.
  cp $tmp_in $tmp_in2
  mkdir $tmp_dir
  # echo ================== $i
  test $i = [ && prog=lbracket || prog=$(echo $i|sed "s/$EXEEXT$//")
  if type ${prog}_setup > /dev/null 2>&1; then
    ${prog}_setup
  else
    args=
  fi
  if env $i $args < $tmp_in > $tmp_out; then
    : # ok
  else
    echo FAIL: $i
    fail=1
  fi
  rm -rf $tmp_in $tmp_in2 $tmp_out $tmp_dir
done

Exit $fail
#!/bin/sh
# Validate kill operation

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ kill

# params required
returns_ 1 env kill || fail=1
returns_ 1 env kill -TERM || fail=1

# Invalid combinations
returns_ 1 env kill -l -l || fail=1
returns_ 1 env kill -l -t || fail=1
returns_ 1 env kill -l -s 1 || fail=1
returns_ 1 env kill -t -s 1 || fail=1

# signal sending
returns_ 1 env kill -0 no_pid || fail=1
env kill -0 $$ || fail=1
env kill -s0 $$ || fail=1
env kill -n0 $$ || fail=1 # bash compat
env kill -CONT $$ || fail=1
env kill -Cont $$ || fail=1
returns_ 1 env kill -cont $$ || fail=1
env kill -0 -1 || fail=1 # to group

# table listing
env kill -l || fail=1
env kill -t || fail=1
env kill -L || fail=1 # bash compat
env kill -t TERM HUP || fail=1

# Verify (multi) name to signal number and vice versa
SIGTERM=$(env kill -l HUP TERM | tail -n1) || fail=1
test $(env kill -l "$SIGTERM") = TERM || fail=1

# Verify we only consider the lower "signal" bits,
# to support ksh which just adds 256 to the signal value
STD_TERM_STATUS=$(expr "$SIGTERM" + 128)
KSH_TERM_STATUS=$(expr "$SIGTERM" + 256)
test $(env kill -l $STD_TERM_STATUS $KSH_TERM_STATUS | uniq) = TERM || fail=1

# Verify invalid signal spec is diagnosed
returns_ 1 env kill -l -1 || fail=1
returns_ 1 env kill -l -1 0 || fail=1
returns_ 1 env kill -l INVALID TERM || fail=1

Exit $fail
#!/bin/sh
# Test some of ls's sorting options.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ls

# Avoid any possible glitches due to daylight-saving changes near the
# time stamps used during the test.
TZ=UTC0
export TZ

t1='1998-01-15 21:00'
t2='1998-01-15 22:00'
t3='1998-01-15 23:00'

u1='1998-01-14 11:00'
u2='1998-01-14 12:00'
u3='1998-01-14 13:00'

touch -m -d "$t3" a || framework_failure_
touch -m -d "$t2" b || framework_failure_
touch -m -d "$t1" c || framework_failure_

touch -a -d "$u3" c || framework_failure_
touch -a -d "$u2" b || framework_failure_
# Make sure A has ctime at least 1 second more recent than C's.
sleep 2
touch -a -d "$u1" a || framework_failure_
# Updating the atime is usually enough to update the ctime, but on
# Solaris 10's tmpfs, ctime is not updated, so force an update here:
{ ln a a-ctime && rm a-ctime; } || framework_failure_


# A has ctime more recent than C.
set $(ls -c a c)
test "$*" = 'a c' || fail=1

# Sleep so long in an attempt to avoid spurious failures
# due to NFS caching and/or clock skew.
sleep 2

# Create a link, updating c's ctime.
ln c d || framework_failure_

# Before we go any further, verify that touch's -m option works.
set -- $(ls --full -l a)
case "$*" in
  *" $t3:00.000000000 +0000 a") ;;
  *)
  # This might be what's making HPUX 11 systems fail this test.
  cat >&2 << EOF
A basic test of touch -m has just failed, so the subsequent
tests in this file will not be run.

In the output below, the date of last modification for 'a' should
have been $t3.
EOF
  ls --full -l a
  framework_failure_
  ;;
esac

# Ensure that touch's -a option works.
set -- $(ls --full -lu a)
case "$*" in
  *" $u1:00.000000000 +0000 a") ;;
  *)
  # This might be what's making HPUX 11 systems fail this test.
  cat >&2 << EOF
A fundamental touch -a test has just failed, so the subsequent
tests in this file will not be run.

In the output below, the date of last access for 'a' should
have been $u1.
EOF
  ls --full -lu a
  Exit 77
  ;;
esac

set $(ls -ut a b c)
test "$*" = 'c b a' && : || fail=1
test $fail = 1 && ls -l --full-time --time=access a b c

set $(ls -t a b c)
test "$*" = 'a b c' && : || fail=1
test $fail = 1 && ls -l --full-time a b c

# Now, C should have ctime more recent than A.
set $(ls -ct a c)
if test "$*" = 'c a'; then
  : ok
else
  # In spite of documentation, (e.g., stat(2)), neither link nor chmod
  # update a file's st_ctime on SunOS4.1.4.
  cat >&2 << \EOF
failed ls ctime test -- this failure is expected at least for SunOS4.1.4
and for tmpfs file systems on Solaris 5.5.1.
It is also expected to fail on a btrfs file system until
http://bugzilla.redhat.com/591068 is addressed.

In the output below, 'c' should have had a ctime more recent than
that of 'a', but does not.
EOF
  #'
  ls -ctl --full-time a c
  fail=1
fi

# This check is ineffective if:
#   en_US locale is not on the system.
#   The system en_US message catalog has a specific TIME_FMT translation,
#   which was inadvertently the case between coreutils 8.1 and 8.5 inclusive.

if gettext --version >/dev/null 2>&1; then

  default_tf1='%b %e  %Y'
  en_tf1=$(LC_ALL=en_US gettext coreutils "$default_tf1")

  if test "$default_tf1" = "$en_tf1"; then
    LC_ALL=en_US ls -l c >en_output
    ls -l --time-style=long-iso c >liso_output
    if compare en_output liso_output; then
      fail=1
      echo "Long ISO TIME_FMT being used for en_US locale." >&2
    fi
  fi
fi

Exit $fail
#!/bin/sh
# 'md5sum' tests for generation and checking of
# BSD traditional and alternate formats (md5 [-r])

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ md5sum

## BSD alternate format tests ##

# Ensure we can --check BSD alternate format.
# Note we start this list with a name
# that's unambiguous in BSD format.
# I.e., one not starting with ' ' or '*'
for i in 'a' ' b' '*c' 'dd' ' '; do
  echo "$i" > "$i"
  md5sum "$i" >> check.md5sum
done
sed 's/  / /' check.md5sum > check.md5

# Note only a single format is supported per run
md5sum --strict -c check.md5sum || fail=1
md5sum --strict -c check.md5 || fail=1

# If we skip the first entry in the BSD format checksums
# then it'll be detected as standard format and error.
# This unlikely caveat was thought better than mandating
# an option to avoid the ambiguity.
tail -n+2 check.md5 | returns_ 1 md5sum --strict -c || fail=1


## BSD traditional format tests (--tag option) ##

# Ensure --tag and --check are mutually exclusive
returns_ 1 md5sum --tag --check /dev/null || fail=1

# Ensure --tag and --text are mutually exclusive
# We don't support --text with BSD tradition format,
# as that would complicate the output format,
# while providing little benefit over --text processing
# available with the default md5sum output format.
returns_ 1 md5sum --tag --text /dev/null || fail=1

# Ensure we can --check BSD traditional format we produce
rm check.md5
for i in 'a' ' b' '*c' 'dd' ' '; do
  echo "$i" > "$i"
  md5sum --tag "$i" >> check.md5
done
md5sum --strict -c check.md5 || fail=1

# Ensure we can --check BSD traditional format we produce
# with the GNU extension of escaped newlines
nl='
'
tab='	'
rm check.md5
for i in 'a\b' 'a\' "a${nl}b" "a${tab}b"; do
  > "$i"
  md5sum --tag "$i" >> check.md5
done
md5sum --strict -c check.md5 || fail=1

# Ensure BSD traditional format with GNU extension escapes
# is in the expected format
ex_file='test
\\file'
ex_output='\MD5 (test\n\\\\file) = d41d8cd98f00b204e9800998ecf8427e'
touch "$ex_file"
printf "%s\n" "$ex_output" > exp
md5sum --tag "$ex_file" > out
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that md5sum prints each checksum atomically
# so that concurrent md5sums don't intersperse their output

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ md5sum

xargs -P2 </dev/null >/dev/null 2>&1 \
  || skip_ 'xargs -P is required'

(mkdir tmp && cd tmp && seq 500 | xargs touch)

# This will output at least 16KiB per process
# and start 3 processes, with 2 running concurrently,
# which triggers often on Fedora 11 at least.
(find tmp tmp tmp -type f | xargs -n500 -P2 md5sum 2>err) |
sed -n '/[0-9a-f]\{32\}  /!p' |
grep . > /dev/null && fail=1
compare /dev/null err || fail=1

Exit $fail
#!/bin/sh
# Ensure that mknod, mkfifo, mkdir -m MODE work with a restrictive umask

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mknod

# Ensure fifos are supported
mkfifo_or_skip_ fifo

umask 777

mknod  -m 734 f1 p || fail=1
mode=$(ls -dgo f1|cut -b-10)
test $mode = prwx-wxr-- || fail=1

mkfifo -m 734 f2   || fail=1
mode=$(ls -dgo f2|cut -b-10)
test $mode = prwx-wxr-- || fail=1

mkdir -m 734 f3   || fail=1
mode=$(ls -dgo f3|cut -b-10)
test $mode = drwx-wxr-- || test $mode = drwx-wsr-- || fail=1

Exit $fail
#!/bin/sh
# Verify that internal failure in nice gives exact status.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ nice


# These tests verify exact status of internal failure.
nice -n 1 # missing command
test $? = 125 || fail=1
nice --- # unknown option
test $? = 125 || fail=1
nice -n 1a # invalid adjustment
test $? = 125 || fail=1
nice sh -c 'exit 2' # exit status propagation
test $? = 2 || fail=2
nice . # invalid command
test $? = 126 || fail=1
nice no_such # no such command
test $? = 127 || fail=1

Exit $fail
#!/bin/sh
# Test "nice".

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ nice

tests='
0 empty 10
1 -1 1
2 -12 12
3 -1:-2 2
4 -n:1 1
5 -n:1:-2 2
6 -n:1:-+12 12
7 -2:-n:1 1
8 -2:-n:12 12
9 -+1 1
10 -+12 12
11 -+1:-+12 12
12 -n:+1 1
13 --1:-2 2
14 --1:-2:-13 13
15 --1:-n:2 2
16 --1:-n:2:-3 3
17 --1:-n:2:-13 13
18 -n:-1:-12 12
19 --1:-12 12
NA LAST NA
'
set $tests

# Require that this test be run at 'nice' level 0.
niceness=$(nice)
if test "$niceness" = 0; then
    : ok
else
  skip_ "this test must be run at nice level 0"
fi

while :; do
  test_name=$1
  args=$2
  expected_result=$3
  test $args = empty && args=''
  test x$args = xLAST && break
  args=$(echo x$args|tr : ' '|sed 's/^x//')
  if test "$VERBOSE" = yes; then
    #echo "testing \$(nice $args nice\) = $expected_result ..."
    echo "test $test_name... " | tr -d '\n'
  fi
  test x$(nice $args nice 2> /dev/null) = x$expected_result \
    && ok=ok || ok=FAIL fail=1
  test "$VERBOSE" = yes && echo $ok
  shift; shift; shift
done

# Test negative niceness - command must be run whether or not change happens.
if test x$(nice -n -1 nice 2> /dev/null) = x0 ; then
  # unprivileged user - warn about failure to change
  nice -n -1 true 2> err || fail=1
  compare /dev/null err && fail=1
  mv err exp || framework_failure_
  nice --1 true 2> err || fail=1
  compare exp err || fail=1
  # Failure to write advisory message is fatal.  Buggy through coreutils 8.0.
  if test -w /dev/full && test -c /dev/full; then
    nice -n -1 nice > out 2> /dev/full
    test $? = 125 || fail=1
    compare /dev/null out || fail=1
  fi
else
  # superuser - change succeeds
  nice -n -1 nice 2> err || fail=1
  compare /dev/null err || fail=1
  test x$(nice -n -1 nice) = x-1 || fail=1
  test x$(nice --1 nice) = x-1 || fail=1
fi

Exit $fail
#!/bin/sh
# exercise nl functionality

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ nl


echo a | nl > out || fail=1
echo b | nl -s%n >> out || fail=1
echo c | nl -n ln >> out || fail=1
echo d | nl -n rn >> out || fail=1
echo e | nl -n rz >> out || fail=1
echo === >> out
printf 'a\n\n' | nl > t || fail=1; cat -A t >> out
cat <<\EOF > exp
     1	a
     1%nb
1     	c
     1	d
000001	e
===
     1^Ia$
       $
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# test nohup

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ nohup


nohup sh -c 'echo stdout; echo stderr 1>&2' 2>err || fail=1

# Be careful.  The results of the above nohup command
# change depending on whether stdin and stdout are redirected.
if test -t 1; then
  test "$(cat nohup.out)" = stdout || fail=1
  if test -t 0; then
    echo 'nohup: ignoring input and appending output to 'nohup.out'\'
  else
    echo 'nohup: appending output to 'nohup.out'\'
  fi >exp || fail=1
else
  # Here it should not even exist.
  test -f nohup.out && fail=1
  if test -t 0; then
    echo 'nohup: ignoring input' >exp
  else
    rm -f exp
  fi || fail=1
fi
echo 'stderr' >> exp || fail=1

compare exp err || fail=1
rm -f nohup.out err exp
# ----------------------

# Be careful.  The results of the following nohup command
# change depending on whether stderr is redirected.
nohup sh -c 'echo stdout; echo stderr 1>&2' >out || fail=1
if test -t 2; then
  test "$(cat out|tr '\n' -)" = stdout-stderr- || fail=1
else
  test "$(cat out|tr '\n' -)" = stdout- || fail=1
fi
# It must *not* exist.
test -f nohup.out && fail=1
rm -f nohup.out err
# ----------------------

# Bug present through coreutils 8.0: failure to print advisory message
# to stderr must be fatal.  Requires stdout to be terminal.
if test -w /dev/full && test -c /dev/full; then
(
  # POSIX shells immediately exit the subshell on exec error.
  # So check we can write to /dev/tty before the exec, which
  # isn't possible if we've no controlling tty for example.
  test -c /dev/tty && >/dev/tty || exit 0

  exec >/dev/tty
  test -t 1 || exit 0
  nohup echo hi 2> /dev/full
  test $? = 125 || fail=1
  test -f nohup.out || fail=1
  compare /dev/null nohup.out || fail=1
  rm -f nohup.out
  exit $fail
) || fail=1
fi

nohup no-such-command 2> err
errno=$?
if test -t 1; then
  test $errno = 127 || fail=1
  # It must exist.
  test -f nohup.out || fail=1
  # It must be empty.
  compare /dev/null nohup.out || fail=1
fi

cat <<\EOF > exp || fail=1
nohup: appending output to 'nohup.out'
nohup: cannot run command 'no-such-command': No such file or directory
EOF
# Disable these comparisons.  Too much variation in 2nd line.
# compare exp err || fail=1
rm -f nohup.out err exp
# ----------------------

touch k; chmod 0 k
nohup ./k 2> err
errno=$?
test $errno = 126 || fail=1
if test -t 1; then
  # It must exist.
  test -f nohup.out || fail=1
  # It must be empty.
  compare /dev/null nohup.out || fail=1
fi

cat <<\EOF > exp || fail=1
nohup: appending output to 'nohup.out'
nohup: cannot run command './k': Permission denied
EOF
# Disable these comparisons.  Too much variation in 2nd line.
# compare exp err || fail=1

# Make sure it fails with exit status of 125 when given too few arguments,
# except that POSIX requires 127 in this case.
nohup >/dev/null 2>&1
test $? = 125 || fail=1
POSIXLY_CORRECT=1 nohup >/dev/null 2>&1
test $? = 127 || fail=1

Exit $fail
#!/bin/sh
# Ensure that "nproc" is less than or equal to "nproc --all".

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ nproc

all=$(nproc --all)
available=$(OMP_NUM_THREADS= nproc)

test $available -le $all || fail=1

Exit $fail
#!/bin/sh
# Ensure that nproc prints a number > 0

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ nproc

for mode in --all ''; do
    procs=$(nproc $mode)
    test "$procs" -gt 0 || fail=1
done

for i in -1000 0 1 1000; do
    procs=$(OMP_NUM_THREADS=$i nproc)
    test "$procs" -gt 0 || fail=1
done

for i in 0 ' 1' 1000; do
    procs=$(nproc --ignore="$i")
    test "$procs" -gt 0 || fail=1
done

for i in -1 N; do
    returns_ 1 nproc --ignore=$i || fail=1
done

procs=$(OMP_NUM_THREADS=42 nproc --ignore=40)
test "$procs" -eq 2 || fail=1

Exit $fail
#!/bin/sh
# Verify that 'od -N N' reads no more than N bytes of input.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ od

echo abcdefg > in || framework_failure_


(od -An -N3 -c; od -An -N3 -c) < in > out
cat <<EOF > exp || fail=1
   a   b   c
   d   e   f
EOF
compare exp out || fail=1

Exit $fail
#!/bin/sh
# verify that od --endian works properly

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ od

in='0123456789abcdef'

NL='
'

# rev(1) is not generally available, so here's a simplistic
# implementation sufficient for our purposes.
rev() {
  while read line; do
    printf '%s' "$line" | sed "s/./&\\$NL/g" | tac | paste -s -d ''
  done
}

in_swapped() { printf '%s' "$in" | sed "s/.\{$1\}/&\\$NL/g" | rev |tr -d '\n'; }

for e in little big; do
  test $e = little && eo=big || eo=little
  for s in 1 2 4 8 16; do
    for t in x f; do
      od -t $t$s --endian=$e /dev/null > /dev/null 2>&1 || continue
      printf '%s' "$in" | od -An -t $t$s --endian=$e  > out1
      in_swapped  "$s"  | od -An -t $t$s --endian=$eo > out2
      compare out1 out2 || fail=1
    done
  done
done

Exit $fail
#!/bin/sh
# Test od on floating-point values.

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ od

export LC_ALL=C

# Test for a bug in coreutils up through 8.7: od was losing
# information when asked to parse floating-point values.  The numeric
# tests are valid only on Intel-like hosts, but that should be good
# enough to detect regressions, as they are designed to succeed on
# non-Intel-like hosts.  Also, test for another bug in coreutils 8.7
# on x86: sometimes there was no space between the columns.

set x $(echo aaaabaaa | tr ab '\376\377' | od -t fF) ||
  fail=1
case "$*" in
*0-*) fail=1;;
esac
case $3,$4 in
-1.694740e+38,-1.694740e+38) fail=1;;
esac

set x $(echo aaaaaaaabaaaaaaa | tr ab '\376\377' | od -t fD) ||
  fail=1
case "$*" in
*0-*) fail=1;;
esac
case $3,$4 in
-5.314010372517808e+303,-5.314010372517808e+303) fail=1;;
esac

set x $(echo aaaaaaaaaaaaaaaabaaaaaaaaaaaaaaa | tr ab '\376\377' | od -t fL) ||
  fail=1
case "$*" in
*0-*) fail=1;;
esac
case $3,$4 in
-1.023442870282055988e+4855,-1.023442870282055988e+4855) fail=1;;
esac

# Ensure od doesn't crash as it did on glibc <= 2.5:
# https://sourceware.org/bugzilla/show_bug.cgi?id=4586
set x $(printf 00000000ff000000 | tr 0f '\000\377' | od -t fL) || fail=1
# With coreutils <= 8.7 we used to print "nan" for the above invalid value.
# However since v8.7-22-ga71c22f we deferred to the system printf routines
# through the use of the ftoastr module.  So the following check would only
# be valid on x86_64 if we again handle the conversion internally or
# if this glibc bug is resolved:
# https://sourceware.org/bugzilla/show_bug.cgi?id=17661
#case "$*" in
#*nan*) ;;
#*) fail=1;;
#esac

Exit $fail
#!/bin/sh
# Verify that 'od -j N' skips N bytes of input.

# Copyright 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ od

for file in ${srcdir=.}/tests/init.sh /proc/version /sys/kernel/profiling; do
  test -r $file || continue

  cp -f $file copy &&
  bytes=$(wc -c < copy) || framework_failure_

  od -An $file > exp || fail=1
  od -An -j $bytes $file $file > out || fail=1
  compare exp out || fail=1

  od -An -j 4096 copy copy > exp1 2> experr1; expstatus=$?
  od -An -j 4096 $file $file > out1 2> err1; status=$?
  test $status -eq $expstatus || fail=1
  compare exp1 out1 || fail=1
  compare experr1 err1 || fail=1
done

Exit $fail
#!/bin/sh
# verify that multiple -t specifiers to od align well
# This would fail before coreutils-6.13.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ od

# Choose 48 bytes for the input, as that is lcm for 1, 2, 4, 8, 12, 16;
# we don't anticipate any other native object size on modern hardware.
seq 19 > in || framework_failure_
test $(wc -c < in) -eq 48 || framework_failure_


list='a c dC dS dI dL oC oS oI oL uC uS uI uL xC xS xI xL fF fD fL'
for format1 in $list; do
  for format2 in $list; do
    od -An -t${format1}z -t${format2}z in > out-raw || fail=1
    linewidth=$(head -n1 out-raw | wc -c)
    linecount=$(wc -l < out-raw)
    echo $format1 $format2 $(wc -c < out-raw) >> out
    echo $format1 $format2 $(expr $linewidth '*' $linecount) >> exp
  done
done

compare exp out || fail=1

Exit $fail
#!/bin/sh
# verify that od -t x8 works properly
# This would fail before coreutils-4.5.2.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ od

od -t x8 /dev/null >/dev/null ||
  skip_ "od lacks support for 8-byte quantities"

echo abcdefgh |tr -d '\n' > in || framework_failure_


od -An -t x8 in > out-raw || fail=1
sed 's/^ //;s/\(..\)/\1 /g;s/ $//' out-raw \
  | tr ' ' '\n' \
  | sort -n \
  > out

od -An -t x1 in \
  | sed 's/^ //' \
  | tr ' ' '\n' \
  | sort -n \
  > exp

compare exp out || fail=1

Exit $fail
#!/bin/sh
# pathchk tests

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ pathchk
skip_if_root_

touch file || framework_failure_


# This should exit nonzero.  Before 2.0.13, it gave a diagnostic,
# but exited successfully.
returns_ 1 pathchk file/x > /dev/null 2>&1 || fail=1

# This should exit nonzero.  Through 5.3.0 it exited with status zero.
returns_ 1 pathchk -p '' > /dev/null 2>&1 || fail=1

# This tests the new -P option.
returns_ 1 pathchk -P '' > /dev/null 2>&1 || fail=1
returns_ 1 pathchk -P -- - > /dev/null 2>&1 || fail=1
returns_ 1 pathchk -p -P x/- > /dev/null 2>&1 || fail=1

Exit $fail
#!/bin/sh
# Verify behavior of printenv.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ printenv

# Without arguments, printenv behaves like env.  Some shells provide
# printenv as a builtin, so we must invoke it via "env".
# But beware of $_, set by many shells to the last command run.
# Also, filter out LD_PRELOAD, which is set when running under valgrind.
# Note the apparently redundant "env  env": this is to ensure to get
# env's output the same way as that of printenv and works around a bug
# on aarch64 at least where libc's execvp reverses the order of the
# output.
env -- env | grep -Ev '^(_|LD_PRELOAD)=' > exp || framework_failure_
env -- printenv | grep -Ev '^(_|LD_PRELOAD)=' > out || fail=1
compare exp out || fail=1

# POSIX is clear that environ may, but need not be, sorted.
# Environment variable values may contain newlines, which cannot be
# observed by merely inspecting output from printenv.
if env -- printenv | grep '^ENV_TEST' >/dev/null ; then
  skip_ "environment has potential interference from ENV_TEST*"
fi

# Printing a single variable's value.
env -- printenv ENV_TEST > out
test $? = 1 || fail=1
compare /dev/null out || fail=1
echo a > exp || framework_failure_
ENV_TEST=a env -- printenv ENV_TEST > out || fail=1
compare exp out || fail=1

# Printing multiple variables.  Order follows command line.
ENV_TEST1=a ENV_TEST2=b env -- printenv ENV_TEST2 ENV_TEST1 ENV_TEST2 > out \
  || fail=1
ENV_TEST1=a ENV_TEST2=b env -- printenv ENV_TEST1 ENV_TEST2 >> out || fail=1
cat <<EOF > exp || framework_failure_
b
a
b
a
b
EOF
compare exp out || fail=1

# Exit status reflects missing variable, but remaining arguments processed.
ENV_TEST1=a env -- printenv ENV_TEST2 ENV_TEST1 > out
test $? = 1 || fail=1
ENV_TEST1=a env -- printenv ENV_TEST1 ENV_TEST2 >> out
test $? = 1 || fail=1
cat <<EOF > exp || framework_failure_
a
a
EOF
compare exp out || fail=1

# Non-standard environment variable name.  Shells won't create it, but
# env can, and printenv must be able to deal with it.
echo b > exp || framework_failure_
env -- -a=b printenv -- -a > out || fail=1
compare exp out || fail=1

# Silently reject invalid env-var names.
# Bug present through coreutils 8.0.
env a=b=c printenv a=b > out
test $? = 1 || fail=1
compare /dev/null out || fail=1

Exit $fail
#!/bin/sh
# make sure that only two hex. digits are consumed in a \xHHH sequence

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ printf

env printf '\x7e3\n' > out || fail=1
cat <<\EOF > exp
~3
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# tests for printf %q

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ printf

prog='env printf'

# Equivalent output to ls --quoting=shell-escape
$prog '%q\n' '' "'" a 'a b' '~a' 'a~' "$($prog %b 'a\r')" > out
cat <<\EOF > exp || framework_failure_
''
''\'''
a
'a b'
'~a'
a~
'a'$'\r'
EOF
compare exp out || fail=1

unset LC_ALL
f=$LOCALE_FR_UTF8
: ${LOCALE_FR_UTF8=none}
if test "$LOCALE_FR_UTF8" != "none"; then
  (
   #printable multi-byte
   LC_ALL=$f $prog '%q\n' 'áḃç' > out
   #non-printable multi-byte
   LC_ALL=$f $prog '%q\n' "$(LC_ALL=$f $prog '\u0378')" >> out
   #printable multi-byte in C locale
   LC_ALL=C $prog '%q\n' 'áḃç' >> out
  )
  cat <<\EOF > exp || framework_failure_
áḃç
''$'\315\270'
''$'\303\241\341\270\203\303\247'
EOF
  compare exp out || fail=1
fi

Exit $fail
#!/bin/sh
# Detect printf(3) failure even when it doesn't set stream error indicator

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

prog=printf

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ printf

vm=$(get_min_ulimit_v_ env $prog %20f 0) \
  || skip_ "this shell lacks ulimit support"

# Up to coreutils-6.9, "printf %.Nf 0" would encounter an ENOMEM internal
# error from glibc's printf(3) function whenever N was large relative to
# the size of available memory.  As of Oct 2007, that internal stream-
# related failure was not reflected (for any libc I know of) in the usual
# stream error indicator that is tested by ferror.  The result was that
# while the printf command obviously failed (generated no output),
# it mistakenly exited successfully (exit status of 0).

# Testing it is tricky, because there is so much variance
# in quality for this corner of printf(3) implementations.
# Most implementations do attempt to allocate N bytes of storage.
# Using the maximum value for N (2^31-1) causes glibc-2.7 to try to
# allocate almost 2^64 bytes, while freeBSD 6.1's implementation
# correctly outputs almost 2GB worth of 0's, which takes too long.
# We want to test implementations that allocate N bytes, but without
# triggering the above extremes.

# Some other versions of glibc-2.7 have a snprintf function that segfaults
# when an internal (technically unnecessary!) memory allocation fails.

# The compromise is to limit virtual memory to something reasonable,
# and to make an N-byte-allocating-printf require more than that, thus
# triggering the printf(3) misbehavior -- which, btw, is required by ISO C99.

mkfifo_or_skip_ fifo

# Disable MALLOC_PERTURB_, to avoid triggering this bug
# http://bugs.debian.org/481543#77
export MALLOC_PERTURB_=0

# Terminate any background process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

head -c 10 fifo > out & pid=$!

# Trigger large mem allocation failure
( ulimit -v $vm && env $prog %20000000f 0 2>err-msg > fifo )
exit=$?

# Map this longer, and rarer, diagnostic to the common one.
# printf: cannot perform formatted output: Cannot allocate memory" \
sed 's/cannot perform .*/write error/' err-msg > k && mv k err-msg
err_msg=$(tr '\n' : < err-msg)

# By some bug, on Solaris 11 (5.11 snv_86), err_msg ends up
# containing '1> fifo:printf: write error:'.  Recognize that, too.

case $err_msg in
  "$prog: write error:"*) diagnostic=y ;;
  "1> fifo:$prog: write error:") diagnostic=y ;;
  '') diagnostic=n ;;
  *) diagnostic=unexpected ;;
esac
n_out=$(wc -c < out)

case $n_out:$diagnostic:$exit in
  10:n:0) ;; # ok, succeeds w/no diagnostic: FreeBSD 6.1
  0:y:1)  ;; # ok, glibc-2.8 and newer, when printf(3) fails with ENOMEM

  # With MALLOC_PERTURB_=0, this no longer happens.
  # *:139)     # segfault; known bug at least in debian unstable's libc6 2.7-11
  #    echo 1>&2 "$0: bug in snprintf causes low-mem use of printf to segfault"
  #    fail=77;;

  # 10:y) ;; # Fail: doesn't happen: nobody succeeds with a diagnostic
  # 0:n)  ;; # Fail pre-patch: no output, no diag
  *) fail=1;;
esac

Exit $fail
#!/bin/sh
# basic tests for printf

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

prog='env printf'

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ printf

getlimits_


# Verify the 3 methods of specifying "Escape":
printf '%s\n' . . . | tr . '\033' > exp
$prog '\x1b\n\33\n\e\n' > out || fail=1
compare exp out || fail=1

# This would fail (by printing the '--') for printf in sh-utils
# and in coreutils 4.5.1.
$prog -- 'foo\n' > out || fail=1
cat <<\EOF > exp
foo
EOF

compare exp out || fail=1

rm -f out exp
# Until coreutils-4.5.10, this would elicit a segfault.
$prog '1 %*sy\n' -3 x >  out || fail=1

# Until coreutils 5.2.2, this would succeed.
if POSIXLY_CORRECT=1 $prog '2 \x' >/dev/null 2>&1; then
  fail=1
else
  echo '2 failed, as expected' >> out
fi

# Until coreutils-4.5.12, these would fail.
$prog '3 \x40\n'      >> out || fail=1
POSIXLY_CORRECT=1 \
$prog '4 \x40\n'      >> out || fail=1
$prog '5 % +d\n' 234  >> out || fail=1

# This should print "6 !\n", but don't rely on '!' being the
# one-byte representation of octal 041.  With printf prior to
# coreutils-5.0.1, it would print six bytes: "6 \41\n".
$prog '6 \41\n' | tr '\41' '!' >> out

# Note that as of coreutils-5.0.1, printf with a format of '\0002x'
# prints a NUL byte followed by the digit '2' and an 'x'.
# By contrast bash's printf outputs the same thing as $(printf '\2x') does.
$prog '7 \2y \02y \002y \0002y\n' |tr '\0\2' '*=' >> out

$prog '8 %b %b %b %b\n' '\1y' '\01y' '\001y' '\0001y'|tr '\1' = >> out

$prog '9 %*dx\n' -2 0 >>out || fail=1

$prog '10 %.*dx\n' $INT_UFLOW 0 >>out || fail=1
returns_ 1 $prog '%.*dx\n' $INT_OFLOW 0 >>out 2> /dev/null || fail=1

$prog '11 %*c\n' 2 x >>out || fail=1

returns_ 1 $prog '%#d\n' 0 >>out 2> /dev/null || fail=1

returns_ 1 $prog '%0s\n' 0 >>out 2> /dev/null || fail=1

returns_ 1 $prog '%.9c\n' 0 >>out 2> /dev/null || fail=1

returns_ 1 $prog '%'\''s\n' 0 >>out 2> /dev/null || fail=1

cat <<\EOF > exp
1 x  y
2 failed, as expected
3 @
4 @
5 +234
6 !
7 =y =y =y *2y
8 =y =y =y =y
9 0 x
10 0x
11  x
EOF

compare exp out || fail=1

# Verify handling of single quote chars (\' or \")

$prog '%d\n' '"a'  >out 2>err   # valid
$prog '%d\n' '"a"' >>out 2>>err # invalid
$prog '%d\n' '"'   >>out 2>>err # invalid
$prog '%d\n' 'a'   >>out 2>>err # invalid

cat <<EOF > exp
97
97
0
0
EOF

# POSIX says strtoimax *may* set errno to EINVAL in the latter
# two cases.  So far, that happens at least on MacOS X 10.5.
# Map that output to the more common expected output.
sed 's/: Invalid.*/: expected a numeric value/' err > k && mv k err

cat <<EOF > exp_err
printf: warning: ": character(s) following character constant have been ignored
printf: '"': expected a numeric value
printf: 'a': expected a numeric value
EOF

compare exp out || fail=1
compare exp_err err || fail=1

Exit $fail
#!/bin/sh

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ ptx

# Trigger a heap-clobbering bug in ptx from coreutils-6.10 and earlier.
# Using a long file name makes an abort more likely.
# Even with no file name, valgrind detects the buffer overrun.
f=01234567890123456789012345678901234567890123456789
touch $f empty || framework_failure_

# Specifying a regular expression ending in a lone backslash
# would cause ptx to write beyond the end of a malloc'd buffer.
ptx -F '\'      $f < /dev/null  > out || fail=1
ptx -S 'foo\'   $f < /dev/null >> out || fail=1
ptx -W 'bar\\\' $f < /dev/null >> out || fail=1
compare out empty || fail=1


# Trigger an invalid heap reference noticed by gcc -fsanitize=address
# from coreutils-8.22 and earlier.  As well as an invalid memory reference,
# the issue can be seen in the output, with non deterministice whitespace
# trimming when multiple files are specified.
printf '%s\n' 'This is a ptx whitespace Trimming test' > ws.in
ptx ws.in ws.in | sort | uniq -u > out
compare /dev/null out || fail=1


Exit $fail
#!/bin/sh
# -*- perl -*-
# Ensure that pwd works even when run from a very deep directory.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ pwd

require_readable_root_
require_perl_

ARGV_0=$0
export ARGV_0

# Don't use CuTmpdir here, since File::Temp's use of rmtree can't
# remove the deep tree we create.
$PERL -Tw -I"$abs_srcdir/tests" -MCuSkip -- - <<\EOF

# Show that pwd works even when the length of the resulting
# directory name is longer than PATH_MAX.
use strict;

(my $ME = $ENV{ARGV_0}) =~ s|.*/||;

sub normalize_to_cwd_relative ($$$)
{
  my ($dir, $dev, $ino) = @_;
  my $slash = -1;
  my $next_slash;
  while (1)
    {
      $slash = index $dir, '/', $slash + 1;
      $slash <= -1
        and die "$ME: $dir does not contain old CWD\n";
      my $dir_prefix = $slash ? substr ($dir, 0, $slash) : '/';
      my ($d, $i) = (stat $dir_prefix)[0, 1];
      defined $d && defined $i
        or die "$ME: $dir_prefix: stat failed: $!\n";
      $d eq $dev && $i eq $ino
        and return substr $dir, $slash + 1;
    }
}

# Set up a safe, well-known environment
$ENV{IFS}  = '';

# Taint checking requires a sanitized $PATH.  This script performs no $PATH
# search, so on most Unix-based systems, it is fine simply to clear $ENV{PATH}.
# However, on Cygwin, it's used to find cygwin1.dll, so set it.
$ENV{PATH} = '/bin:/usr/bin';

# Save CWD's device and inode numbers.
my ($dev, $ino) = (stat '.')[0, 1];

# Construct the expected "."-relative part of pwd's output.
my $z = 'z' x 31;
my $n = 256;
my $expected = "/$z" x $n;
# Remove the leading "/".
substr ($expected, 0, 1) = '';

my $i = 0;
do
  {
    mkdir $z, 0700
      or CuSkip::skip "$ME: skipping this test; cannot create long "
        . "directory name at depth $i: $!\n";
    chdir $z
  }
until (++$i == $n);

my $abs_top_builddir = $ENV{abs_top_builddir};
$abs_top_builddir
  or die "$ME: envvar abs_top_builddir not defined\n";
my $build_src_dir = "$abs_top_builddir/src";
$build_src_dir =~ m!^([-+.:/\w]+)$!
  or CuSkip::skip "$ME: skipping this test; odd build source directory name:\n"
    . "$build_src_dir\n";
$build_src_dir = $1;

my $pwd_binary = "$build_src_dir/pwd";

-x $pwd_binary
  or die "$ME: $pwd_binary is not an executable file\n";
chomp (my $actual = qx!$pwd_binary!);

# Convert the absolute name from pwd into a $CWD-relative name.
# This is necessary in order to avoid a spurious failure when run
# from a directory in a bind-mounted partition.  What happens is
# pwd reads a ".." that contains two or more entries with identical
# dev,ino that match the ones we're looking for, and it chooses a
# name that does not correspond to the one already recorded in $CWD.
$actual = normalize_to_cwd_relative $actual, $dev, $ino;

if ($expected ne $actual)
  {
    my $e_len = length $expected;
    my $a_len = length $actual;
    warn "expected len: $e_len\n";
    warn "actual len:   $a_len\n";
    warn "expected: $expected\n";
    warn "actual: $actual\n";
    exit 1;
  }
EOF

fail=$?

Exit $fail
#!/bin/sh
# Ensure that pwd options work.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ pwd

mkdir -p a/b || framework_failure_
ln -s a/b c || framework_failure_
base=$(env -- pwd -P)

# Remove any logical paths from $PWD.
cd "$base" || framework_failure_
test "x$PWD" = "x$base" || framework_failure_

# Enter a logical directory.
cd c || framework_failure_
test "x$PWD" = "x$base/c" || skip_ "cd does not properly update \$PWD"

env -- pwd -L > out || fail=1
printf %s\\n "$base/c" > exp || fail=1

env -- pwd --logical -P >> out || fail=1
printf %s\\n "$base/a/b" >> exp || fail=1

env -- pwd --physical >> out || fail=1
printf %s\\n "$base/a/b" >> exp || fail=1

# By default, we use -P unless POSIXLY_CORRECT.
env -- pwd >> out || fail=1
printf %s\\n "$base/a/b" >> exp || fail=1

env -- POSIXLY_CORRECT=1 pwd >> out || fail=1
printf %s\\n "$base/c" >> exp || fail=1

# Make sure we reject bogus values, and silently fall back to -P.
env -- PWD="$PWD/." pwd -L >> out || fail=1
printf %s\\n "$base/a/b" >> exp || fail=1

env -- PWD=bogus pwd -L >> out || fail=1
printf %s\\n "$base/a/b" >> exp || fail=1

env -- PWD="$base/a/../c" pwd -L >> out || fail=1
printf %s\\n "$base/a/b" >> exp || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# readlink from 6.9 would fail with a false-positive symlink loop error

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ readlink pwd
cwd=$(env pwd -P)

# To trigger this bug, we have to construct a name/situation during
# the resolution of which the code dereferences the same symlink (S)
# two different times with no actual loop.  In addition, arrange
# so that the second and fourth calls to readlink operate on S.

ln -s s p        || framework_failure_
ln -s d s        || framework_failure_
mkdir d          || framework_failure_
echo 2 > d/2     || framework_failure_
ln -s ../s/2 d/1 || framework_failure_

# With coreutils-6.9, this would fail with ELOOP.
readlink -v -e p/1 > out || fail=1
# readlink -e d/2 > exp || fail=1
echo "$cwd/d/2" > exp || fail=1
compare exp out || fail=1

# Construct a real loop and make sure readlink still detects it.
ln -sf ../s/1 d/2 || framework_failure_
readlink -v -e p/1 2> out && fail=1
readlink_msg=$(cat out)
case $readlink_msg in
  "readlink: p/1: "*) ;;
  *) fail=1;;
esac
symlink_loop_msg=${readlink_msg#"readlink: p/1: "}

# Exercise the hash table code.
ln -nsf ../s/3 d/2 || framework_failure_
ln -nsf ../p/4 d/3 || framework_failure_
ln -nsf ../p/5 d/4 || framework_failure_
ln -nsf ../p/6 d/5 || framework_failure_
ln -nsf ../p/7 d/6 || framework_failure_
ln -nsf ../p/8 d/7 || framework_failure_
echo x > d/8       || framework_failure_
readlink -v -e p/1 > out || fail=1
echo "$cwd/d/8" > exp || fail=1
compare exp out || fail=1

# A trivial loop
ln -s loop loop
readlink -v -e loop 2> out && fail=1
echo "readlink: loop: $symlink_loop_msg" > exp || framework_failure_
compare exp out || fail=1

Exit $fail
#!/bin/sh
# tests for canonicalize-existing mode (readlink -e) on /.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ readlink

stat_single=$(stat -c %d:%i /) || framework_failure_
stat_double=$(stat -c %d:%i //) || framework_failure_
double_slash=//
if test x"$stat_single" = x"$stat_double"; then
  double_slash=/
fi

test -d /dev || framework_failure_

ln -s / one || framework_failure_
ln -s // two || framework_failure_
ln -s /// three || framework_failure_
ln -s /./..// one-dots || framework_failure_
ln -s //./..// two-dots || framework_failure_
ln -s ///./..// three-dots || framework_failure_
ln -s /dev one-dev || framework_failure_
ln -s //dev two-dev || framework_failure_
ln -s ///dev three-dev || framework_failure_

cat >exp <<EOF || framework_failure_
/
$double_slash
/
/
$double_slash
/
/
$double_slash
/
/
$double_slash
/
/dev
${double_slash}dev
/dev
/dev
${double_slash}dev
/dev
/dev
${double_slash}dev
/dev
EOF

{
  readlink -e / || fail=1
  readlink -e // || fail=1
  readlink -e /// || fail=1
  readlink -e /.//.. || fail=1
  readlink -e //.//.. || fail=1
  readlink -e ///.//.. || fail=1
  readlink -e one || fail=1
  readlink -e two || fail=1
  readlink -e three || fail=1
  readlink -e one-dots || fail=1
  readlink -e two-dots || fail=1
  readlink -e three-dots || fail=1
  readlink -e one-dev || fail=1
  # We know /dev exists, but cannot assume //dev exists
  readlink -f two-dev || fail=1
  readlink -e three-dev || fail=1
  readlink -e one/dev || fail=1
  readlink -f two/dev || fail=1
  readlink -e three/dev || fail=1
  readlink -e one-dots/dev || fail=1
  readlink -f two-dots/dev || fail=1
  readlink -e three-dots/dev || fail=1
} > out

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Validate realpath operation

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ realpath

stat_single=$(stat -c %d:%i /) || framework_failure_
stat_double=$(stat -c %d:%i //) || framework_failure_
double_slash=//
if test x"$stat_single" = x"$stat_double"; then
  double_slash=/
fi
nl='
'

test -d /dev || framework_failure_

# Setup dir, file, symlink structure

mkdir -p dir1/dir2 || framework_failure_
ln -s dir1/dir2 ldir2 || framework_failure_
touch dir1/f dir1/dir2/f || framework_failure_
ln -s / one || framework_failure_
ln -s // two || framework_failure_
ln -s /// three || framework_failure_

# Basic operation
realpath -Pqz . >/dev/null || fail=1
# Operand is required
returns_ 1 realpath >/dev/null || fail=1
returns_ 1 realpath --relative-base . --relative-to . || fail=1
returns_ 1 realpath --relative-base . || fail=1

# -e --relative-* require directories
returns_ 1 realpath -e --relative-to=dir1/f --relative-base=. . || fail=1
realpath -e --relative-to=dir1/  --relative-base=. . || fail=1

# Note NUL params are unconditionally rejected by canonicalize_filename_mode
returns_ 1 realpath -m '' || fail=1
returns_ 1 realpath --relative-base= --relative-to=. . || fail=1

# symlink resolution
this=$(realpath .)
test "$(realpath ldir2/..)" = "$this/dir1" || fail=1
test "$(realpath -L ldir2/..)" = "$this" || fail=1
test "$(realpath -s ldir2)" = "$this/ldir2" || fail=1

# relative string handling
test $(realpath -m --relative-to=prefix prefixed/1) = '../prefixed/1' || fail=1
test $(realpath -m --relative-to=prefixed prefix/1) = '../prefix/1' || fail=1
test $(realpath -m --relative-to=prefixed prefixed/1) = '1' || fail=1

# Ensure no redundant trailing '/' present, as was the case in v8.15
test $(realpath -sm --relative-to=/usr /) = '..' || fail=1
# Ensure no redundant leading '../' present, as was the case in v8.15
test $(realpath -sm --relative-to=/ /usr) = 'usr' || fail=1

# Ensure --relative-base works
out=$(realpath -sm --relative-base=/usr --relative-to=/usr /tmp /usr) || fail=1
test "$out" = "/tmp$nl." || fail=1
out=$(realpath -sm --relative-base=/ --relative-to=/ / /usr) || fail=1
test "$out" = ".${nl}usr" || fail=1
# --relative-to defaults to the value of --relative-base
out=$(realpath -sm --relative-base=/usr /tmp /usr) || fail=1
test "$out" = "/tmp$nl." || fail=1
out=$(realpath -sm --relative-base=/ / /usr) || fail=1
test "$out" = ".${nl}usr" || fail=1
# For now, --relative-base must be a prefix of --relative-to, or all output
# will be absolute (compare to MacOS 'relpath -d dir start end').
out=$(realpath -sm --relative-base=/usr/local --relative-to=/usr \
    /usr /usr/local) || fail=1
test "$out" = "/usr${nl}/usr/local" || fail=1

# Ensure // is handled correctly.
test "$(realpath / // ///)" = "/$nl$double_slash$nl/" || fail=1
test "$(realpath one two three)" = "/$nl$double_slash$nl/" || fail=1
out=$(realpath -sm --relative-to=/ / // /dev //dev) || fail=1
if test $double_slash = //; then
  test "$out" = ".$nl//${nl}dev$nl//dev" || fail=1
else
  test "$out" = ".$nl.${nl}dev${nl}dev" || fail=1
fi
out=$(realpath -sm --relative-to=// / // /dev //dev) || fail=1
if test $double_slash = //; then
  test "$out" = "/$nl.$nl/dev${nl}dev" || fail=1
else
  test "$out" = ".$nl.${nl}dev${nl}dev" || fail=1
fi
out=$(realpath --relative-base=/ --relative-to=// / //) || fail=1
if test $double_slash = //; then
  test "$out" = "/$nl//" || fail=1
else
  test "$out" = ".$nl." || fail=1
fi

Exit $fail
#!/bin/sh
# Ensure that runcon does not reorder its arguments.

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ runcon

diag='runcon: runcon may be used only on a SELinux kernel'
echo "$diag" > exp || framework_failure_


# This test works even on systems without SELinux.
# On such a system it fails with the above diagnostic, which is fine.
# Before the no-reorder change, it would have failed with a diagnostic
# about -j being an invalid option.
runcon $(id -Z) true -j 2> out && > exp

# When run on a system with no /selinux/context (i.e., in a chroot),
# it chcon fails with this: "runcon: invalid context: \
# root:system_r:unconfined_t:s0-s0:c0.c1023: No such file or directory"
# That diagnostic is ok, too, so map it to the more common one.
case $(cat out) in
  'runcon: invalid context: '*) echo "$diag" > out;;
esac

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test SELinux-related options.

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ chcon cp ls mv stat

require_root_
require_selinux_
skip_if_mcstransd_is_running_

# Create a regular file, dir, fifo.
touch f || framework_failure_
mkdir d s1 s2 || framework_failure_
mkfifo_or_skip_ p


# special context that works both with and without mcstransd
ctx=root:object_r:tmp_t:s0

chcon $ctx f d p ||
  skip_ '"chcon '$ctx' ..." failed'

# inspect that context with both ls -Z and stat.
for i in d f p; do
  c=$(ls -dogZ $i|cut -d' ' -f3); test x$c = x$ctx || fail=1
  c=$(stat --printf %C $i); test x$c = x$ctx || fail=1
done

# ensure that ls -l output includes the ".".
c=$(ls -l f|cut -c11); test "$c" = . || fail=1

# Copy with an invalid context and ensure it fails
# Note this may succeed when root and selinux is in permissive mode
if test "$(getenforce)" = Enforcing; then
  returns_ 1 cp --context='invalid-selinux-context' f f.cp || fail=1
fi

# Copy each to a new directory and ensure that context is preserved.
cp -r --preserve=all d f p s1 || fail=1
for i in d f p; do
  c=$(stat --printf %C s1/$i); test x$c = x$ctx || fail=1
done

# Now, move each to a new directory and ensure that context is preserved.
mv d f p s2 || fail=1
for i in d f p; do
  c=$(stat --printf %C s2/$i); test x$c = x$ctx || fail=1
done

Exit $fail
#!/bin/sh
# Test for this fix: 461231f022bdb3ee392622d31dc475034adceeb2.
# Ensure that seq prints exactly two numbers for a 2-number integral
# range at the limit of floating point precision.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ seq
getlimits_

# Run this test only with glibc and sizeof (long double) > sizeof (double).
# Otherwise, there are known failures:
# http://thread.gmane.org/gmane.comp.gnu.coreutils.bugs/14939/focus=14944
cat <<\EOF > long.c
#include <features.h>
#if defined __GNU_LIBRARY__ && __GLIBC__ >= 2
int foo[sizeof (long double) - sizeof (double) - 1];
#else
"run this test only with glibc"
#endif
EOF
$CC -c long.c \
  || skip_ \
     'this test runs only on systems with glibc and long double != double'

a=$INTMAX_MAX
b=$INTMAX_OFLOW

seq $a $b > out || fail=1
printf "$a\n$b\n" > exp || fail=1
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test for output with appropriate precision

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ seq

# Integer only.  Before v8.24 these would switch output format

seq 999999 inf | head -n2 > out || fail=1
printf "%s\n" 999999 1000000 > exp || framework_failure_
compare exp out || fail=1

# Exercise buffer handling in non floating point output
for i in $(seq 100); do
  n1="$(printf '%*s' $i '' | tr ' ' 9)"
  n2="1$(echo $n1 | tr 9 0)"

  seq $n1 $n2 > out || fail=1
  printf "%s\n" "$n1" "$n2" > exp || framework_failure_
  compare exp out || fail=1
done

seq 0xF423F 0xF4240 > out || fail=1
printf "%s\n" 999999 1000000 > exp || framework_failure_
compare exp out || fail=1

# Ensure consistent precision for inf
seq 1 .1 inf | head -n2 > out || fail=1
printf "%s\n" 1.0 1.1 > exp || framework_failure_
compare exp out || fail=1

# Ensure standard output methods with inf start
seq inf inf | head -n2 | uniq > out || fail=1
test "$(wc -l < out)" = 1 || fail=1

# Ensure auto precision for hex float
seq 1 0x1p-1 2 > out || fail=1
printf "%s\n" 1 1.5 2 > exp || framework_failure_
compare exp out || fail=1

# Ensure consistent precision for hex
seq 1 .1 0x2 | head -n2 > out || fail=1
printf "%s\n" 1.0 1.1 > exp || framework_failure_
compare exp out || fail=1

# Ensure consistent handling of precision/width for exponents

seq 1.1e1 12 > out || fail=1
printf "%s\n" 11 12 > exp || framework_failure_
compare exp out || fail=1

seq 11 1.2e1 > out || fail=1
printf "%s\n" 11 12 > exp || framework_failure_
compare exp out || fail=1

seq -w 1.1e4 | head -n1 > out || fail=1
printf "%s\n" 00001 > exp || framework_failure_
compare exp out || fail=1

seq -w 1.10000e5 1.10000e5 > out || fail=1
printf "%s\n" 110000 > exp || framework_failure_
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test functionality of --exact

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ shred


# make sure that neither --exact nor --zero gobbles a command line argument
for opt in --exact --zero; do
  echo a > a || fail=1
  echo bb > b || fail=1
  echo ccc > c || fail=1

  shred --remove $opt a b || fail=1
  test -f a && fail=1
  test -f b && fail=1

  shred --remove $opt c || fail=1
  test -f c && fail=1
done


# make sure direct I/O is handled appropriately at end of file
# Create a 1MiB file as we'll probably not be using blocks larger than that
# (i.e., we want to test failed writes not at the start).
truncate -s1MiB file.slop || framework_failure_
truncate -s+1 file.slop || framework_failure_
shred --exact -n2 file.slop || fail=1

# make sure direct I/O is handled appropriately at start of file
truncate -s1 file.slop || framework_failure_
shred --exact -n2 file.slop || fail=1

Exit $fail
#!/bin/sh
# Verify the operations done by shred

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ shred


# shred a single letter, which should result in
# 3 random passes and a single rename.
printf 1 > f || framework_failure_
echo "\
shred: f: pass 1/3 (random)...
shred: f: pass 2/3 (random)...
shred: f: pass 3/3 (random)...
shred: f: removing
shred: f: renamed to 0
shred: f: removed" > exp || framework_failure_

shred -v -u f 2>out || fail=1
compare exp out || fail=1


# Likewise but for a zero length file
# to bypass the data passes
touch f || framework_failure_
echo "\
shred: f: removing
shred: f: renamed to 0
shred: f: removed" > exp || framework_failure_

shred -v -u f 2>out || fail=1
compare exp out || fail=1


# shred data 20 times and verify the passes used.
# This would consume all random data between 5.93 and 8.24 inclusive.
dd bs=100K count=1 if=/dev/zero | tr '\0' 'U' > Us || framework_failure_
printf 1 > f || framework_failure_
echo "\
shred: f: pass 1/20 (random)...
shred: f: pass 2/20 (ffffff)...
shred: f: pass 3/20 (924924)...
shred: f: pass 4/20 (888888)...
shred: f: pass 5/20 (db6db6)...
shred: f: pass 6/20 (777777)...
shred: f: pass 7/20 (492492)...
shred: f: pass 8/20 (bbbbbb)...
shred: f: pass 9/20 (555555)...
shred: f: pass 10/20 (aaaaaa)...
shred: f: pass 11/20 (random)...
shred: f: pass 12/20 (6db6db)...
shred: f: pass 13/20 (249249)...
shred: f: pass 14/20 (999999)...
shred: f: pass 15/20 (111111)...
shred: f: pass 16/20 (000000)...
shred: f: pass 17/20 (b6db6d)...
shred: f: pass 18/20 (eeeeee)...
shred: f: pass 19/20 (333333)...
shred: f: pass 20/20 (random)...
shred: f: removing
shred: f: renamed to 0
shred: f: removed" > exp || framework_failure_

shred -v -u -n20 -s4096 --random-source=Us f 2>out || fail=1
compare exp out || fail=1


Exit $fail
#!/bin/sh
# Exercise shred --remove

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ shred
skip_if_root_

# The length of the basename is what matters.
# In this case, shred-4.0l would try to rename the file 256^10 times
# before terminating.
file=0123456789
touch $file || framework_failure_
chmod u-w $file || framework_failure_

# This would take so long that it appears to infloop
# when using version from fileutils-4.0k.
# When the command completes, expect it to fail.
returns_ 1 shred -u $file > /dev/null 2>&1 || fail=1
rm -f $file || framework_failure_

# Ensure all --remove methods at least unlink the file
for mode in '' '=unlink' '=wipe' '=wipesync'; do
  touch $file || framework_failure_
  shred -n0 --remove"$mode" $file || fail=1
  test -e $file && fail=1
done

# Ensure incorrect params are diagnosed
touch $file || framework_failure_
returns_ 1 shred -n0 --remove=none $file 2>/dev/null || fail=1

Exit $fail
#!/bin/sh
# Exercise shred --size

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ shred

# Negative size
echo "shred: invalid file size: '-2'" > exp || framework_failure_
echo 1234 > f || framework_failure_
shred -s-2 f 2>err && fail=1
compare exp err || fail=1

# Octal/Hex
shred -s010 f || fail=1
test $(stat --printf=%s f) = 8 || fail=1
shred -s0x10 f || fail=1
test $(stat --printf=%s f) = 16 || fail=1

Exit $fail
#!/bin/sh
# Exercise shuf's reservoir-sampling code
# NOTE:
#  These tests do not check valid randomness,
#  they just check memory allocation related code.

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ shuf
expensive_
require_valgrind_

# Only exit with error for leaks when in development mode
# in which case we enable code to suppress inconsequential leaks.
grep '^#define lint 1' "$CONFIG_HEADER" && leaklevel=full || leaklevel=summary

# Run "shuf" with specific number of input lines and output lines
# Check the output for expected number of lines.
run_shuf_n()
{
  INPUT_LINES="$1"
  OUTPUT_LINES="$2"

  # Critical memory-related bugs will cause a segfault here
  # (with varying numbers of input/output lines)
  seq "$INPUT_LINES" | valgrind --leak-check=$leaklevel --error-exitcode=1 \
  shuf -n "$OUTPUT_LINES" -o "out_${INPUT_LINES}_${OUTPUT_LINES}" || return 1

  EXPECTED_LINES="$OUTPUT_LINES"
  test "$INPUT_LINES" -lt "$OUTPUT_LINES" && EXPECTED_LINES="$INPUT_LINES"

  # There is no sure way to verify shuffled output (as it is random).
  # Ensure we have the correct number of all numeric lines non duplicated lines.
  GOOD_LINES=$(grep '^[0-9][0-9]*$' "out_${INPUT_LINES}_${OUTPUT_LINES}" |
               sort -un | wc -l) || framework_failure_
  LINES=$(wc -l < "out_${INPUT_LINES}_${OUTPUT_LINES}") || framework_failure_

  test "$EXPECTED_LINES" -eq "$GOOD_LINES" || return 1
  test "$EXPECTED_LINES" -eq "$LINES" || return 1

  return 0
}

# Test multiple combinations of input lines and output lines.
# (e.g. small number of input lines and large number of output lines,
#  and vice-versa. Also, each reservoir allocation uses a 1024-lines batch,
#  so test 1023/1024/1025 and related values).
TEST_LINES="0 1 5 1023 1024 1025 3071 3072 3073"

for IN_N in $TEST_LINES; do
  for OUT_N in $TEST_LINES; do
    run_shuf_n "$IN_N" "$OUT_N" || {
      fail=1
      echo "shuf-reservoir-sampling failed with IN_N=$IN_N OUT_N=$OUT_N" >&2;
    }
  done
done

Exit $fail
#!/bin/sh
# Ensure that shuf randomizes its input.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ shuf
getlimits_

seq 100 > in || framework_failure_

shuf in >out || fail=1

# Fail if the input is the same as the output.
# This is a probabilistic test :-)
# However, the odds of failure are very low: 1 in 100! (~ 1 in 10^158)
compare in out > /dev/null && { fail=1; echo "not random?" 1>&2; }

# Fail if the sorted output is not the same as the input.
sort -n out > out1
compare in out1 || { fail=1; echo "not a permutation" 1>&2; }

# Exercise shuf's -i option.
shuf -i 1-100 > out || fail=1
compare in out > /dev/null && { fail=1; echo "not random?" 1>&2; }
sort -n out > out1
compare in out1 || { fail=1; echo "not a permutation" 1>&2; }

# Exercise shuf's -e option.
t=$(shuf -e a b c d e | sort | fmt)
test "$t" = 'a b c d e' || { fail=1; echo "not a permutation" 1>&2; }

# coreutils-8.22 dumps core.
shuf -er
test $? -eq 1 || fail=1

# coreutils-8.22 and 8.23 dump core
# with a single redundant operand with --input-range
shuf -i0-0 1
test $? -eq 1 || fail=1

# Before coreutils-6.3, this would infloop.
# "seq 1860" produces 8193 (8K + 1) bytes of output.
seq 1860 | shuf > /dev/null || fail=1

# coreutils-6.12 and earlier would output a newline terminator, not \0.
shuf --zero-terminated -i 1-1 > out || fail=1
printf '1\0' > exp || framework_failure_
cmp out exp || { fail=1; echo "missing NUL terminator?" 1>&2; }

# Ensure shuf -n operates efficiently for small n. Before coreutils-8.13
# this would try to allocate $SIZE_MAX * sizeof(size_t)
timeout 10 shuf -i1-$SIZE_MAX -n2 >/dev/null ||
  { fail=1; echo "couldn't get a small subset" >&2; }

# Ensure shuf -n0 doesn't read any input or open specified files
touch unreadable || framework_failure_
chmod 0 unreadable || framework_failure_
if ! test -r unreadable; then
  shuf -n0 unreadable || fail=1
  { shuf -n1 unreadable || test $? -ne 1; } && fail=1
fi

# Multiple -n is accepted, should use the smallest value
shuf -n10 -i0-9 -n3 -n20 > exp || framework_failure_
c=$(wc -l < exp) || framework_failure_
test "$c" -eq 3 || { fail=1; echo "Multiple -n failed">&2 ; }

# Test error conditions

# -i and -e must not be used together
: | { shuf -i0-9 -e A B || test $? -ne 1; } &&
  { fail=1; echo "shuf did not detect erroneous -e and -i usage.">&2 ; }
# Test invalid value for -n
: | { shuf -nA || test $? -ne 1; } &&
  { fail=1; echo "shuf did not detect erroneous -n usage.">&2 ; }
# Test multiple -i
{ shuf -i0-9 -n10 -i8-90 || test $? -ne 1; } &&
  { fail=1; echo "shuf did not detect multiple -i usage.">&2 ; }
# Test invalid range
for ARG in '1' 'A' '1-' '1-A'; do
    { shuf -i$ARG || test $? -ne 1; } &&
    { fail=1; echo "shuf did not detect erroneous -i$ARG usage.">&2 ; }
done

# multiple -o are forbidden
{ shuf -i0-9 -o A -o B || test $? -ne 1; } &&
  { fail=1; echo "shuf did not detect erroneous multiple -o usage.">&2 ; }
# multiple random-sources are forbidden
{ shuf -i0-9 --random-source A --random-source B || test $? -ne 1; } &&
  { fail=1; echo "shuf did not detect multiple --random-source usage.">&2 ; }

# Test --repeat option

# --repeat without count should return an indefinite number of lines
shuf --rep -i 0-10 | head -n 1000 > exp || framework_failure_
c=$(wc -l < exp) || framework_failure_
test "$c" -eq 1000 \
  || { fail=1; echo "--repeat does not repeat indefinitely">&2 ; }

# --repeat can output more values than the input range
shuf --rep -i0-9 -n1000 > exp || framework_failure_
c=$(wc -l < exp) || framework_failure_
test "$c" -eq 1000 || { fail=1; echo "--repeat with --count failed">&2 ; }

# Check output values (this is not bullet-proof, but drawing 1000 values
# between 0 and 9 should produce all values, unless there's a bug in shuf
# or a very poor random source, or extremely bad luck)
c=$(sort -nu exp | paste -s -d ' ') || framework_failure_
test "$c" = "0 1 2 3 4 5 6 7 8 9" ||
  { fail=1; echo "--repeat produced bad output">&2 ; }

# check --repeat with non-zero low value
shuf --rep -i222-233 -n2000 > exp || framework_failure_
c=$(sort -nu exp | paste -s -d ' ') || framework_failure_
test "$c" = "222 223 224 225 226 227 228 229 230 231 232 233" ||
 { fail=1; echo "--repeat produced bad output with non-zero low">&2 ; }

# --repeat,-i,count=0 should not fail and produce no output
shuf --rep -i0-9 -n0 > exp || framework_failure_
# file size should be zero (no output from shuf)
test \! -s exp ||
  { fail=1; echo "--repeat,-i0-9,-n0 produced bad output">&2 ; }

# --repeat with -e, without count, should repeat indefinitely
shuf --rep -e A B C D | head -n 1000 > exp || framework_failure_
c=$(wc -l < exp) || framework_failure_
test "$c" -eq 1000 ||
  { fail=1; echo "--repeat,-e does not repeat indefinitely">&2 ; }

# --repeat with STDIN, without count, should repeat indefinitely
printf "A\nB\nC\nD\nE\n" | shuf --rep | head -n 1000 > exp || framework_failure_
c=$(wc -l < exp) || framework_failure_
test "$c" -eq 1000 ||
  { fail=1; echo "--repeat,STDIN does not repeat indefinitely">&2 ; }

# --repeat with STDIN,count - can return move values than input lines
printf "A\nB\nC\nD\nE\n" | shuf --rep -n2000 > exp || framework_failure_
c=$(wc -l < exp) || framework_failure_
test "$c" -eq 2000 ||
  { fail=1; echo "--repeat,STDIN,count failed">&2 ; }

# Check output values (this is not bullet-proof, but drawing 2000 values
# between A and E should produce all values, unless there's a bug in shuf
# or a very poor random source, or extremely bad luck)
c=$(sort -u exp | paste -s -d ' ') || framework_failure_
test "$c" = "A B C D E" ||
  { fail=1; echo "--repeat,STDIN,count produced bad output">&2 ; }

# --repeat,stdin,count=0 should not fail and produce no output
printf "A\nB\nC\nD\nE\n" | shuf --rep -n0 > exp || framework_failure_
# file size should be zero (no output from shuf)
test \! -s exp ||
  { fail=1; echo "--repeat,STDIN,-n0 produced bad output">&2 ; }

Exit $fail
#!/bin/sh
# exercise the NaN-infloop bug in coreutils-8.13

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

echo nan > F || fail=1
printf 'nan\nnan\n' > exp || fail=1
timeout 10 sort -g -m F F > out || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Benchmark sort on randomly generated data.

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Written by Glen Lenker.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

very_expensive_

perl -e '
my $num_lines = 500000;
my $length = 100;

for (my $i=0; $i < $num_lines; $i++)
{
    for (my $j=0; $j < $length; $j++)
    {
      printf "%c", 32 + rand(94);
    }
    print "\n";
}' > in || framework_failure_

# We need to generate a lot of data for sort to show a noticeable
# improvement in performance. Sorting it in PERL may take awhile.

perl -e '
open (FILE, "<in");
my @list = <FILE>;
print sort(@list);
close (FILE);
' > exp || framework_failure_

time sort in > out || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test for sort --compress hang

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort
very_expensive_

cat <<EOF >compress || framework_failure_
#!$SHELL
tr 41 14 || exit
touch ok
EOF

chmod +x compress

seq -w 200000 > exp || fail=1
tac exp > in || fail=1

# When the bug occurs, 'sort' hangs forever.  When it doesn't occur,
# 'sort' could be running slowly on an overburdened machine.
# On a circa-2010 Linux server using NFS, a successful test completes
# in about 170 seconds, so specify 1700 seconds as a safety margin.
# Note --foreground will not kill any of the "compress" sub processes,
# assuming they're well behaved and exit in a timely manner, but will
# allow this command to be responsive to Ctrl-C
timeout --foreground 1700 sort --compress-program=./compress -S 1k in > out \
  || fail=1

compare exp out || fail=1
test -f ok || fail=1
rm -f compress ok

# If $TMPDIR is relative, give subprocesses time to react when 'sort' exits.
# Otherwise, under NFS, when 'sort' unlinks the temp files and they
# are renamed to .nfsXXXX instead of being removed, the parent cleanup
# of this directory will fail because the files are still open.
case $TMPDIR in
/*) ;;
*) sleep 1;;
esac

Exit $fail
#!/bin/sh
# Test use of compression subprocesses by sort

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort
expensive_

# Terminate any background processes
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

SORT_FAILURE=2

seq -w 2000 > exp || fail=1
tac exp > in || fail=1
insize=$(stat -c %s - <in) || fail=1

# This compressor's behavior is adjustable via environment variables.
export PRE_COMPRESS=
export POST_COMPRESS=

printf '%s\n' '#!'"$SHELL" >compress || framework_failure_
cat <<\EOF >>compress || framework_failure_
eval "$PRE_COMPRESS"
tr 41 14 || exit
eval "$POST_COMPRESS"
EOF

chmod +x compress

# "Impatient exit" tests
#
# In these test cases, the biggest compressor (or decompressor) exits
# with nonzero status, after sleeping a bit.  Until coreutils 8.7
# 'sort' impatiently exited without waiting for its decompression
# subprocesses in these cases.  Check compression too, while we're here.
#
for compress_arg in '' '-d'
do
  POST_COMPRESS='
    test "X$1" != "X'$compress_arg'" || {
      test "X$1" = "X" && exec <&1
      size=$(stat -c %s -)
      exec >/dev/null 2>&1 <&1 || exit
      expr $size "<" '"$insize"' / 2 || { sleep 1; exit 1; }
    }
  ' sort --compress-program=./compress -S 1k --batch-size=2 in > out
  test $? -eq $SORT_FAILURE || fail=1
done

# "Pre-exec child" test
#
# Ignore a random child process created before 'sort' was exec'ed.
# This bug was also present in coreutils 8.7.
#
( (sleep 1; exec false) & pid=$!
  PRE_COMPRESS='test -f ok || sleep 2'
  POST_COMPRESS='touch ok'
  exec sort --compress-program=./compress -S 1k in >out
) || fail=1
compare exp out || fail=1
test -f ok || fail=1
rm -f ok

rm -f compress

# If $TMPDIR is relative, give subprocesses time to react when 'sort' exits.
# Otherwise, under NFS, when 'sort' unlinks the temp files and they
# are renamed to .nfsXXXX instead of being removed, the parent cleanup
# of this directory will fail because the files are still open.
case $TMPDIR in
/*) ;;
*) sleep 1;;
esac

Exit $fail
#!/bin/sh
# Test use of compression by sort

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort
require_trap_signame_

seq -w 2000 > exp || framework_failure_
tac exp > in || framework_failure_

# This should force the use of temp files
sort -S 1k in > out || fail=1
compare exp out || fail=1

# Create our own gzip program that will be used as the default
cat <<EOF > gzip || fail=1
#!$SHELL
tr 41 14
touch ok
EOF

chmod +x gzip

# Ensure 'sort' is immune to parent's SIGCHLD handler
# Use a subshell and an exec to work around a bug in FreeBSD 5.0 /bin/sh.
(
  trap '' CHLD

  # This should force the use of child processes for "compression"
  PATH=.:$PATH exec sort -S 1k --compress-program=gzip in > /dev/null
) || fail=1

# This will find our new gzip in PATH
PATH=.:$PATH sort -S 1k --compress-program=gzip in > out || fail=1
compare exp out || fail=1
test -f ok || fail=1
rm -f ok

# This is to make sure it works with no compression.
PATH=.:$PATH sort -S 1k in > out || fail=1
compare exp out || fail=1
test -f ok && fail=1

# This is to make sure we can use something other than gzip
mv gzip dzip || fail=1
sort --compress-program=./dzip -S 1k in > out || fail=1
compare exp out || fail=1
test -f ok || fail=1
rm -f ok

# Make sure it can find other programs in PATH correctly
PATH=.:$PATH sort --compress-program=dzip -S 1k in > out || fail=1
compare exp out || fail=1
test -f ok || fail=1
rm -f dzip ok

Exit $fail
#!/bin/sh
# Tests for file descriptor exhaustion.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

# Skip the test when running under valgrind.
( ulimit -n 6; sort 3<&- 4<&- 5<&- < /dev/null ) \
  || skip_ 'fd-limited sort failed; are you running under valgrind?'

for i in $(seq 31); do
  echo $i | tee -a in > __test.$i || framework_failure_
done

# glob before ulimit to avoid issues on bash 3.2 on OS X 10.6.8 at least
test_files=$(echo __test.*)

(
 ulimit -n 6
 sort -n -m $test_files 3<&- 4<&- 5<&- < /dev/null > out
) &&
compare in out ||
  { fail=1; echo 'file descriptor exhaustion not handled' 1>&2; }

echo 32 | tee -a in > in1
(
 ulimit -n 6
 sort -n -m $test_files - 3<&- 4<&- 5<&- < in1 > out
) &&
compare in out || { fail=1; echo 'stdin not handled properly' 1>&2; }

Exit $fail
#!/bin/sh
# Test annotation of sort keys

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort printf

number() { cat -n | sed 's/^ *//'; }

cat <<\EOF > exp
1
 ^ no match for key

^ no match for key
44
  ^ no match for key
33
  ^ no match for key
2
 ^ no match for key
1
 ^ no match for key

^ no match for key
44
  ^ no match for key
33
  ^ no match for key
2
 ^ no match for key

^ no match for key
1
_
2
_
33
__
44
__
2>
  ^ no match for key
3>1
  _
1>2
  _
1
 ^ no match for key

^ no match for key
44
  ^ no match for key
33
  ^ no match for key
2
 ^ no match for key
1
 ^ no match for key

^ no match for key
44
  ^ no match for key
33
  ^ no match for key
2
 ^ no match for key

^ no match for key
1
_
2
_
33
__
44
__
2>
  ^ no match for key
3>1
  _
1>2
  _
1
 ^ no match for key

^ no match for key
44
  ^ no match for key
33
  ^ no match for key
2
 ^ no match for key
1
 ^ no match for key

^ no match for key
44
  ^ no match for key
33
  ^ no match for key
2
 ^ no match for key

^ no match for key
1
_
2
_
33
__
44
__
2>
  ^ no match for key
3>1
  _
1>2
  _

^ no match for key
JAN
___
FEB
___
FEB
   ^ no match for key

^ no match for key
JAN
   ^ no match for key
JAZZ
^ no match for key

^ no match for key
JAN
___
FEB
___
2>JAZZ
  ^ no match for key
3>
  ^ no match for key
4>JAN
  ___
1>FEB
  ___

^ no match for key
JANZ
___
JAN
___
FEB
___
3>
  ^ no match for key
2>JANZ
  ___
4>JAN
  ___
1>FEB
  ___
 1.2ignore
 ___
 1.1e4ignore
 _____
>>a
___
>b
__
a
 ^ no match for key

^ no match for key
a
_
b
_
-3
__
-2
__
-0
__
--Mi-1
^ no match for key
-0
__
1
_
 1
 _
__
1
_
_
 1
 _
1
_
 1
__
1
_
2,5
_
2.4
___
2.,,3
__
2.4
___
2,,3
_
2.4
___
1a
_
2b
_
>a
 _
A>chr10
     ^ no match for key
B>chr1
     ^ no match for key
1 2
 __
1 3
 __
EOF

(
for type in n h g; do
  printf '1\n\n44\n33\n2\n' | sort -s -k2$type --debug
  printf '1\n\n44\n33\n2\n' | sort -s -k1.3$type --debug
  printf '1\n\n44\n33\n2\n' | sort -s -k1$type --debug
  printf '2\n\n1\n' | number | sort -s -k2g --debug
done

printf 'FEB\n\nJAN\n' | sort -s -k1M --debug
printf 'FEB\n\nJAN\n' | sort -s -k2,2M --debug
printf 'FEB\nJAZZ\n\nJAN\n' | sort -s -k1M --debug
printf 'FEB\nJAZZ\n\nJAN\n' | number | sort -s -k2,2M --debug
printf 'FEB\nJANZ\n\nJAN\n' | sort -s -k1M --debug
printf 'FEB\nJANZ\n\nJAN\n' | number | sort -s -k2,2M --debug

printf ' 1.2ignore\n 1.1e4ignore\n' | sort -s -g --debug

printf '\tb\n\t\ta\n' | sort -s -d --debug # ignore = 1

printf 'a\n\n' | sort -s -k2,2 --debug #lena = 0

printf 'b\na\n' | sort -s -k1 --debug #otherwise key compare

printf -- '-0\n1\n-2\n--Mi-1\n-3\n-0\n' | sort -s --debug -k1,1h

printf ' 1\n1\n' | sort -b --debug
printf ' 1\n1\n' | sort -sb --debug
printf ' 1\n1\n' | sort --debug

# strnumcmp is a bit weird, so we don't match exactly
printf '2,5\n2.4\n' | sort -s -k1n --debug
printf '2.,,3\n2.4\n' | sort -s -k1n --debug
printf '2,,3\n2.4\n' | sort -s -k1n --debug

# -z means we convert \0 to \n
env printf '1a\x002b\x00' | sort -s -n -z --debug

# Check that \0 and \t intermix.
printf '\0\ta\n' | sort -s -k2b,2 --debug | tr -d '\0'

# Check that key end before key start is not underlined
printf 'A\tchr10\nB\tchr1\n' | sort -s -k2.4b,2.3n --debug

# Ensure that -b applied before -k offsets
printf '1 2\n1 3\n' | sort -s -k1.2b --debug
) > out

compare exp out || fail=1

cat <<\EOF > exp
   1²---++3   1,234  Mi
               _
   _________
________________________
   1²---++3   1,234  Mi
              _____
   ________
_______________________
+1234 1234Gi 1,234M
^ no match for key
_____
^ no match for key
      ____
      ____
      _____
             _____
             _____
             ______
___________________
EOF

unset LC_ALL
f=$LOCALE_FR_UTF8

: ${LOCALE_FR_UTF8=none}
if test "$LOCALE_FR_UTF8" != "none"; then
  (
  echo '   1²---++3   1,234  Mi' |
    LC_ALL=C sort --debug -k2g -k1b,1
  echo '   1²---++3   1,234  Mi' |
    LC_COLLATE=$f LC_CTYPE=$f LC_NUMERIC=$f LC_MESSAGES=C \
        sort --debug -k2g -k1b,1
  echo '+1234 1234Gi 1,234M' |
    LC_COLLATE=$f LC_CTYPE=$f LC_NUMERIC=$f LC_MESSAGES=C \
      sort --debug -k1,1n -k1,1g \
        -k1,1h -k2,2n -k2,2g -k2,2h -k3,3n -k3,3g -k3,3h
  ) > out
  compare exp out || fail=1
fi

Exit $fail
#!/bin/sh
# Test warnings for sort options

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

cat <<\EOF > exp
sort: using simple byte comparison
sort: key 1 has zero width and will be ignored
sort: using simple byte comparison
sort: key 1 has zero width and will be ignored
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
sort: using simple byte comparison
sort: options '-bghMRrV' are ignored
sort: using simple byte comparison
sort: options '-bghMRV' are ignored
sort: option '-r' only applies to last-resort comparison
sort: using simple byte comparison
sort: option '-r' only applies to last-resort comparison
sort: using simple byte comparison
sort: options '-bg' are ignored
sort: using simple byte comparison
sort: using simple byte comparison
sort: option '-b' is ignored
sort: using simple byte comparison
sort: using simple byte comparison
sort: using simple byte comparison
sort: leading blanks are significant in key 1; consider also specifying 'b'
sort: using simple byte comparison
sort: leading blanks are significant in key 1; consider also specifying 'b'
sort: option '-d' is ignored
sort: using simple byte comparison
sort: leading blanks are significant in key 1; consider also specifying 'b'
sort: option '-i' is ignored
sort: using simple byte comparison
sort: using simple byte comparison
sort: using simple byte comparison
sort: failed to set locale; using simple byte comparison
EOF

sort -s -k2,1 --debug /dev/null 2>>out
sort -s -k2,1n --debug /dev/null 2>>out
sort -s -k1,2n --debug /dev/null 2>>out
sort -s -rRVMhgb -k1,1n --debug /dev/null 2>>out
sort -rRVMhgb -k1,1n --debug /dev/null 2>>out
sort -r -k1,1n --debug /dev/null 2>>out
sort -gbr -k1,1n -k1,1r --debug /dev/null 2>>out
sort -b -k1b,1bn --debug /dev/null 2>>out # no warning
sort -b -k1,1bn --debug /dev/null 2>>out
sort -b -k1,1bn -k2b,2 --debug /dev/null 2>>out # no warning
sort -r -k1,1r --debug /dev/null 2>>out # no warning for redundant options
sort -i -k1,1i --debug /dev/null 2>>out # no warning
sort -d -k1,1b --debug /dev/null 2>>out
sort -i -k1,1d --debug /dev/null 2>>out
sort -r --debug /dev/null 2>>out #no warning
sort -rM --debug /dev/null 2>>out #no warning
sort -rM -k1,1 --debug /dev/null 2>>out #no warning
LC_ALL=missing sort --debug /dev/null 2>>out

compare exp out || fail=1

cat <<\EOF > exp
sort: using simple byte comparison
sort: key 1 is numeric and spans multiple fields
sort: obsolescent key '+2 -1' used; consider '-k 3,1' instead
sort: key 2 has zero width and will be ignored
sort: leading blanks are significant in key 2; consider also specifying 'b'
sort: option '-b' is ignored
sort: option '-r' only applies to last-resort comparison
EOF

sort --debug -rb -k2n +2.2 -1b /dev/null 2>out

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test discriminator-based sorting.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

# Set limit variables.
getlimits_

# These tests are designed for a 'sort' implementation that uses a
# discriminator, i.e., a brief summary of a key that may have lost info,
# but whose ordering is consistent with that of the original key.
# The tests are useful even if 'sort' does not use this representation.

# Test lexicographic sorting.

# A long-enough string so that it overruns a small discriminator buffer size.
long_prefix='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
seq -f "$long_prefix%5.0f" 10000 > exp || fail=1
sort -R exp | LC_ALL=C sort > out || fail=1
compare exp out || fail=1


# Test numeric sorting.

# These tests are designed for an internal representation that ordinarily
# looks at the number plus two decimal digits, but if -h is
# used it looks at one decimal place plus a 4-bit SI prefix value.
# In both cases, there's an extra factor of 2 for the sign.
# Note INTMAX_MAX is used below as that's that largest number
# expr can handle on all systems (without GMP).
max_int100=$(expr $INTMAX_MAX / 100) &&
max_frac100=$(printf '%.2d' $(expr $INTMAX_MAX % 100)) &&
max_int160=$(expr $INTMAX_MAX / 160) &&
max_frac160=$(expr $INTMAX_MAX / 16 % 10) &&
{ printf -- "\
    -$UINTMAX_OFLOW
    -$UINTMAX_MAX
    -${max_int100}0.1
    -${max_int100}0
    -${max_int100}0.0
    -${max_int160}0.1
    -${max_int160}0
    -${max_int160}0.0
    -$max_int100.${max_frac100}1
    -$max_int100.$max_frac100
    -$max_int160.${max_frac160}1
    -$max_int160.$max_frac160
" &&
  seq -- -10 .001 10 &&
  printf "\
    $max_int160
    $max_int160.$max_frac160
    $max_int160.${max_frac160}1
    $max_int100
    $max_int100.$max_frac100
    $max_int100.${max_frac100}1
    ${max_int160}0
    ${max_int160}0.0
    ${max_int160}0.1
    ${max_int100}0
    ${max_int100}0.0
    ${max_int100}0.1
    $UINTMAX_MAX
    $UINTMAX_OFLOW
"
} > exp || fail=1

for opts in -n -h; do
  sort -R exp | LC_ALL=C sort $opts > out || fail=1
  compare exp out || fail=1
done

Exit $fail
#!/bin/sh
# Test 'sort' exits early on inaccessible inputs or output

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort
skip_if_root_

SORT_FAILURE=2

# Check output is writable before starting to sort
touch input
chmod a-w input
returns_ $SORT_FAILURE timeout 10 sort -o input || fail=1

# Check all inputs are readable before starting to sort
# Also ensure the output isn't created in this case
touch output
chmod a-r output
returns_ $SORT_FAILURE timeout 10 sort -o typo - output || fail=1
test -e typo && fail=1

Exit $fail
#!/bin/sh
# Ensure sort -g sorts floating point limits correctly

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

# Return 0 if LDBL_MIN is smaller than DBL_MIN, else 1.
# Dissect numbers like these, comparing first exponent, then
# whole part of mantissa, then fraction, until finding enough
# of a difference to determine the relative order of the numbers.
# These are "reversed":
#   $ ./getlimits |grep DBL_MIN
#   DBL_MIN=2.225074e-308
#   LDBL_MIN=2.004168e-292
#
# These are in the expected order:
#   $ ./getlimits|grep DBL_MIN
#   DBL_MIN=2.225074e-308
#   LDBL_MIN=3.362103e-4932

dbl_minima_order()
{
  LC_ALL=C getlimits_
  set -- $(echo $LDBL_MIN | tr .e- '   ')
  local ldbl_whole=$1 ldbl_frac=$2 ldbl_exp=$3

  set -- $(echo $DBL_MIN |tr .e- '   ')
  local dbl_whole=$1 dbl_frac=$2 dbl_exp=$3

  test "$dbl_exp"    -lt "$ldbl_exp"   && return 0
  test "$ldbl_exp"   -lt "$dbl_exp"    && return 1
  test "$ldbl_whole" -lt "$dbl_whole"  && return 0
  test "$dbl_whole"  -lt "$ldbl_whole" && return 1
  test "$ldbl_frac"  -le "$dbl_frac"   && return 0
  return 1
}

# On some systems, DBL_MIN < LDBL_MIN.  Detect that.
dbl_minima_order; reversed=$?

for LOC in C $LOCALE_FR; do

  LC_ALL=$LOC getlimits_

  # See if sort should be using long doubles
  grep '^#define HAVE_C99_STRTOLD 1' $CONFIG_HEADER > /dev/null ||
    { LDBL_MAX="$DBL_MAX"; LDBL_MIN="$DBL_MIN"; }

  # If DBL_MIN happens to be smaller than LDBL_MIN, swap them,
  # so that out expected output is sorted.
  if test $reversed = 1; then
    t=$LDBL_MIN
    LDBL_MIN=$DBL_MIN
    DBL_MIN=$t
  fi

  printf -- "\
-$LDBL_MAX
-$DBL_MAX
-$FLT_MAX
-$FLT_MIN
-$DBL_MIN
-$LDBL_MIN
0
$LDBL_MIN
$DBL_MIN
$FLT_MIN
$FLT_MAX
$DBL_MAX
$LDBL_MAX
" |
  grep '^[0-9.,e+-]*$' > exp # restrict to numeric just in case

  tac exp | LC_ALL=$LOC sort -sg > out || fail=1

  compare exp out || fail=1
done

Exit $fail
#!/bin/sh
# Test whether sort avoids opening more file descriptors than it is
# allowed when merging files.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

mkdir in err || framework_failure_


for i in $(seq 17); do
  echo $i >in/$i
done
seq 17 >some-data

# When these tests are run inside the automated testing framework, they
# have one less available file descriptor than when run outside the
# automated testing framework. If a test with a batch size of b fails
# inside the ATF, then the same test with batch size b+1 may pass outside
# the ATF but fail inside it.

# The default batch size (nmerge) is 16.
(ulimit -n 19 \
   && sort -m --batch-size=16 in/* 2>err/merge-default-err \
   || ! grep "open failed" err/merge-default-err) || fail=1

# If sort opens a file to sort by random hashes of keys,
# it needs to consider this file against its limit on open file
# descriptors.  Test once with the default random source
# and once with an explicit source.
for randsource in '' --random-source=some-data; do
  (ulimit -n 20 \
     && sort -mR $randsource --batch-size=16 in/* 2>err/merge-random-err \
     || ! grep "open failed" err/merge-random-err) || fail=1
done

# 'sort -m' should work in a limited file descriptor
# environment when the output is repeatedly one of its inputs.
# In coreutils 8.7 and earlier, 'sort' would dump core on this test.
#
# This test uses 'exec' to redirect file descriptors rather than
# ordinary redirection on the 'sort' command.  This is intended to
# work around bugs in OpenBSD /bin/sh, and some other sh variants,
# that squirrel away file descriptors before closing them; see
# <http://lists.gnu.org/archive/html/bug-tar/2010-10/msg00075.html>.
# This test finds the bug only with shells that do not close FDs on
# exec, and will miss the bug (if present) on other shells, but it's
# not easy to fix this without running afoul of the OpenBSD-like sh bugs.
(seq 6 && echo 6) >exp || fail=1
echo 6 >out || fail=1
(exec 3<&- 4<&- 5<&- 6</dev/null 7<&6 8<&6 9<&6 &&
 ulimit -n 10 &&
 sort -n -m --batch-size=7 -o out out in/1 in/2 in/3 in/4 in/5 out
) &&
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test sorting of abbreviated months from the locale

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

locale --version >/dev/null 2>&1 ||
  skip_ 'The locale utility is not present'

# C will be used if the locale is not present
for LOC in "$LOCALE_FR" "$LOCALE_FR_UTF8" "ja_JP.utf8"; do
  mon="$(LC_ALL=$LOC locale abmon 2>/dev/null);"
  smon=$(LC_ALL=$LOC locale abmon 2>/dev/null |
          tr ';' '\n' | shuf | nl | LC_ALL=$LOC sort -k2,2M |
          cut -f2 | tr '\n' ';')
  test "$mon" = "$smon" || { fail=1; break; }
done

Exit $fail
#!/bin/sh
# Ensure that sort --sort-random doesn't sort.

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

seq 100 > in || framework_failure_


sort --random-sort in > out || fail=1

# Fail if the input is the same as the output.
# This is a probabilistic test :-)
# However, the odds of failure are very low: 1 in 100! (~ 1 in 10^158)
compare in out > /dev/null && { fail=1; echo "not random?" 1>&2; }

# Fail if the sorted output is not the same as the input.
sort -n out > out1
compare in out1 || { fail=1; echo "not a permutation" 1>&2; }

# If locale is available then use it to find a random non-C locale.
if (locale --version) > /dev/null 2>&1; then
  locale=$(locale -a | sort --random-sort | $AWK '/^.._/{print;exit}')
  LC_ALL=$locale sort --random-sort in > out1 || fail=1
  LC_ALL=$locale sort --random-sort in > out2 || fail=1

  # Fail if the output "randomly" is the same twice in a row.
  compare out1 out2 > /dev/null &&
    { fail=1; echo "not random with LC_ALL=$locale" 1>&2; }

  # Fail if the sorted output is not the same as the input.
  sort -n out > out1
  compare in out1 ||
    { fail=1; echo "not a permutation with LC_ALL=$locale" 1>&2; }
fi

Exit $fail
#!/bin/sh
# trigger a bug that would make parallel sort use 100% of one or more
# CPU while blocked on output.

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

# This isn't terribly expensive, but it must not be run under heavy load.
# Since the "very expensive" tests are already run only with -j1, adding
# this test to the list ensures it still gets _some_ (albeit minimal)
# coverage while not causing false-positive failures in day to day runs.
very_expensive_

grep '^#define HAVE_PTHREAD_T 1' "$CONFIG_HEADER" > /dev/null ||
  skip_ 'requires pthreads'

# Terminate any background processes
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

seq 100000 > in || framework_failure_
mkfifo_or_skip_ fifo

# Arrange for sort to require 8.0+ seconds of wall-clock time,
# while actually using far less than 1 second of CPU time.
(for i in $(seq 80); do read line; echo $i; sleep .1; done
  cat > /dev/null) < fifo & pid=$!

# However, under heavy load, it can easily take more than
# one second of CPU time, so set a permissive limit:
ulimit -t 7
sort --parallel=2 in > fifo || fail=1

Exit $fail
#!/bin/sh
# Trigger a bug that would cause 'sort' to reference stale thread stack memory.

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# written by Jim Meyering and Paul Eggert

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

very_expensive_
require_valgrind_

grep '^#define HAVE_PTHREAD_T 1' "$CONFIG_HEADER" > /dev/null ||
  skip_ 'requires pthreads'

# gensort output seems to trigger the failure more often,
# so prefer gensort if it is available.
(gensort -a 10000 in) 2>/dev/null ||
  seq -f %-98f 10000 | shuf > in ||
  framework_failure_

# On Fedora-17-beta (valgrind-3.7.0-2.fc17.x86_64), this evokes two
# "Conditional jump or move depends on uninitialised value(s)" errors,
# each originating from _dl_start.
valgrind --quiet --error-exitcode=3 sort --version > /dev/null ||
  framework_failure_ 'valgrind fails for trivial sort invocation'

# With the bug, 'sort' would fail under valgrind about half the time,
# on some circa-2010 multicore Linux platforms.  Run the test 100 times
# so that the probability of missing the bug should be about 1 in
# 2**100 on these hosts.
for i in $(seq 100); do
  valgrind --quiet --error-exitcode=3 \
      sort -S 100K --parallel=2 in > /dev/null ||
    { fail=$?; echo iteration $i failed; Exit $fail; }
done

Exit $fail
#!/bin/sh
# Before 8.19, this would trigger a free-memory read.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort
require_valgrind_

{ echo 0; printf '%0900d\n' 1; } > in || framework_failure_

valgrind --error-exitcode=1 sort --p=1 -S32b -u in > out || fail=1

compare in out || fail=1

Exit $fail
#!/bin/sh
# parallel sort with --unique (-u) would segfault

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

grep '^#define HAVE_PTHREAD_T 1' "$CONFIG_HEADER" > /dev/null ||
  skip_ 'requires pthreads'

cat <<\EOF > in || framework_failure_







z
zzzzzz
zzzzzzz
zzzzzzz
zzzzzzz
zzzzzzzzz
zzzzzzzzzzz
zzzzzzzzzzzz
EOF

sort --parallel=1 -u in > exp || fail=1

sort --parallel=2 -u -S 10b < in > out || fail=1
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test 'sort -u'.

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

cat > in <<\EOF
1
2
1
3
EOF

cat > exp <<\EOF
1
2
3
EOF

for LOC in C "$LOCALE_FR" "$LOCALE_FR_UTF8"; do
  test -z "$LOC" && continue

  LC_ALL=$LOC sort -u in > out || { fail=1; break; }
  compare exp out || { fail=1; break; }
done

Exit $fail
#!/bin/sh
# exercise sort's --sort=version option

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sort

cat > in << _EOF_
gcc-c++-10.fc9.tar.gz
gcc-c++-10.8.12-0.7rc2.fc9.tar.bz2
glibc-2-0.1.beta1.fc10.rpm
glibc-common-5-0.2.beta2.fc9.ebuild
glibc-common-5-0.2b.deb
glibc-common-11b.ebuild
glibc-common-11-0.6rc2.ebuild
libstdc++-0.5.8.11-0.7rc2.fc10.tar.gz
libstdc++-4a.fc8.tar.gz
libstdc++-4.10.4.20040204svn.rpm
libstdc++-devel-3.fc8.ebuild
libstdc++-devel-3a.fc9.tar.gz
libstdc++-devel-8.fc8.deb
libstdc++-devel-8.6.2-0.4b.fc8
nss_ldap-1-0.2b.fc9.tar.bz2
nss_ldap-1-0.6rc2.fc8.tar.gz
nss_ldap-1.0-0.1a.tar.gz
nss_ldap-10beta1.fc8.tar.gz
nss_ldap-10.11.8.6.20040204cvs.fc10.ebuild
string start 5.0.0 end of str
string start 5.1.0 end of str
string start 5.10.0 end of str
string start 5.2.0 end of str
string start 5.20.0 end of str
string start 5.3.0 end of str
string start 5.30.0 end of str
string start 5.4.0 end of str
string start 5.40.0 end of str
string start 5.5.0 end of str
string start 5.50.0 end of str
string start 5.6.0 end of str
string start 5.60.0 end of str
string start 5.7.0 end of str
string start 5.70.0 end of str
string start 5.8.0 end of str
string start 5.80.0 end of str
string start 5.9.0 end of str
string start 5.90.0 end of str
_EOF_

cat > exp << _EOF_
gcc-c++-10.fc9.tar.gz
gcc-c++-10.8.12-0.7rc2.fc9.tar.bz2
glibc-2-0.1.beta1.fc10.rpm
glibc-common-5-0.2.beta2.fc9.ebuild
glibc-common-5-0.2b.deb
glibc-common-11b.ebuild
glibc-common-11-0.6rc2.ebuild
libstdc++-0.5.8.11-0.7rc2.fc10.tar.gz
libstdc++-4a.fc8.tar.gz
libstdc++-4.10.4.20040204svn.rpm
libstdc++-devel-3.fc8.ebuild
libstdc++-devel-3a.fc9.tar.gz
libstdc++-devel-8.fc8.deb
libstdc++-devel-8.6.2-0.4b.fc8
nss_ldap-1-0.2b.fc9.tar.bz2
nss_ldap-1-0.6rc2.fc8.tar.gz
nss_ldap-1.0-0.1a.tar.gz
nss_ldap-10beta1.fc8.tar.gz
nss_ldap-10.11.8.6.20040204cvs.fc10.ebuild
string start 5.0.0 end of str
string start 5.1.0 end of str
string start 5.2.0 end of str
string start 5.3.0 end of str
string start 5.4.0 end of str
string start 5.5.0 end of str
string start 5.6.0 end of str
string start 5.7.0 end of str
string start 5.8.0 end of str
string start 5.9.0 end of str
string start 5.10.0 end of str
string start 5.20.0 end of str
string start 5.30.0 end of str
string start 5.40.0 end of str
string start 5.50.0 end of str
string start 5.60.0 end of str
string start 5.70.0 end of str
string start 5.80.0 end of str
string start 5.90.0 end of str
_EOF_

sort --sort=version -o out in || fail=1
compare exp out || fail=1
Exit $fail
#!/bin/sh
# ensure that stat attempts birthtime access

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ stat

# Whether birthtime is supported or not, it better not change even when
# [acm]time are modified.  :)
touch a || fail=1
btime=$(stat --format %W a) || fail=1
atime=$(stat --format %X a) || fail=1
mtime=$(stat --format %Y a) || fail=1
ctime=$(stat --format %Z a) || fail=1

# Wait up to 2.17s for timestamps to change.
# ----------------------------------------
# iterations   file system resolution  e.g.
# ----------------------------------------
# 1            nano or micro second    ext4
# 4            1 second                ext3
# 5            2 second                FAT
# ----------------------------------------
check_timestamps_updated()
{
  local delay="$1"
  sleep $delay
  touch a || fail=1

  test "x$btime" = x$(stat --format %W a) &&
  test "x$atime" != x$(stat --format %X a) &&
  test "x$mtime" != x$(stat --format %Y a) &&
  test "x$ctime" != x$(stat --format %Z a)
}
retry_delay_ check_timestamps_updated .07 5 || fail=1

Exit $fail
#!/bin/sh
# ensure that stat properly handles a format string ending with %

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ stat



for i in $(seq 50); do
  fmt=$(printf "%${i}s" %)
  out=$(stat --form="$fmt" .)
  test "$out" = "$fmt" || fail=1
done

Exit $fail
#!/bin/sh
# demonstrate that stat - works and stat -f - does not.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ stat

printf -- '-\n' > exp || framework_failure_
touch f || framework_failure_

stat --format=%n - < f > out || fail=1
returns_ 1 stat -f - < f || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test stat -c%m

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ stat

stat_mnt=$(stat -c%m .) || fail=1
case "$stat_mnt" in
  /*) ;;
  *) fail=1;;
esac

Exit $fail
#!/bin/sh
# Exercise format strings involving %:X, %:Y, etc.

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

print_ver_ stat
. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src

# Set this to avoid problems with weird time zones.
TZ=UTC0
export TZ

# Use a time stamp near the Epoch to avoid trouble with leap seconds.
touch -d '1970-01-01 18:43:33.023456789' k || framework_failure_

ls --full-time | grep 18:43:33.023456789 \
  || skip_ this file system does not support sub-second time stamps

test "$(stat -c       %X k)" =    67413               || fail=1
test "$(stat -c      %.X k)" =    67413.023456789     || fail=1
test "$(stat -c     %.1X k)" =    67413.0             || fail=1
test "$(stat -c     %.3X k)" =    67413.023           || fail=1
test "$(stat -c     %.6X k)" =    67413.023456        || fail=1
test "$(stat -c     %.9X k)" =    67413.023456789     || fail=1
test "$(stat -c   %13.6X k)" =  ' 67413.023456'       || fail=1
test "$(stat -c  %013.6X k)" =   067413.023456        || fail=1
test "$(stat -c  %-13.6X k)" =   '67413.023456 '      || fail=1
test "$(stat -c  %18.10X k)" = '  67413.0234567890'   || fail=1
test "$(stat -c %I18.10X k)" = '  67413.0234567890'   || fail=1
test "$(stat -c %018.10X k)" =  0067413.0234567890    || fail=1
test "$(stat -c %-18.10X k)" =   '67413.0234567890  ' || fail=1

Exit $fail
#!/bin/sh
# demonstrate that stat handles trailing slashes correctly

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ stat

touch file || framework_failure_
mkdir dir || framework_failure_
ln -s file link1 || framework_failure_
ln -s dir link2 || framework_failure_

cat <<EOF > exp || framework_failure_
link1
symbolic link
directory
directory
EOF

# This failed on Solaris 9 for coreutils 8.0.
stat --format=%n link1 > out || fail=1
returns_ 1 stat --format=%n link1/ >> out || fail=1

stat --format=%F link2 >> out || fail=1
stat -L --format=%F link2 >> out || fail=1
stat --format=%F link2/ >> out || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Exercise stdbuf functionality

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ stdbuf

getlimits_

# stdbuf fails when the absolute top build dir name contains e.g.,
# space, TAB, NL
lf='
'
case $abs_top_builddir in
  *[\\\"\#\$\&\'\`$lf\ \	]*)
    skip_ "unsafe absolute build directory name: $abs_top_builddir";;
esac

# Use a fifo rather than a pipe in the tests below
# so that the producer (uniq) will wait until the
# consumer (dd) opens the fifo therefore increasing
# the chance that dd will read the data from each
# write separately.
mkfifo_or_skip_ fifo


# Verify input parameter checking
stdbuf -o1 true || fail=1 # verify size syntax
stdbuf -oK true || fail=1 # verify size syntax
stdbuf -o0 true || fail=1 # verify unbuffered syntax
stdbuf -oL true || fail=1 # verify line buffered syntax
stdbuf -ol true # Capital 'L' required
test $? = 125 || fail=1 # Internal error is a particular status
stdbuf -o$SIZE_OFLOW true # size too large
test $? = 125 || fail=1
stdbuf -iL true # line buffering stdin disallowed
test $? = 125 || fail=1
stdbuf true # a buffering mode must be specified
test $? = 125 || fail=1
stdbuf -i0 -o0 -e0 true || fail=1 #check all files
stdbuf -o1 . # invalid command
test $? = 126 || fail=1
stdbuf -o1 no_such # no such command
test $? = 127 || fail=1

# Terminate any background processes
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Ensure line buffering stdout takes effect
stdbuf_linebuffer()
{
  local delay="$1"

  printf '1\n' > exp
  > out || framework_failure_
  dd count=1 if=fifo > out 2> err & pid=$!
  (printf '1\n'; sleep $delay; printf '2\n') | stdbuf -oL uniq > fifo
  wait $pid
  compare exp out
}

retry_delay_ stdbuf_linebuffer .1 6 || fail=1

stdbuf_unbuffer()
{
  local delay="$1"

  # Ensure un buffering stdout takes effect
  printf '1\n' > exp
  > out || framework_failure_
  dd count=1 if=fifo > out 2> err & pid=$!
  (printf '1\n'; sleep $delay; printf '2\n') | stdbuf -o0 uniq > fifo
  wait $pid
  compare exp out
}

retry_delay_ stdbuf_unbuffer .1 6 || fail=1

# Ensure un buffering stdin takes effect
#  The following works for me, but is racy.  I.e., we're depending
#  on dd to run and close the fifo before the second write by uniq.
#  If we add a sleep, then we're just testing -oL
    # printf '3\n' > exp
    # dd count=1 if=fifo > /dev/null 2> err &
    # printf '1\n\2\n3\n' | (stdbuf -i0 -oL uniq > fifo; cat) > out
    # wait # for dd to complete
    # compare exp out || fail=1
#  One could remove the need for dd (used to close the fifo to get uniq to quit
#  early), if head -n1 read stdin char by char. Note uniq | head -c2 doesn't
#  suffice due to the buffering implicit in the pipe.  sed currently does read
#  stdin char by char, so we can test with 'sed 1q'.  However I'm wary about
#  adding this dependency on a program outside of coreutils.
    # printf '2\n' > exp
    # printf '1\n2\n' | (stdbuf -i0 sed 1q >/dev/null; cat) > out
    # compare exp out || fail=1

# Ensure block buffering stdout takes effect
# We don't currently test block buffering failures as
# this doesn't work on GLIBC-2.7 or GLIBC-2.9 at least.
   # stdbuf_blockbuffer()
   # {
   #   local delay="$1"
   #
   #   printf '1\n2\n' > exp
   #   dd count=1 if=fifo > out 2> err &
   #   (printf '1\n'; sleep $delay; printf '2\n') | stdbuf -o4 uniq > fifo
   #   wait # for dd to complete
   #   compare exp out
   # }
   #
   # retry_delay_ stdbuf_blockbuffer .1 6 || fail=1

Exit $fail
#!/bin/sh
# Ensure that stty diagnoses invalid inputs, rather than silently misbehaving.

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ stty
require_controlling_input_terminal_
require_trap_signame_

trap '' TTOU # Ignore SIGTTOU


saved_state=$(stty -g) || fail=1
stty $saved_state || fail=1

# Before coreutils-6.9.90, if stty were given an argument with 35 colons
# separating 36 hexadecimal strings, stty would fail to diagnose as invalid
# any number that was out of range as long as sscanf happened to
# overflow/wrap it back into the range of the corresponding type (either
# tcflag_t or cc_t).

# For each of the following, with coreutils-6.9 and earlier,
# stty would fail to diagnose the error on at least Solaris 10.
hex_2_64=10000000000000000
returns_ 1 stty $(echo $saved_state |sed 's/^[^:]*:/'$hex_2_64:/) \
  2>/dev/null || fail=1
returns_ 1 stty $(echo $saved_state |sed 's/:[0-9a-f]*$/:'$hex_2_64/) \
  2>/dev/null || fail=1

# Just in case either of the above mistakenly succeeds (and changes
# the state of our tty), try to restore the initial state.
stty $saved_state || fail=1

Exit $fail
#!/bin/sh
# Make sure stty can parse most of its options - in pairs [expensive].

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ stty

expensive_

# Make sure there's a tty on stdin.
require_controlling_input_terminal_
require_trap_signame_

trap '' TTOU # Ignore SIGTTOU

# Get the reversible settings from stty.c.
stty_reversible_init_

saved_state=.saved-state
stty --save > $saved_state || fail=1
stty $(cat $saved_state) || fail=1

# Build a list of all boolean options stty accepts on this system.
# Don't depend on terminal width.  Put each option on its own line,
# remove all non-boolean ones, remove 'parenb' and 'cread' explicitly,
# then remove any leading hyphens.
sed_del='/^speed/d;/^rows/d;/^columns/d;/ = /d;s/parenb//;s/cread//'
options=$(stty -a | tr -s ';' '\n' | sed "s/^ //;$sed_del;s/-//g")

# Take them in pairs, with and without the leading '-'.
for opt1 in $options; do
  for opt2 in $options; do

    stty $opt1 $opt2 || fail=1

    if stty_reversible_query_ "$opt1" ; then
      stty -$opt1 $opt2 || fail=1
    fi
    if stty_reversible_query_ "$opt2" ; then
      stty $opt1 -$opt2 || fail=1
    fi
    if stty_reversible_query_ "$opt1" \
        && stty_reversible_query_ "$opt2" ; then
      stty -$opt1 -$opt2 || fail=1
    fi
  done
done

stty $(cat $saved_state)

Exit $fail
#!/bin/sh
# Test "stty" with rows and columns.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Setting this envvar to a very small value used to cause e.g., 'stty size'
# to generate slightly different output on certain systems.
COLUMNS=80
export COLUMNS

# Make sure we get English-language behavior.
# See the report about a possibly-related Solaris problem by Alexandre Peshansky
# <http://lists.gnu.org/archive/html/bug-coreutils/2004-10/msg00035.html>.
# Currently stty isn't localized, but it might be in the future.
LC_ALL=C
export LC_ALL

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ stty

require_controlling_input_terminal_
require_trap_signame_

trap '' TTOU # Ignore SIGTTOU

# Versions of GNU stty from shellutils-1.9.2c and earlier failed
# tests #2 and #4 when run on SunOS 4.1.3.

tests='
1 rows_40_columns_80 40_80
2 rows_1_columns_1 1_1
3 rows_40_columns_80 40_80
4 rows_1 1_80
5 columns_1 1_1
6 rows_40 40_1
7 rows_1 1_1
8 columns_80 1_80
9 rows_30 30_80
10 rows_0x1E 30_80
11 rows_036 30_80
NA LAST NA
'
set $tests

saved_size=$(stty size) && test -n "$saved_size" \
  || skip_ "can't get window size"

# Linux virtual consoles issue an error if you
# try to increase their size.  So skip in that case.
if test "x$saved_size" != "x0 0"; then
  srow=$(echo $saved_size | cut -d ' ' -f1)
  scol=$(echo $saved_size | cut -d ' ' -f2)
  stty rows $(expr $srow + 1) cols $(expr $scol + 1) ||
    skip_ "can't increase window size"
fi

while :; do
  test_name=$1
  args=$2
  expected_result="$(echo $3|tr _ ' ')"
  test "$args" = empty && args=''
  test "x$args" = xLAST && break
  args=$(echo x$args|tr _ ' '|sed 's/^x//')
  if test "$VERBOSE" = yes; then
    # echo "testing \$(stty $args; stty size\) = $expected_result ..."
    echo "test $test_name... " | tr -d '\n'
  fi
  stty $args || exit 1
  test x"$(stty size 2> /dev/null)" = "x$expected_result" \
    && ok=ok || ok=FAIL fail=1
  test "$VERBOSE" = yes && echo $ok
  shift; shift; shift
done

set x $saved_size
stty rows $2 columns $3 || exit 1

Exit $fail
#!/bin/sh
# Make sure stty can parse most of its options.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Make sure there's a tty on stdin.
. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ stty

require_controlling_input_terminal_
require_trap_signame_

trap '' TTOU # Ignore SIGTTOU

# Get the reversible settings from stty.c.
stty_reversible_init_

saved_state=.saved-state
stty --save > $saved_state || fail=1
stty $(cat $saved_state) || fail=1

# This would segfault prior to sh-utils-2.0j.
stty erase - || fail=1

# Ensure "immediate" and "wait" mode supported, with and without settings
for mode in '-drain' 'drain'; do
  for opt in 'echo' ''; do
    stty "$mode" $opt || fail=1
  done
done

# These would improperly ignore invalid options through coreutils 5.2.1.
returns_ 1 stty -F 2>/dev/null || fail=1
returns_ 1 stty -raw -F no/such/file 2>/dev/null || fail=1
returns_ 1 stty -raw -a 2>/dev/null || fail=1

# Build a list of all boolean options stty accepts on this system.
# Don't depend on terminal width.  Put each option on its own line,
# remove all non-boolean ones, then remove any leading hyphens.
sed_del='/^speed/d;/^rows/d;/^columns/d;/ = /d'
options=$(stty -a | tr -s ';' '\n' | sed "s/^ //;$sed_del;s/-//g")

# Take them one at a time, with and without the leading '-'.
for opt in $options; do
  # 'stty parenb' and 'stty -parenb' fail with this message
  # stty: standard input: unable to perform all requested operations
  # on Linux 2.2.0-pre4 kernels.  Also since around Linux 2.6.30
  # other serial control settings give the same error. So skip them.
  # Also on ppc*|sparc* glibc platforms 'icanon' gives the same error.
  # See: http://debbugs.gnu.org/7228#14
  case $opt in
    parenb|parodd|cmspar) continue;;
    cstopb|crtscts|cdtrdsr|icanon) continue;;
  esac

  # This is listed as supported on FreeBSD
  # but the ioctl returns ENOTTY.
  test $opt = extproc && continue

  stty $opt || fail=1

  # Likewise, 'stty -cread' would fail, so skip that, too.
  test $opt = cread && continue
  if stty_reversible_query_ "$opt" ; then
    stty -$opt || { fail=1; echo -$opt; }
  fi
done

stty $(cat $saved_state)

Exit $fail
#!/bin/sh
# make sure 'sum -s' works for input whose sum of bytes is larger than 2^32

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Avoid a problem when run in a UTF-8 locale.
# Otherwise, Perl would try to (and fail to) interpret
# each string below as a sequence of multi-byte characters.
LC_ALL=C
export LC_ALL

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sum

require_perl_

# FYI, 16843009 is floor (2^32 / 255).

# aka: perl -e 'print chr(255) x 16843009'
$PERL -e '$s = chr(255) x 65537; foreach (1..257) {print $s}' \
  | sum -s > out || fail=1
cat > exp <<\EOF
65535 32897
EOF
compare exp out || fail=1

rm -f out exp

# aka: perl -e 'print chr(255) x 16843010'
$PERL -e '$s = chr(255) x 65537; foreach (1..257) {print $s}; print chr(255)' \
  | sum -s > out || fail=1
cat > exp <<\EOF
254 32897
EOF
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test various sync(1) operations

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ sync

touch file

# fdatasync+syncfs is nonsensical
returns_ 1 sync --data --file-system || fail=1

# fdatasync needs an operand
returns_ 1 sync -d || fail=1

# Test syncing of file (fsync) (little side effects)
sync file || fail=1

# Ensure multiple args are processed and diagnosed
returns_ 1 sync file nofile || fail=1

# Ensure inaccessible dirs give an appropriate error
mkdir norw || framework_failure_
chmod 0 norw || framework_failure_
if ! test -r norw; then
  sync norw 2>err
  printf "sync: error opening 'norw': Permission denied\n" >exp
  compare exp err || fail=1
fi

if test "$fail" != '1'; then
  # Ensure a fifo doesn't block
  mkfifo_or_skip_ fifo
  timeout 10 sync fifo
  test $? = 124 && fail=1
fi

Exit $fail
#!/bin/sh
# ensure that tac works with non-seekable or quasi-seekable inputs

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tac

echo x | tac - - > out 2> err || fail=1
echo x > exp || fail=1
compare exp out || fail=1
compare /dev/null err || fail=1

# Make sure it works on funny files in /proc and /sys.

for file in /proc/version /sys/kernel/profiling; do
  if test -r $file; then
    cp -f $file copy &&
    tac copy > exp1 || framework_failure_

    tac $file > out1 || fail=1
    compare exp1 out1 || fail=1
  fi
done

Exit $fail
#!/bin/sh
# Ensure that tac processes all command line arguments, even
# when it encounters an error with say the first one.
# With coreutils-5.2.1 and earlier, this test would fail.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tac

# See if the envvar is defined.
if test x = "x$FULL_PARTITION_TMPDIR"; then
  skip_ "FULL_PARTITION_TMPDIR not defined"
fi

if ! test -d "$FULL_PARTITION_TMPDIR"; then
  echo "$0: $FULL_PARTITION_TMPDIR:" \
    "\$FULL_PARTITION_TMPDIR does not specify a directory" 1>&2
  Exit 1
fi

fp_tmp="$FULL_PARTITION_TMPDIR/tac-cont-$$"
cleanup_()
{
  # Terminate any background process
  # and remove tmp dir
  rm -f "$fp_tmp"
  kill $pid 2>/dev/null && wait $pid
}

# Make sure we can create an empty file there (i.e., no shortage of inodes).
if ! touch $fp_tmp; then
  echo "$0: $fp_tmp: cannot create empty file" 1>&2
  Exit 1
fi

# Make sure that we fail when trying to create a file large enough
# to consume a non-inode block.
if seq 1000 > $fp_tmp 2>/dev/null; then
  echo "$0: $FULL_PARTITION_TMPDIR: not a full partition" 1>&2
  Exit 1
fi

seq 5 > in


# Give tac a fifo command line argument.
# This makes it try to create a temporary file in $TMPDIR.
mkfifo_or_skip_ fifo
seq 1000 > fifo & pid=$!
TMPDIR=$FULL_PARTITION_TMPDIR tac fifo in >out 2>err && fail=1

cat <<\EOF > exp || fail=1
5
4
3
2
1
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# test for basic tee functionality.

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tee

echo line >sample || framework_failure_

# POSIX says: "Processing of at least 13 file operands shall be supported."
for n in 0 1 2 12 13; do
  files=$(seq $n)
  rm -f $files
  tee $files <sample >out || fail=1
  for f in out $files; do
    compare sample $f || fail=1
  done
done

# Ensure tee treats '-' as the name of a file, as mandated by POSIX.
# Between v5.3.0 and v8.23, a '-' argument caused tee to send another
# copy of input to standard output.
tee - <sample >out 2>err || fail=1
compare sample ./- || fail=1
compare sample out || fail=1
compare /dev/null err || fail

# Ensure tee exits early if no more writable outputs
if test -w /dev/full && test -c /dev/full; then
  yes | returns_ 1 timeout 10 tee /dev/full 2>err >/dev/full || fail=1
  # Ensure an error for each of the 2 outputs
  # (and no redundant errors for stdout).
  test $(wc -l < err) = 2 || { cat err; fail=1; }


  # Ensure we continue with outputs that are OK
  seq 10000 > multi_read || framework_failure_

  returns_ 1 tee /dev/full out2 2>err >out1 <multi_read || fail=1
  cmp multi_read out1 || fail=1
  cmp multi_read out2 || fail=1
  # Ensure an error for failing output
  test $(wc -l < err) = 1 || { cat err; fail=1; }

  returns_ 1 tee out1 out2 2>err >/dev/full <multi_read || fail=1
  cmp multi_read out1 || fail=1
  cmp multi_read out2 || fail=1
  # Ensure an error for failing output
  test $(wc -l < err) = 1 || { cat err; fail=1; }
fi


# Ensure tee honors --output-error modes
mkfifo_or_skip_ fifo
read_fifo() { timeout 10 dd count=1 if=fifo of=/dev/null status=none & }

# Determine platform sigpipe exit status
read_fifo
yes >fifo
pipe_status=$?

# Default operation is to continue on output errors but exit silently on SIGPIPE
read_fifo
yes | returns_ $pipe_status timeout 10 tee ./e/noent 2>err >fifo || fail=1
test $(wc -l < err) = 1 || { cat err; fail=1; }

# With -p, SIGPIPE is suppressed, exit 0 for EPIPE when all outputs finished
read_fifo
yes | timeout 10 tee -p 2>err >fifo || fail=1
test $(wc -l < err) = 0 || { cat err; fail=1; }

# With --output-error=warn, exit 1 for EPIPE when all outputs finished
read_fifo
yes | returns_ 1 timeout 10 tee --output-error=warn 2>err >fifo || fail=1
test $(wc -l < err) = 1 || { cat err; fail=1; }

# With --output-error=exit, exit 1 immediately for EPIPE
read_fifo
yes | returns_ 1 timeout 10 tee --output-error=exit /dev/null 2>err >fifo \
  || fail=1
test $(wc -l < err) = 1 || { cat err; fail=1; }

# With --output-error=exit, exit 1 immediately on output error
read_fifo
yes | returns_ 1 timeout 10 tee --output-error=exit ./e/noent 2>err >fifo \
  || fail=1
test $(wc -l < err) = 1 || { cat err; fail=1; }

# With --output-error=exit-nopipe, exit 0 for EPIPE
read_fifo
yes | timeout 10 tee --output-error=exit-nopipe 2>err >fifo || fail=1
test $(wc -l < err) = 0 || { cat err; fail=1; }

wait
Exit $fail
#!/bin/sh
# test program group handling

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ timeout
require_trap_signame_
require_kill_group_

# construct a program group hierarchy as follows:
#  timeout-group - foreground group
#    group.sh - separate group
#      timeout.cmd - same group as group.sh
#
# We then send a SIGINT to the "separate group"
# to simulate what happens when a Ctrl-C
# is sent to the foreground group.

setsid true || skip_ "setsid required to control groups"

printf '%s\n' '#!'"$SHELL" > timeout.cmd || framework_failure_
cat >> timeout.cmd <<\EOF
trap 'touch int.received; exit' INT
touch timeout.running
count=$1
until test -e int.received || test $count = 0; do
  sleep 1
  count=$(expr $count - 1)
done
EOF
chmod a+x timeout.cmd

cat > group.sh <<EOF
#!$SHELL
trap '' INT
timeout --foreground 25 ./timeout.cmd 20&
wait
EOF
chmod a+x group.sh

check_timeout_cmd_running()
{
  local delay="$1"
  test -e timeout.running ||
    { sleep $delay; return 1; }
}

# Terminate any background processes
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Start above script in its own group.
# We could use timeout for this, but that assumes an implementation.
setsid ./group.sh & pid=$!
# Wait 6.3s for timeout.cmd to start
retry_delay_ check_timeout_cmd_running .1 6 || fail=1
# Simulate a Ctrl-C to the group to test timely exit
kill -INT -- -$pid
wait
test -e int.received || fail=1

rm -f int.received timeout.running


# Ensure cascaded timeouts work
# or more generally, ensure we timeout
# commands that create their own group
# This didn't work before 8.13.

start=$(date +%s)

# Note the first timeout must send a signal that
# the second is handling for it to be propagated to the command.
# SIGINT, SIGTERM, SIGALRM etc. are implicit.
timeout -sALRM 30 timeout -sINT 25 ./timeout.cmd 20 & pid=$!
# Wait 6.3s for timeout.cmd to start
retry_delay_ check_timeout_cmd_running .1 6 || fail=1
kill -ALRM $pid # trigger the alarm of the first timeout command
wait $pid
ret=$?
test $ret -eq 124 ||
  skip_ "timeout returned $ret. SIGALRM not handled?"
test -e int.received || fail=1

end=$(date +%s)

test $(expr $end - $start) -lt 20 ||
  skip_ "timeout.cmd didn't receive a signal until after sleep?"

Exit $fail
#!/bin/sh
# Validate timeout parameter combinations

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ timeout
getlimits_


# internal errors are 125, distinct from execution failure

# invalid timeout
timeout invalid sleep 0
test $? = 125 || fail=1

# invalid kill delay
timeout --kill-after=invalid 1 sleep 0
test $? = 125 || fail=1

# invalid timeout suffix
timeout 42D sleep 0
test $? = 125 || fail=1

# It was seen on 32 bit Linux/HPPA that a kernel time_t overflowed,
# thus causing the timer to fire immediately.
# So verify that doesn't happen before checking large timeouts
KERNEL_OVERFLOW_LIMIT=$(expr $TIME_T_MAX - $(date +%s) + 100)
timeout $KERNEL_OVERFLOW_LIMIT sleep 0
if test $? != 124; then
  # timeout overflow
  timeout $UINT_OFLOW sleep 0
  test $? = 0 || fail=1

  # timeout overflow
  timeout $(expr $UINT_MAX / 86400 + 1)d sleep 0
  test $? = 0 || fail=1

  # timeout overflow
  timeout 999999999999999999999999999999999999999999999999999999999999d sleep 0
  test $? = 0 || fail=1

  # floating point notation
  timeout 2.34e+5d sleep 0
  test $? = 0 || fail=1
fi

# floating point notation
timeout 2.34 sleep 0
test $? = 0 || fail=1

# nanoseconds potentially supported
timeout .999999999 sleep 0 || fail=1

# invalid signal spec
timeout --signal=invalid 1 sleep 0
test $? = 125 || fail=1

# invalid command
timeout 10 .
test $? = 126 || fail=1

# no such command
timeout 10 no_such
test $? = 127 || fail=1

Exit $fail
#!/bin/sh
# Validate timeout basic operation

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ timeout
require_trap_signame_

# no timeout
timeout 10 true || fail=1

# no timeout (suffix check)
timeout 1d true || fail=1

# disabled timeout
timeout 0 true || fail=1

# exit status propagation
timeout 10 sh -c 'exit 2'
test $? = 2 || fail=1

# timeout
timeout .1 sleep 10
test $? = 124 || fail=1

# exit status propagation even on timeout
timeout --preserve-status .1 sleep 10
# exit status should be 128+TERM
test $? = 124 && fail=1

# kill delay. Note once the initial timeout triggers,
# the exit status will be 124 even if the command
# exits on its own accord.
timeout -s0 -k1 .1 sleep 10
test $? = 124 && fail=1

# Ensure 'timeout' is immune to parent's SIGCHLD handler
# Use a subshell and an exec to work around a bug in FreeBSD 5.0 /bin/sh.
(
  trap '' CHLD

  exec timeout 10 true
) || fail=1

# Don't be confused when starting off with a child (Bug#9098).
out=$(sleep .1 & exec timeout .5 sh -c 'sleep 2; echo foo')
status=$?
test "$out" = "" && test $status = 124 || fail=1

Exit $fail
#!/bin/sh
# Test case conversion classes

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tr

# Ensure we support translation of case classes with extension
echo '01234567899999999999999999' > exp
echo 'abcdefghijklmnopqrstuvwxyz' |
tr '[:lower:]' '0-9' > out || fail=1
compare exp out || fail=1
echo 'abcdefghijklmnopqrstuvwxyz' |
tr '[:lower:][:lower:]' '[:upper:]0-9' > out || fail=1
compare exp out || fail=1

# Validate the alignment of case classes
returns_ 1 tr 'A-Z[:lower:]' 'a-y[:upper:]' </dev/null || fail=1
returns_ 1 tr '[:upper:][:lower:]' 'a-y[:upper:]' </dev/null || fail=1
returns_ 1 tr 'A-Y[:lower:]' 'a-z[:upper:]' </dev/null || fail=1
returns_ 1 tr 'A-Z[:lower:]' '[:lower:][:upper:]' </dev/null || fail=1
returns_ 1 tr 'A-Z[:lower:]' '[:lower:]A-Z' </dev/null || fail=1
tr '[:upper:][:lower:]' 'a-z[:upper:]' < /dev/null || fail=1
tr '[:upper:][:lower:]' '[:upper:]a-z' < /dev/null || fail=1

# Before coreutils 8.6 the trailing space in string1
# caused the case class in string2 to be extended.
# However that was not portable, dependent on locale
# and in contravention of POSIX.
tr '[:upper:] ' '[:lower:]' < /dev/null 2>out && fail=1
echo 'tr: when translating with string1 longer than string2,
the latter string must not end with a character class' > exp
compare exp out || fail=1

# Up to coreutils-6.9, tr rejected an unmatched [:lower:] or [:upper:] in SET1.
echo '#$%123abcABC' | tr '[:lower:]' '[.*]' > out || fail=1
echo '#$%123...ABC' > exp
compare exp out || fail=1
echo '#$%123abcABC' | tr '[:upper:]' '[.*]' > out || fail=1
echo '#$%123abc...' > exp
compare exp out || fail=1

# When doing a case-converting translation with something after the
# [:upper:] and [:lower:] elements, ensure that tr honors the following byte.
echo 'abc.' | tr '[:lower:].' '[:upper:]x' > out || fail=1
echo 'ABCx' > exp
compare exp out || fail=1

# Before coreutils 8.6 the disparate number of upper and lower
# characters in some locales, triggered abort()s and invalid behavior
export LC_ALL=en_US.ISO-8859-1

if test "$(locale charmap 2>/dev/null)" = ISO-8859-1; then
  # Up to coreutils-6.9.91, this would fail with the diagnostic:
  # tr: misaligned [:upper:] and/or [:lower:] construct
  # with LC_CTYPE=en_US.ISO-8859-1.
  tr '[:upper:]' '[:lower:]' < /dev/null || fail=1

  tr '[:upper:] ' '[:lower:]' < /dev/null 2>out && fail=1
  echo 'tr: when translating with string1 longer than string2,
the latter string must not end with a character class' > exp
  compare exp out || fail=1

  # Ensure when there are a different number of elements
  # in each string, we validate the case mapping correctly
  echo 'abc.xyz' |
  tr 'ab[:lower:]' '0-1[:upper:]' > out || fail=1
  echo 'ABC.XYZ' > exp
  compare exp out || fail=1

  # Ensure we extend string2 appropriately
  echo 'ABC- XYZ' |
  tr '[:upper:]- ' '[:lower:]_' > out || fail=1
  echo 'abc__xyz' > exp
  compare exp out || fail=1

  # Ensure the size of the case classes are accounted
  # for as a unit.
  echo 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' |
  tr '[:upper:]A-B' '[:lower:]0' >out || fail=1
  echo '00cdefghijklmnopqrstuvwxyz' > exp
  compare exp out || fail=1

  # Ensure the size of the case classes are accounted
  # for as a unit.
  echo 'a' |
  tr -t '[:lower:]a' '[:upper:]0' >out || fail=1
  echo '0' > exp
  compare exp out || fail=1

  # Ensure the size of the case classes are accounted
  # for as a unit.
  echo 'a' |
  tr -t '[:lower:][:lower:]a' '[:lower:][:upper:]0' >out || fail=1
  echo '0' > exp
  compare exp out || fail=1
fi

Exit $fail
#!/bin/sh
# Make sure truncate can create a file through a dangling symlink.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ truncate

ln -s truncate-target t-symlink

truncate -s0 t-symlink || fail=1

test -f truncate-target || fail=1

Exit $fail
#!/bin/sh
# Make sure truncate fails for a directory.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ truncate

# truncate on dir not allowed
returns_ 1 truncate -s+0 . || fail=1

Exit $fail
#!/bin/sh
# make sure truncate gives reasonable diagnostics
# Note open() checks for trailing '/' before checking for existence
# open (".", O_CREAT & (O_WRONLY | O_RDWR), ...) -> EISDIR
# open ("missing/", O_CREAT & (O_WRONLY | O_RDWR), ...) -> EISDIR
# open ("missing/file", O_CREAT & (O_WRONLY | O_RDWR), ...) -> ENOENT

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ truncate
skip_if_root_


d1=no

dir=$d1/such-dir
truncate -s0 $dir > out 2>&1 && fail=1
cat <<EOF > exp
truncate: cannot open '$dir' for writing: No such file or directory
EOF
compare exp out || fail=1

dir=$d1/
truncate -s0 $dir > out 2>&1 && fail=1
#The following can be returned at least
#truncate: cannot open '$dir' for writing: Not a directory
#truncate: cannot open '$dir' for writing: Is a directory

Exit $fail
#!/bin/sh
# Make sure truncate works on fifos without hanging

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ truncate

mkfifo_or_skip_ fifo

timeout 10 truncate -s0 fifo
test "$?" = 124 && fail=1

Exit $fail
#!/bin/sh
# Ensure that truncate -c no-such-file doesn't fail.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ truncate


# truncate -c no-such-file should not fail.
truncate -s0 -c no-such-file || fail=1

Exit $fail
#!/bin/sh
# Validate truncate integer overflow

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ truncate
getlimits_


# -= overflow
truncate -s-1 create-zero-len-file || fail=1

echo > non-empty-file

# signed overflow
returns_ 1 truncate -s$OFF_T_OFLOW file || fail=1

# += signed overflow
returns_ 1 truncate -s+$OFF_T_MAX non-empty-file || fail=1

# *= signed overflow
IO_BLOCK_OFLOW=$(expr $OFF_T_MAX / $(stat -f -c%s .) + 1)
returns_ 1 truncate --io-blocks --size=$IO_BLOCK_OFLOW file || fail=1

Exit $fail
#!/bin/sh
# Demonstrate that "truncate -s0 writable-but-owned-by-other" works.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ truncate

require_root_

# Create a file owned by root, and writable by $NON_ROOT_USERNAME.
echo > root-owned || framework_failure_
chgrp +$NON_ROOT_GID . root-owned || framework_failure_
chmod g+w root-owned

# Ensure that the current directory is searchable by $NON_ROOT_USERNAME.
chmod g+x .

chroot --skip-chdir --user=$NON_ROOT_USERNAME / env PATH="$PATH" \
  truncate -s0 root-owned || fail=1

Exit $fail
#!/bin/sh
# Validate truncate parameter combinations

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ truncate


# must specify at least 1 file
returns_ 1 truncate --size=0 || fail=1

# must specify size. don't default to 0
returns_ 1 truncate file || fail=1

# mixture of absolute size & reference not allowed
returns_ 1 truncate --size=0 --reference=file file || fail=1

# blocks without size is not valid
returns_ 1 truncate --io-blocks --reference=file file || fail=1

# must specify valid numbers
returns_ 1 truncate --size="invalid" file || fail=1

# spaces not significant around size
returns_ 1 truncate --size="> -1" file || fail=1
truncate --size=" >1" file || fail=1 #file now 1
truncate --size=" +1" file || fail=1 #file now 2
test $(stat --format %s file) = 2 || fail=1

# reference allowed with relative size
truncate --size=" +1" -r file file || fail=1 #file now 3
test $(stat --format %s file) = 3 || fail=1

# reference allowed alone also
truncate -r file file || fail=1 #file still 3
test $(stat --format %s file) = 3 || fail=1
truncate -r file file2 || fail=1 #file2 now 3
test $(stat --format %s file2) = 3 || fail=1

Exit $fail
#!/bin/sh
# Validate truncate relative sizes

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ truncate


# mixture of relative modifiers not allowed
returns_ 1 truncate --size="+>0" file || fail=1

# mixture of relative modifiers not allowed
returns_ 1 truncate --size=">+0" file || fail=1

# division by zero
returns_ 1 truncate --size="/0" file || fail=1

# division by zero
returns_ 1 truncate --size="%0" file || fail=1

Exit $fail
#!/bin/sh
# before coreutils-8.10, seq 100000|uniq -f 10000000000 would run for days

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ uniq

seq 100 > in || fail=1
timeout 10 uniq -f 10000000000 in || fail=1

Exit $fail
#!/bin/sh
# Show that wc's new --files0-from option works.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ wc

echo 2 > 2b || framework_failure_
echo 2 words > 2w || framework_failure_
printf '2b\n2w\n' |tr '\n' '\0' > names || framework_failure_


wc --files0-from=names > out || fail=1
cat <<\EOF > exp || fail=1
 1  1  2 2b
 1  2  8 2w
 2  3 10 total
EOF

compare exp out || fail=1

if ! test "$fail" = 1; then
  # Repeat the above test, but read the file name list from stdin.
  rm -f out
  wc --files0-from=- < names > out || fail=1
  compare exp out || fail=1
fi

# Ensure file name containing new lines are output on a single line
nlname='1
2'
touch "$nlname" || framework_failure_
printf '%s\0' "$nlname" | wc --files0-from=- > out || fail=1
printf '%s\n' "0 0 0 '1'$'\\n''2'" > exp || framework_failure_
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that wc prints counts atomically
# so that concurrent processes don't intersperse their output

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ wc

xargs -P2 </dev/null >/dev/null 2>&1 \
  || skip_ 'xargs -P is required'

(mkdir tmp && cd tmp && seq 2000 | xargs touch)

# This will output at least 16KiB per process
# and start 3 processes, with 2 running concurrently,
# which triggers often on Fedora 11 at least.
(find tmp tmp tmp -type f | xargs -n2000 -P2 wc 2>err) |
sed -n '/0 0 0 /!p' |
grep . > /dev/null && fail=1
compare /dev/null err || fail=1

Exit $fail
#!/bin/sh
# Test wc on /proc and /sys files.

# Copyright 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ wc

for file in /proc/version /sys/kernel/profiling; do
  if test -r $file; then
    cp -f $file copy &&
    wc -c < copy > exp1 || framework_failure_

    wc -c < $file > out1 || fail=1
    compare exp1 out1 || fail=1
  fi
done

Exit $fail
#!/bin/sh
# Ensure that cp --preserve=xattr, cp --preserve=all and mv preserve extended
# attributes and install does not preserve extended attributes.
# cp -a should preserve xattr, error diagnostics should not be displayed

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp mv ginstall

# Skip this test if cp was built without xattr support:
touch src dest || framework_failure_
cp --preserve=xattr -n src dest \
  || skip_ "coreutils built without xattr support"

# this code was taken from test mv/backup-is-src
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"
b_other="$other_partition_tmpdir/b"
rm -f "$b_other" || framework_failure_

# testing xattr name-value pair
xattr_name="user.foo"
xattr_value="bar"
xattr_pair="$xattr_name=\"$xattr_value\""

# create new file and check its xattrs
touch a || framework_failure_
getfattr -d a >out_a || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_a && framework_failure_

# try to set user xattr on file
setfattr -n "$xattr_name" -v "$xattr_value" a >out_a \
  || skip_ "failed to set xattr of file"
getfattr -d a >out_a || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_a \
  || skip_ "failed to set xattr of file"


# cp should not preserve xattr by default
cp a b || fail=1
getfattr -d b >out_b || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_b && fail=1

# test if --preserve=xattr option works
cp --preserve=xattr a b || fail=1
getfattr -d b >out_b || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_b || fail=1

# test if --preserve=all option works
cp --preserve=all a c || fail=1
getfattr -d c >out_c || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_c || fail=1

# cp's -a option must produce no diagnostics.
cp -a a d 2>err && { compare /dev/null err || fail=1; }
getfattr -d d >out_d || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_d || fail=1

# test if --preserve=xattr works even for files without write access
chmod a-w a || framework_failure_
rm -f e
cp --preserve=xattr a e || fail=1
getfattr -d e >out_e || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_e || fail=1

# Ensure that permission bits are preserved, too.
src_perm=$(stat --format=%a a)
dst_perm=$(stat --format=%a e)
test "$dst_perm" = "$src_perm" || fail=1

chmod u+w a || framework_failure_

rm b || framework_failure_

# install should never preserve xattr
ginstall a b || fail=1
getfattr -d b >out_b || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_b && fail=1

# mv should preserve xattr when renaming within a file system.
# This is implicitly done by rename () and doesn't need explicit
# xattr support in mv.
mv a b || fail=1
getfattr -d b >out_b || skip_ "failed to get xattr of file"
grep -F "$xattr_pair" out_b || cat >&2 <<EOF
=================================================================
$0: WARNING!!!
rename () does not preserve extended attributes
=================================================================
EOF

# try to set user xattr on file on other partition
test_mv=1
touch "$b_other" || framework_failure_
setfattr -n "$xattr_name" -v "$xattr_value" "$b_other" >out_a \
  || test_mv=0
getfattr -d "$b_other" >out_b || test_mv=0
grep -F "$xattr_pair" out_b || test_mv=0
rm -f "$b_other" || framework_failure_

if test $test_mv -eq 1; then
  # mv should preserve xattr when copying content from one partition to another
  mv b "$b_other" || fail=1
  getfattr -d "$b_other" >out_b ||
    skip_ "failed to get xattr of file"
  grep -F "$xattr_pair" out_b || fail=1
else
  cat >&2 <<EOF
=================================================================
$0: WARNING!!!
failed to set xattr of file $b_other
=================================================================
EOF
fi

Exit $fail
#!/bin/sh
# Validate yes buffer handling

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ yes

# Check various single item sizes, with the most important
# size being BUFSIZ used for the local buffer to yes(1).
# Note a \n is added, so actual sizes required internally
# are 1 more than the size used here.
for size in 1 1999 4095 4096 8191 8192 16383 16384; do
  printf "%${size}s\n" '' > out.1
  yes "$(printf %${size}s '')" | head -n2 | uniq > out.2
  compare out.1 out.2 || fail=1
done

# Check the many small items case,
# both fitting and overflowing the internal buffer
external=env
if external true $(seq 4000); then
  for i in 100 4000; do
    seq $i | paste -s -d ' ' | sed p > out.1
    yes $(seq $i) | head -n2 > out.2
    compare out.1 out.2 || fail=1
  done
fi

Exit $fail
#!/bin/sh
# Test "mkdir -p".

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir

mkdir --parents "$(pwd)/t" || fail=1
test -d t || fail=1

Exit $fail
#!/bin/sh
# Just like p-1, but with an absolute path.

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir

mkdir --parents "$(pwd)/t/u" || fail=1
test -d t/u || fail=1

Exit $fail
#!/bin/sh
# Ensure that mkdir-p.c's fail-to-return-to-initial-working-directory
# causes immediate failure.  Also, ensure that we don't create
# subsequent, relative command-line arguments in the wrong place.

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir
skip_if_root_

mkdir no-access || framework_failure_
mkdir no-acce2s || framework_failure_
mkdir -p no-acce3s/d || framework_failure_

p=$(pwd)
(cd no-access && chmod 0 . && mkdir -p "$p/a/b" u/v) 2> /dev/null
test $? -eq 1 || fail=1
test -d "$p/a/b" || fail=1

# Same as above, but with a following *absolute* name, it should succeed
(cd no-acce2s && chmod 0 . && mkdir -p "$p/b/b" "$p/z") || fail=1
test -d "$p/b/b" && test -d "$p/z" || fail=1

# Same as above, but a trailing relative name in an unreadable directory
# whose parent is inaccessible.  coreutils 5.97 fails this test.
# Perform this test only if "." is on a local file system.
# Otherwise, it would fail e.g., on an NFS-mounted file system.
if is_local_dir_ .; then
  (cd no-acce3s/d && chmod a-r . && chmod a-rx .. &&
      mkdir -p a/b "$p/b/c" d/e && test -d a/b && test -d d/e) || fail=1
  test -d "$p/b/c" || fail=1
fi

b=$(ls "$p/a" | tr -d '\n')
# With coreutils-5.3.0, this would fail with $b=bu.
test "x$b" = xb || fail=1

Exit $fail
#!/bin/sh
# Test "mkdir -p" with default ACLs.

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir

require_setfacl_

mkdir d || framework_failure_
setfacl -d -m group::rwx d || framework_failure_
umask 077

mkdir --parents d/e || fail=1
ls_l=$(ls -ld d/e) || fail=1
case $ls_l in
  d???rw[sx]*) ;;
  *) fail=1 ;;
esac

Exit $fail
#!/bin/sh
# Ensure that mkdir -p works with arguments specified with a trailing "/.".

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir


mkdir -p d1/. || fail=1
test -d d1 || fail=1

mkdir -p d2/.. || fail=1
test -d d2 || fail=1

Exit $fail
#!/bin/sh
# Ensure that mkdir -p foo/bar works when foo is a symbolic link to a directory

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir

ln -s . slink || framework_failure_

mkdir -p slink/x || fail=1
test -d x || fail=1

Exit $fail
#!/bin/sh
# Test mkdir -pv.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir

mkdir -pv foo/a/b/c/d >out || fail=1

compare - out <<\EOF
mkdir: created directory 'foo'
mkdir: created directory 'foo/a'
mkdir: created directory 'foo/a/b'
mkdir: created directory 'foo/a/b/c'
mkdir: created directory 'foo/a/b/c/d'
EOF

Exit $fail
#!/bin/sh
# make sure mkdir's -p options works properly

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir
skip_if_setgid_
require_no_default_acl_ .

mkdir -m 700 e-dir || framework_failure_


# Make sure 'mkdir -p existing-dir' succeeds
# and that 'mkdir existing-dir' fails.
mkdir -p e-dir || fail=1
returns_ 1 mkdir e-dir > /dev/null 2>&1 || fail=1

# Create an existing directory.
umask 077
mode_str=drwxr-x-wx
mode_arg=$(rwx_to_mode_ $mode_str)
mkdir -m $mode_arg a || fail=1

# this 'mkdir -p ...' shouldn't change perms of existing dir 'a'.
d_mode_str=drwx-w--wx
d_mode_arg=$(rwx_to_mode_ $d_mode_str)
mkdir -p -m $d_mode_arg a/b/c/d

# Make sure the permissions of 'a' haven't been changed.
p=$(ls -ld a|cut -b-10); case $p in $mode_str);; *) fail=1;; esac
# 'b's and 'c's should reflect the umask
p=$(ls -ld a/b|cut -b-10); case $p in drwx------);; *) fail=1;; esac
p=$(ls -ld a/b/c|cut -b-10); case $p in drwx------);; *) fail=1;; esac

# 'd's perms are determined by the -m argument.
p=$(ls -ld a/b/c/d|cut -b-10); case $p in $d_mode_str);; *) fail=1;; esac

Exit $fail
#!/bin/sh
# Verify that mkdir's '-m MODE' option works properly
# with various umask settings.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir
skip_if_setgid_
require_no_default_acl_ .

working_umask_or_skip_


#                         parent        parent/dir
# umask   -m option   resulting perm  resulting perm
tests='
    000  :   empty    : drwxrwxrwx : drwxrwxrwx :
    000  :   -m 016   : drwxrwxrwx : d-----xrw- :
    077  :   empty    : drwx------ : drwx------ :
    050  :   empty    : drwx-w-rwx : drwx-w-rwx :
    050  :   -m 312   : drwx-w-rwx : d-wx--x-w- :
    160  :   empty    : drwx--xrwx : drw---xrwx :
    160  :   -m 743   : drwx--xrwx : drwxr---wx :
    027  :   -m =+x   : drwxr-x--- : d--x--x--- :
    027  :   -m =+X   : drwxr-x--- : d--x--x--- :
    -    :   -        : last       : last       :
    '
colon_tests=$(echo $tests | sed 's/^ *//; s/ *: */:/g')

for p in empty -p; do
  test _$p = _empty && p=

  old_IFS=$IFS
  IFS=':'
  set $colon_tests
  IFS=$old_IFS

  while :; do
    test "$VERBOSE" = yes && set -x
    umask=$1 mode=$2 parent_perms=$3 sub_perms=$4
    test "_$mode" = _empty && mode=
    test $sub_perms = last && break
    # echo p=$p umask=$1 mode=$2 parent_perms=$3 sub_perms=$4
    shift; shift; shift; shift
    umask $umask

    # If we're not using -p, then create the parent manually,
    # and adjust expectations accordingly.
    test x$p = x &&
      {
        mkdir -m =,u=rwx parent || fail=1
        parent_perms=drwx------
      }

    mkdir $p $mode parent/sub || fail=1

    perms=$(stat --printf %A parent)
    test "$parent_perms" = "$perms" \
      || { fail=1; echo parent: expected $parent_perms, got $perms; }

    perms=$(stat --printf %A parent/sub)
    test "$sub_perms" = "$perms" \
      || { fail=1; echo parent/sub: expected $sub_perms, got $perms; }

    chmod -R u+rwx parent
    rm -rf parent || fail=1
  done
done

Exit $fail
#!/bin/sh
# test mkdir, mknod, mkfifo -Z

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir mknod mkfifo
require_selinux_


get_selinux_type() { ls -Zd "$1" | sed -n 's/.*:\(.*_t\):.*/\1/p'; }

mkdir subdir || framework_failure_
chcon 'root:object_r:tmp_t:s0' subdir || framework_failure_
cd subdir

# --- mkdir -Z ---
# Since in a tmp_t dir, dirs can be created as user_tmp_t ...
mkdir standard || framework_failure_
mkdir restored || framework_failure_
if restorecon restored 2>/dev/null; then
  # ... but when restored can be set to user_home_t
  # So ensure the type for these mkdir -Z cases matches
  # the directory type as set by restorecon.
  mkdir -Z single || fail=1
  # Run these as separate processes in case global context
  # set for an arg, impacts on another arg
  # TODO: Have the defaultcon() vary over these directories
  for dir in single_p single_p/existing multi/ple; do
    mkdir -Zp "$dir" || fail=1
  done
  restored_type=$(get_selinux_type 'restored')
  test "$(get_selinux_type 'single')" = "$restored_type" || fail=1
  test "$(get_selinux_type 'single_p')" = "$restored_type" || fail=1
  test "$(get_selinux_type 'single_p/existing')" = "$restored_type" || fail=1
  test "$(get_selinux_type 'multi')" = "$restored_type" || fail=1
  test "$(get_selinux_type 'multi/ple')" = "$restored_type" || fail=1
fi
if test "$fail" = '1'; then
  ls -UZd standard restored
  ls -UZd single single_p single_p/existing multi multi/ple
fi

# --- mknod -Z and mkfifo -Z ---
# Assume if selinux present that we can create fifos
for cmd_w_arg in 'mknod' 'mkfifo'; do
  # In OpenBSD's /bin/sh, mknod is a shell built-in.
  # Running via "env" ensures we run our program and not the built-in.
  basename="$cmd_w_arg"
  test "$basename" = 'mknod' && nt='p' || nt=''
  env -- $cmd_w_arg $basename $nt || fail=1
  env -- $cmd_w_arg ${basename}_restore $nt || fail=1
  if restorecon ${basename}_restore 2>/dev/null; then
    env -- $cmd_w_arg -Z ${basename}_Z $nt || fail=1
    restored_type=$(get_selinux_type "${basename}_restore")
    test "$(get_selinux_type ${basename}_Z)" = "$restored_type" || fail=1
  fi
done

Exit $fail
#!/bin/sh
# ensure that an invalid context doesn't cause a segfault

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir mkfifo mknod

# Note: on an SELinux/enforcing system running mcstransd older than
# mcstrans-0.2.8-1.fc9, the following commands may mistakenly exit
# successfully, in spite of the invalid context string.
require_selinux_enforcing_

c=invalid-selinux-context
msg="failed to set default file creation context to '$c':"

# Test each of mkdir, mknod, mkfifo with "-Z invalid-context".

for cmd_w_arg in 'mkdir dir' 'mknod b p' 'mkfifo f'; do
  # In OpenBSD's /bin/sh, mknod is a shell built-in.
  # Running via "env" ensures we run our program and not the built-in.
  env -- $cmd_w_arg --context=$c 2> out && fail=1
  set $cmd_w_arg; cmd=$1
  echo "$cmd: $msg" > exp || fail=1

  # Some systems fail with ENOTSUP, EINVAL, ENOENT, or even
  # "Unknown system error", or "Function not implemented".
  # For AIX 5.3: "Unsupported attribute value"
  # For HP-UX 11.23: Unknown error (252)
  sed					\
    -e 's/ Not supported$//'		\
    -e 's/ Invalid argument$//'		\
    -e 's/ Unknown system error$//'	\
    -e 's/ Operation not supported$//'	\
    -e 's/ Function not implemented$//'	\
    -e 's/ Unsupported attribute value$//'	\
    -e 's/ Unknown error .*$//'	\
    -e 's/ No such file or directory$//' out > k || fail=1
  mv k out || fail=1
  compare exp out || fail=1
done

Exit $fail
#!/bin/sh
# SMACK test for the mkdir,mknod, mkfifo commands.
# Derived from tests/mkdir/selinux.sh.
# Ensure that an unsettable SMACK label doesn't cause a segfault.

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir mkfifo mknod

require_smack_

c=arbitrary-smack-label
msg="failed to set default file creation context to '$c':"

for cmd in 'mkdir dir' 'mknod b p' 'mkfifo f'; do
  $cmd --context="$c" 2> out && fail=1
  set $cmd
  echo "$1: $msg" > exp || fail=1

  sed -e 's/ Operation not permitted$//' out > k || fail=1
  mv k out || fail=1
  compare exp out || fail=1
done

Exit $fail
#!/bin/sh
# SMACK test for the mkdir,mknod, mkfifo commands.
# Derived from tests/mkdir/selinux.sh.
# Ensure that SMACK label gets set.

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir mkfifo mknod

require_smack_
require_root_

c=arbitrary-smack-label

for cmd in 'mkdir dir' 'mknod b p' 'mkfifo f'; do
  $cmd --context="$c" || { fail=1; continue; }
  set $cmd
  ls -dZ $2 > out || fail=1
  test "$(cut -f1 -d' ' out)" = "$c" || { cat out; fail=1; }
done

Exit $fail
#!/bin/sh
# verify that mkdir honors special bits in MODE

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir

set_mode_string=u=rwx,g=rx,o=w,-s,+t
output_mode_string=drwxr-x-wT

tmp=t
mkdir -m$set_mode_string $tmp || fail=1

test -d $tmp || fail=1
mode=$(ls -ld $tmp|cut -b-10)
case "$mode" in
  $output_mode_string) ;;
  *) fail=1 ;;
esac

rmdir $tmp || fail=1
tmp2=$tmp/sub

# This should fail.
returns_ 1 mkdir -m$set_mode_string $tmp2 2> /dev/null || fail=1

# Now test the --parents option.
mkdir --parents -m$set_mode_string $tmp2 || fail=1

test -d $tmp2 || fail=1
mode=$(ls -ld $tmp2|cut -b-10)
case "$mode" in
  $output_mode_string) ;;
  *) fail=1 ;;
esac

Exit $fail
#!/bin/sh
# Ensure that mkdir works with arguments specified with and without
# a trailing slash.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir


mkdir -p dir/ || fail=1
test -d dir || fail=1

# This failed on NetBSD for fileutils-4.0.33.
mkdir d2/ || fail=1
test -d d2 || fail=1

Exit $fail
#!/bin/sh
# FIXME: convert this to a root-only test.

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test for the 2005-10-13 patch to lib/mkdir-p.c that fixed this sort
# of bug in mkdir:
#
#   "mkdir -p /a/b/c" no longer fails merely because a leading prefix
#   directory (e.g., /a or /a/b) exists on a read-only file system.
#
# Demonstrate the problem, as root:

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mkdir
require_root_

# FIXME: for now, skip it unconditionally
skip_ temporarily disabled

# FIXME: define cleanup_ to do the umount

# FIXME: use mktemp
cd /tmp                                    \
  && dd if=/dev/zero of=1 bs=8192 count=50 \
  && dd if=/dev/zero of=2 bs=8192 count=50 \
  && mkdir -p mnt-ro && mkfs -t ext2 1 && mkfs -t ext2 2 \
  && mount -o loop=/dev/loop3 1 mnt-ro    \
  && mkdir -p mnt-ro/rw                    \
  && mount -o remount,ro mnt-ro           \
  && mount -o loop=/dev/loop4 2 mnt-ro/rw

mkdir -p mnt-ro/rw/sub || fail=1

# To clean up
umount /tmp/2
umount /tmp/1

Exit $fail
#!/bin/sh
# move files/directories across file system boundaries
# and make sure acls are preserved

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

require_acl_

# Skip this test if cp was built without ACL support:
grep '^#define USE_ACL 1' $CONFIG_HEADER > /dev/null ||
  skip_ "insufficient ACL support"

cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

touch file || framework_failure_
t1=$other_partition_tmpdir/t1
touch $t1 || framework_failure_

skip_partition=none
# Ensure that setfacl and getfacl work on this file system.
setfacl -m user:bin:rw- file 2> /dev/null || skip_partition=.
# And on the destination file system.
setfacl -m user:bin:rw- $t1 || skip_partition=$other_partition_tmpdir
acl1=$(getfacl file) || skip_partition=.

test $skip_partition != none &&
  skip_ "'$skip_partition' is not on a suitable file system for this test"

# move the access acl of a file
mv file "$other_partition_tmpdir" || fail=1
acl2=$(cd "$other_partition_tmpdir" && getfacl file) || framework_failure_
test "$acl1" = "$acl2" || fail=1

# move the access acl of a directory
mkdir dir || framework_failure_
setfacl -m user:bin:rw- dir || framework_failure_
acl1=$(getfacl dir) || framework_failure_
mv dir "$other_partition_tmpdir" || fail=1
acl2=$(cd "$other_partition_tmpdir" && getfacl dir) || framework_failure_
test "$acl1" = "$acl2" || fail=1

# move the default acl of a directory
mkdir dir2 || framework_failure_
setfacl -d -m user:bin:rw- dir2 || framework_failure_
acl1=$(getfacl dir2) || framework_failure_
mv dir2 "$other_partition_tmpdir" || fail=1
acl2=$(cd "$other_partition_tmpdir" && getfacl dir2) || framework_failure_
test "$acl1" = "$acl2" || fail=1

Exit $fail
#!/bin/sh
# ensure that mv doesn't first unlink its destination in one particular case

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
require_strace_ unlink

# Before the fix, mv would unnecessarily unlink the destination symlink:
#   $ rm -rf s[12]; ln -s / s1; ln -s /tmp s2
#   $ strace -qe unlink /bin/mv -T s1 s2
#   unlink("s2") = 0
#
# With the fix, it doesn't call unlink:
#   $ rm -rf s[12]; ln -s / s1; ln -s /tmp s2
#   $ strace -qe unlink ./mv -T s1 s2
#   $

ln -s t1 s1 || framework_failure_
ln -s t2 s2 || framework_failure_


strace -qe unlink mv -T s1 s2 > out 2>&1 || fail=1
$EGREP 'unlink.*"s1"' out && fail=1

# Ensure that the source, s1, is gone.
ls -dl s1 > /dev/null 2>&1 && fail=1

# Ensure that the destination, s2, contains the link from s1.
test "$(readlink s2)" = t1 || fail=1

Exit $fail
#!/bin/sh
# ensure that mv doesn't first unlink a multi-hard-linked destination

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
require_strace_ unlink

# Before the fix, mv would unnecessarily unlink the destination symlink:
#   $ rm -f a b b2; touch a b; ln b b2; strace -e unlink /p/bin/mv a b
#   unlink("b")                             = 0
#
# With the fix, it doesn't call unlink:
#   $ rm -f a b b2; touch a b; ln b b2; strace -e unlink ./mv a b
#   $

touch a b || framework_failure_
ln b b2 || framework_failure_


strace -qe unlink mv a b > out 2>&1 || fail=1
$EGREP 'unlink.*"b"' out && fail=1

# Ensure that the source, "a", is gone.
ls -dl a > /dev/null 2>&1 && fail=1

# Ensure that the destination, "b", has link count 1.
n_links=$(stat --printf=%h b) || fail=1
test "$n_links" = 1 || fail=1

Exit $fail
#!/bin/sh
# Ensure "mv --verbose --backup" works the same for dirs and non-dirs.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

mkdir A B || framework_failure_
touch X Y || framework_failure_


# Before coreutils-6.2, the " (backup: 'B.~1~')" suffix was not printed.
mv --verbose --backup=numbered -T A B > out || fail=1
cat <<\EOF > exp || fail=1
'A' -> 'B' (backup: 'B.~1~')
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Force mv to use the copying code.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

a="$other_partition_tmpdir/a"
a2="$other_partition_tmpdir/a~"

rm -f "$a" "$a2" || framework_failure_
echo a > "$a" || framework_failure_
echo a2 > "$a2" || framework_failure_

# This mv command should exit nonzero.
mv --b=simple "$a2" "$a" > out 2>&1 && fail=1

sed \
   -e "s,mv:,XXX:," \
   -e "s,$a,YYY," \
   -e "s,$a2,ZZZ," \
  out > out2

cat > exp <<\EOF
XXX: backing up 'YYY' would destroy source;  'ZZZ' not moved
EOF

compare exp out2 || fail=1

Exit $fail
#!/bin/sh
# Ensure that cp/mv/ln don't clobber a just-copied/moved/linked file.
# With fileutils-4.1 and earlier, this test would fail for cp and mv.
# With coreutils-6.9 and earlier, this test would fail for ln.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp mv ln

skip_if_root_

mkdir a b c || framework_failure_
echo a > a/f || framework_failure_
echo b > b/f || framework_failure_


returns_ 1 cp a/f b/f c 2> /dev/null || fail=1
test -f a/f || fail=1
test -f b/f || fail=1
test -f c/f || fail=1
test "$(cat c/f)" = a || fail=1
rm -f c/f

# With --backup=numbered, it should succeed
cp --backup=numbered a/f b/f c || fail=1
test -f a/f || fail=1
test -f b/f || fail=1
test -f c/f || fail=1
test -f c/f.~1~ || fail=1
rm -f c/f*

returns_ 1 mv a/f b/f c 2> /dev/null || fail=1
test -f a/f && fail=1
test -f b/f || fail=1
test -f c/f || fail=1
test "$(cat c/f)" = a || fail=1

# Make sure mv still works when moving hard links.
# This is where the same_file test is necessary, and why
# we save file names in addition to dev/ino.
rm -f c/f* b/f
touch a/f
ln a/f b/g
mv a/f b/g c || fail=1
test -f a/f && fail=1
test -f b/g && fail=1
test -f c/f || fail=1
test -f c/g || fail=1

touch a/f b/f b/g
returns_ 1 mv a/f b/f b/g c 2> /dev/null || fail=1
test -f a/f && fail=1  # a/f should have been moved
test -f b/f || fail=1  # b/f should remain
test -f b/g && fail=1  # b/g should have been moved
test -f c/f || fail=1
test -f c/g || fail=1

# Test ln -f.

rm -f a/f b/f c/f
echo a > a/f || fail=1
echo b > b/f || fail=1
returns_ 1 ln -f a/f b/f c 2> /dev/null || fail=1
# a/f and c/f must be linked
test $(stat --format %i a/f) = $(stat --format %i c/f) || fail=1
# b/f and c/f must not be linked
test $(stat --format %i b/f) = $(stat --format %i c/f) && fail=1

Exit $fail
#!/bin/sh
# make sure we get proper diagnostics: e.g., with --target-dir=d but no args

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

touch f1 || framework_failure_
touch f2 || framework_failure_
touch d || framework_failure_

# These mv commands should all exit nonzero.

# Too few args.  This first one did fail, but with an incorrect diagnostic
# until fileutils-4.0u.
mv --target=. >> out 2>&1 && fail=1
mv no-file >> out 2>&1 && fail=1

# Target is not a directory.
mv f1 f2 f1 >> out 2>&1 && fail=1
mv --target=f2 f1 >> out 2>&1 && fail=1

cat > exp <<\EOF
mv: missing file operand
Try 'mv --help' for more information.
mv: missing destination file operand after 'no-file'
Try 'mv --help' for more information.
mv: target 'f1' is not a directory
mv: target 'f2' is not a directory
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# mv must fail when src and dest are mismatched directory/non-directory.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

mkdir -p dir/file || framework_failure_
> file || framework_failure_


# These should both fail, but until fileutils-4.0q only the second one did.
returns_ 1 mv dir file > /dev/null 2>&1 || fail=1
returns_ 1 mv file dir > /dev/null 2>&1 || fail=1

Exit $fail
#!/bin/sh
# Ensure that mv prints the right diagnostic for a dir->dir move
# where the destination directory is not empty.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

mkdir -p a/t b/t || framework_failure_
touch a/t/f || framework_failure_


# Expect this to fail with the expected diagnostic.
# For an interim (pre-6.0) release, it would give an erroneous
# diagnostic about moving one directory to a subdirectory of itself.
mv b/t a 2> out && fail=1

# Accept any of these: EEXIST, ENOTEMPTY, EBUSY.
sed             's/: File exists/: Directory not empty/'<out>o1;mv o1 out
sed 's/: Device or resource busy/: Directory not empty/'<out>o1;mv o1 out

cat <<\EOF > exp || fail=1
mv: cannot move 'b/t' to 'a/t': Directory not empty
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that cp merely warns when a non-directory source file is
# listed on the command line more than once.  fileutils-4.1.1
# made this fail:  cp a a d/
# Ensure that mv fails with a similar command.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp mv

skip_if_root_

reset_files() { rm -fr a b d; touch a; mkdir b d; }

for i in cp; do

  # cp may not fail in this case.
  reset_files
  $i a a d/ 2> out || fail=1
  reset_files
  $i ./a a d/ 2>> out || fail=1

  # Similarly for directories, but handle
  # source == dest appropriately.
  reset_files
  $i -a ./b b d/ 2>> out || fail=1
  reset_files
  returns_ 1 $i -a ./b b b/ 2>> out || fail=1

  # cp succeeds with --backup=numbered.
  reset_files
  $i --backup=numbered a a d/ 2>> out || fail=1

  # But not with plain '--backup'
  reset_files
  returns_ 1 $i --backup a a d/ 2>> out || fail=1

  cat <<EOF > exp
$i: warning: source file 'a' specified more than once
$i: warning: source file 'a' specified more than once
$i: warning: source directory 'b' specified more than once
$i: cannot copy a directory, './b', into itself, 'b/b'
$i: warning: source directory 'b' specified more than once
$i: will not overwrite just-created 'd/a' with 'a'
EOF
  compare exp out || fail=1
done

for i in mv; do
  # But mv *does* fail in this case (it has to).
  reset_files
  returns_ 1 $i a a d/ 2> out || fail=1
  returns_ 1 test -e a || fail=1
  reset_files
  returns_ 1 $i ./a a d/ 2>> out || fail=1
  returns_ 1 test -e a || fail=1

  # Similarly for directories, also handling
  # source == dest appropriately.
  reset_files
  returns_ 1 $i ./b b d/ 2>> out || fail=1
  returns_ 1 test -e b || fail=1
  reset_files
  returns_ 1 $i --verbose ./b b b/ 2>> out || fail=1
  test -d b || fail=1

  cat <<EOF > exp
$i: cannot stat 'a': No such file or directory
$i: cannot stat 'a': No such file or directory
$i: cannot stat 'b': No such file or directory
$i: cannot move './b' to a subdirectory of itself, 'b/b'
$i: warning: source directory 'b' specified more than once
EOF
  compare exp out || fail=1
done

Exit $fail
#!/bin/sh
# move a file onto itself

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

ff=mvforce
ff2=mvforce2

echo force-contents > $ff || framework_failure_
ln $ff $ff2 || framework_failure_

# mv should fail for the same name, or separate hardlinks as in
# both cases rename() will do nothing and return success.
# One could unlink(src) in the hardlink case, but that would
# introduce races with overlapping mv instances removing both hardlinks.

for dest in $ff $ff2; do
  # This mv command should exit nonzero.
  mv $ff $dest > out 2>&1 && fail=1

  printf "mv: '$ff' and '$dest' are the same file\n" > exp
  compare exp out || fail=1

  test $(cat $ff) = force-contents || fail=1
done

Exit $fail
#!/bin/sh
# Ensure that moving hard-linked arguments onto existing destinations works.
# Likewise when using cp --preserve=link.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp mv

skip_if_root_

mkdir dst || framework_failure_
(cd dst && touch a b c) || framework_failure_
touch a || framework_failure_
ln a b || framework_failure_
ln a c || framework_failure_


# ======================================
cp --preserve=link a b c dst || fail=1
# The source files must remain.
test -f a || fail=1
test -f b || fail=1
test -f c || fail=1
cd dst

# Three destination files must exist.
test -f a || fail=1
test -f b || fail=1
test -f c || fail=1

# The three i-node numbers must be the same.
ia=$(ls -i a|sed 's/ a//')
ib=$(ls -i b|sed 's/ b//')
ic=$(ls -i c|sed 's/ c//')
test $ia = $ib || fail=1
test $ia = $ic || fail=1

cd ..
rm -f dst/[abc]
(cd dst && touch a b c)

# ======================================
mv a b c dst || fail=1

# The source files must be gone.
test -f a && fail=1
test -f b && fail=1
test -f c && fail=1
cd dst

# Three destination files must exist.
test -f a || fail=1
test -f b || fail=1
test -f c || fail=1

# The three i-node numbers must be the same.
ia=$(ls -i a|sed 's/ a//')
ib=$(ls -i b|sed 's/ b//')
ic=$(ls -i c|sed 's/ c//')
test $ia = $ib || fail=1
test $ia = $ic || fail=1

Exit $fail
#!/bin/sh
# Ensure that using 'cp --preserve=link' to copy hard-linked arguments
# onto existing destinations works, even when one of the link operations fails.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# This bug was fixed in coreutils-4.5.9.
# To exercise this bug is non-trivial:
# Set-up requires at least three hard-linked files.  In copying them,
# while preserving links, the initial copy must succeed, the attempt
# to create the second file via 'link' must fail, and the final 'link'
# (to create the third) must succeed.  Before the corresponding fix,
# the first and third destination files would not be linked.
#
# Note that this is nominally a test of 'cp', yet it is in the tests/mv
# directory, because it requires use of the --preserve=link option that
# mv enables by default.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp
skip_if_root_

mkdir -p x dst/x || framework_failure_
touch dst/x/b || framework_failure_
chmod a-w dst/x
touch a || framework_failure_
ln a x/b || framework_failure_
ln a c || framework_failure_


# ======================================
# This must fail -- because x/b cannot be unlinked.
cp --preserve=link --parents a x/b c dst 2> /dev/null && fail=1

# Source files must remain.
test -f a || fail=1
test -f x/b || fail=1
test -f c || fail=1
cd dst

# Three destination files must exist.
test -f a || fail=1
test -f x/b || fail=1
test -f c || fail=1

# The i-node numbers of a and c must be the same.
ia=$(ls -i a) || fail=1; set x $ia; ia=$2
ic=$(ls -i c) || fail=1; set x $ic; ic=$2
test "$ia" = "$ic" || fail=1

# The i-node number of x/b must be different.
ib=$(ls -i x/b) || fail=1; set x $ib; ib=$2
test "$ia" = "$ib" && fail=1

Exit $fail
#!/bin/sh
# ensure that mv maintains a in this case: touch a; ln a b; mv a b

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
touch a || framework_failure_
ln a b || framework_failure_

# Between coreutils-5.0 and coreutils-8.24, 'a' would be removed.
# Before coreutils-5.0.1 the issue would not have been diagnosed.
# We don't emulate the rename(a,b) with unlink(a) as that would
# introduce races with overlapping mv instances removing both links.
mv a b 2>err && fail=1
printf "mv: 'a' and 'b' are the same file\n" > exp
compare exp err || fail=1

test -r a || fail=1
test -r b || fail=1

# Make sure it works with --backup.
mv --backup=simple a b || fail=1
test -r a && fail=1
test -r b || fail=1
test -r b~ || fail=1

Exit $fail
#!/bin/sh
# move a directory containing hard-linked files and
# make sure the links are preserved

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

dir=hlink

mkdir $dir || framework_failure_
> $dir/a || framework_failure_
ln $dir/a $dir/b || framework_failure_

mv $dir "$other_partition_tmpdir" || fail=1

# Display inode numbers, one per line.
ls -1i "$other_partition_tmpdir/$dir" > out || fail=1

# Make sure the inode numbers are the same.
a=$(sed -n 's/ a$//p' out)
b=$(sed -n 's/ b$//p' out)
test "$a" = "$b" || fail=1

Exit $fail
#!/bin/sh
# Ensure multi-hardlinked files are not lost on case insensitive file systems

# Copyright (C) 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
require_root_

cwd=$(pwd)
cleanup_() { cd /; umount "$cwd/mnt"; }

truncate -s100M hfs.img || framework_failure_
mkfs -t hfsplus hfs.img || skip_ 'failed to create hfs file system'
mkdir mnt               || framework_failure_
mount hfs.img mnt       || skip_ 'failed to mount hfs file system'

cd mnt
touch foo
ln foo whatever
returns_ 1 mv foo Foo || fail=1
test -r foo || fail=1

Exit $fail
#!/bin/sh
# Test both cp and mv for their behavior with -if and -fi
# The standards (POSIX and SuS) dictate annoyingly inconsistent behavior.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp mv

skip_if_root_

for i in a b c d e f g h; do
  echo $i > $i || framework_failure_
done
chmod 0 b d f h || framework_failure_
echo y > y || framework_failure_

mv -if a b || fail=1
mv -fi c d < y >/dev/null 2>&1 || fail=1

# Before 4.0s, this would not prompt.
cp -if e f < y > out 2>&1 || fail=1

# Make sure out contains the prompt.
case "$(cat out)" in
  "cp: replace 'f', overriding mode 0000 (---------)?"*) ;;
  *) fail=1 ;;
esac

test -f e || fail=1
test -f f || fail=1
compare e f || fail=1

cp -fi g h < y > out 2>&1 || fail=1
test -f g || fail=1
test -f h || fail=1
compare g h || fail=1

Exit $fail
#!/bin/sh
# Make sure that 'mv file unwritable-file' prompts the user
# and that 'mv -f file unwritable-file' doesn't.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
require_controlling_input_terminal_
skip_if_root_
trap '' TTIN # Ignore SIGTTIN

uname -s | grep 'BSD$' && skip_ 'known spurious failure on *BSD'

touch f g h i || framework_failure_
chmod 0 g i || framework_failure_


ls /dev/stdin >/dev/null 2>&1 \
  || skip_ 'there is no /dev/stdin file'

# work around a dash bug when redirecting
# from symlinked ttys in the background
tty=$(readlink -f /dev/stdin)

test -r "$tty" 2>&1 \
  || skip_ '/dev/stdin is not readable'

# Terminate any background processes
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

mv f g < $tty > out 2>&1 & pid=$!

# Test for the expected prompt; sleep upon non-match.
check_overwrite_prompt()
{
  local delay="$1"
  case "$(cat out)" in
    "mv: replace 'g', overriding mode 0000"*) ;;
    *) sleep $delay; return 1;;
  esac
}

# Wait for up to 12.7 seconds for the expected prompt.
retry_delay_ check_overwrite_prompt .1 7 || { fail=1; cat out; }

cleanup_

mv -f h i > out 2>&1 || fail=1
test -f i || fail=1
test -f h && fail=1

# Make sure there was no prompt.
case "$(cat out)" in
  '') ;;
  *) fail=1 ;;
esac

Exit $fail
#!/bin/sh
# make sure 'mv -i a b' does its job with a positive response

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

for i in a b; do
  echo $i > $i || framework_failure_
done
echo y > y || framework_failure_
echo n > n || framework_failure_

mv -i a b < y >/dev/null 2>&1 || fail=1

# Make sure out contains the prompt.
case "$(cat b)" in
  a) ;;
  *) fail=1 ;;
esac

# Ensure that mv -i a b works properly with 'n' and 'y' responses,
# when a and b are hard links to the same file.
rm -f a b
echo a > a
ln a b
mv -i a b < y 2>err && fail=1
test -r a || fail=1
test -r b || fail=1
printf "mv: 'a' and 'b' are the same file\n" > exp
compare exp err || fail=1

Exit $fail
#!/bin/sh
# Make sure 'mv -i dir file' prompts before failing.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

mkdir a || framework_failure_
touch b || framework_failure_


# coreutils 6.2 mv would neglect to prompt in this case.
echo n | mv -i a b 2>/dev/null || fail=1

Exit $fail
#!/bin/sh
# Show that mv doesn't preserve links to files the user has declined to move.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

mkdir a b || framework_failure_
echo foo > a/foo || framework_failure_
ln a/foo a/bar || framework_failure_
echo FUBAR > b/FUBAR || framework_failure_
ln b/FUBAR b/bar || framework_failure_
chmod a-w b/bar || framework_failure_
echo n > no || framework_failure_


mv a/bar a/foo b < no > out 2> err || fail=1
touch exp
touch exp_err

compare exp out || fail=1
compare exp_err err || fail=1

case "$(cat b/foo)" in
  foo) ;;
  *) fail=1;;
esac

Exit $fail
#!/bin/sh
# Force mv to use the copying code.
# Consider the case where SRC and DEST are on different
# partitions and DEST is a symlink to SRC.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

file="$other_partition_tmpdir/file"
symlink=symlink


echo whatever > $file || framework_failure_
ln -s $file $symlink || framework_failure_

# This mv command should exit nonzero.
mv $symlink $file > out 2>&1 && fail=1

# This should succeed.
mv $file $symlink || fail=1

sed \
   -e "s,mv:,XXX:," \
   -e "s,$file,YYY," \
   -e "s,$symlink,ZZZ," \
  out > out2

cat > exp <<\EOF
XXX: 'ZZZ' and 'YYY' are the same file
EOF
#'

compare exp out2 || fail=1

Exit $fail
#!/bin/sh
# move a directory into itself, with a twist

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

dir1=is3-dir1
dir2=is3-dir2

mkdir $dir1 $dir2 || framework_failure_

# This mv command should exit nonzero.
mv $dir1 $dir2 $dir2 > out 2>&1 && fail=1

sed \
   -e "s,mv:,XXX:,g" \
   -e "s,$dir2,ZZZ,g" \
  out > out2

cat > exp <<\EOF
XXX: cannot move 'ZZZ' to a subdirectory of itself, 'ZZZ/ZZZ'
EOF

compare exp out2 || fail=1

Exit $fail
#!/bin/sh
# confirm that 'mv symlink symlink' doesn't remove symlink
# Based on an example from David Luyer.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

touch file || framework_failure_
ln -s file s || framework_failure_


# This must fail.
returns_ 1 mv s s 2> /dev/null || fail=1

# But the symlink, s, must not be removed.
# Before 4.0.36, 's' would have been removed.
test -f s || fail=1

Exit $fail
#!/bin/sh
# Demonstrate how mv fails when it tries to move a directory into itself.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

dir=toself-dir
file=toself-file

rm -rf $dir $file || framework_failure_
mkdir -p $dir/a/b || framework_failure_
touch $file || framework_failure_


# This mv command should fail.
mv $dir $file $dir > out 2>&1 && fail=1

sed \
   -e "s,mv:,XXX:," \
   -e "s,$dir,SRC," \
   -e "s,$dir/$dir,DEST," \
  out > out2

cat > exp <<\EOF
XXX: cannot move 'SRC' to a subdirectory of itself, 'DEST'
EOF

compare exp out2 || fail=1

# Make sure the file is gone.
test -f $file && fail=1
# Make sure the directory is *not* moved.
test -d $dir || fail=1
test -d $dir/$dir && fail=1
# Make sure the file has been moved to the right place.
test -f $dir/$file || fail=1

Exit $fail
#!/bin/sh
# Exercise mv's file-descriptor-leak bug, reported against coreutils-5.2.1
# and fixed (properly) on 2004-10-21.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# limit so don't run it by default.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
skip_if_root_
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

# This test is relatively expensive, and might well evoke a
# framework-failure on systems with a smaller command-line length
expensive_

b="0 1 2 3 4 5 6 7 8 9
a b c d e f g h i j k l m n o p q r s t u v w x y z
_A _B _C _D _E _F _G _H _I _J _K _L _M _N _O _P _Q _R _S _T _U _V _W _X _Y _Z"

for i in $(echo $b); do
  echo $i
  for j in $b; do
    echo $i$j
  done
done > .dirs
mkdir $(cat .dirs) || framework_failure_
sed 's,$,/f,' .dirs | xargs touch

last_file=$(tail -n1 .dirs)/f
test -f $last_file || framework_failure_


mv * "$other_partition_tmpdir" || fail=1
test -f $last_file/f && fail=1
rm .dirs

out=$(ls -A) || fail=1
test -z "$out" || fail=1

Exit $fail
#!/bin/sh
# Test whether mv -n works as documented (not overwrite target).

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv


# test miscellaneous combinations of -f -i -n parameters
touch a b || framework_failure_
echo "'a' -> 'b'" > out_move
> out_empty

# ask for overwrite, answer no
touch a b || framework_failure_
echo n | mv -vi a b 2>/dev/null > out1 || fail=1
compare out1 out_empty || fail=1

# ask for overwrite, answer yes
touch a b || framework_failure_
echo y | mv -vi a b 2>/dev/null > out2 || fail=1
compare out2 out_move || fail=1

# -n wins (as the last option)
touch a b || framework_failure_
echo y | mv -vin a b 2>/dev/null > out3 || fail=1
compare out3 out_empty || fail=1

# -n wins (as the last option)
touch a b || framework_failure_
echo y | mv -vfn a b 2>/dev/null > out4 || fail=1
compare out4 out_empty || fail=1

# -n wins (as the last option)
touch a b || framework_failure_
echo y | mv -vifn a b 2>/dev/null > out5 || fail=1
compare out5 out_empty || fail=1

# options --backup and --no-clobber are mutually exclusive
touch a || framework_failure_
returns_ 1 mv -bn a b 2>/dev/null || fail=1

Exit $fail
#!/bin/sh
# Test "mv" with special files.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

null=mv-null
dir=mv-dir

rm -f $null || framework_failure_
mknod $null p || framework_failure_
test -p $null || framework_failure_
mkdir -p $dir/a/b/c $dir/d/e/f || framework_failure_
touch $dir/a/b/c/file1 $dir/d/e/f/file2 || framework_failure_

# We used to...
# exit 77 here to indicate that we couldn't run the test.
# At least running on SunOS 4.1.4, using a directory NFS mounted
# from an OpenBSD system, the above mknod fails.
# It's not worth making an exception any more.

mv --verbose $null $dir "$other_partition_tmpdir" > out || fail=1
# Make sure the files are gone.
test -p $null && fail=1
test -d $dir && fail=1
# Make sure they were moved.
test -p "$other_partition_tmpdir/$null" || fail=1
test -d "$other_partition_tmpdir/$dir/a/b/c" || fail=1

# POSIX says rename (A, B) can succeed if A and B are on different file systems,
# so ignore chatter about when files are removed and copied rather than renamed.
sed "
  /^removed /d
  s,$other_partition_tmpdir,XXX,
" out | sort > out2

cat <<EOF | sort > exp
'$null' -> 'XXX/$null'
'$dir' -> 'XXX/$dir'
'$dir/a' -> 'XXX/$dir/a'
'$dir/a/b' -> 'XXX/$dir/a/b'
'$dir/a/b/c' -> 'XXX/$dir/a/b/c'
'$dir/a/b/c/file1' -> 'XXX/$dir/a/b/c/file1'
'$dir/d' -> 'XXX/$dir/d'
'$dir/d/e' -> 'XXX/$dir/d/e'
'$dir/d/e/f' -> 'XXX/$dir/d/e/f'
'$dir/d/e/f/file2' -> 'XXX/$dir/d/e/f/file2'
EOF

compare exp out2 || fail=1

# cd "$other_partition_tmpdir"
# ls -l -A -R "$other_partition_tmpdir"

Exit $fail
#!/bin/sh
# ensure that --no-target-directory (-T) works when the destination is
# an empty directory.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

LS_FAILURE=2

mkdir -p d/sub empty src d2/sub e2 || framework_failure_
touch f || framework_failure_

# Skip this test if there's an underlying kernel bug.
mkdir a b b/a || framework_failure_

mv a b ||
  skip_ "your kernel's rename syscall is buggy"


# This should succeed, since both src and dest are directories,
# and the dest dir is empty.
mv -fT d empty || fail=1

# Ensure that the source, d, is gone.
returns_ $LS_FAILURE ls -d d > /dev/null 2>&1 || fail=1

# Ensure that the dest dir now has a subdirectory.
test -d empty/sub || fail=1

# rename must fail, since the dest is non-empty.
returns_ 1 mv -fT src d2 2> /dev/null || fail=1

# rename must fail, since the src is not a directory.
returns_ 1 mv -fT f e2 2> /dev/null || fail=1

Exit $fail
#!/bin/sh
# Make sure we give a sensible diagnostic when a cross-device 'mv'
# fails, e.g., because the destination cannot be unlinked.
# This is a bit fragile since it relies on the string used
# for EPERM: 'permission denied'.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
skip_if_root_
cleanup_() { t=$other_partition_tmpdir; chmod -R 700 "$t"; rm -rf "$t"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

touch k "$other_partition_tmpdir/k" || framework_failure_
chmod u-w "$other_partition_tmpdir" || framework_failure_


mv -f k "$other_partition_tmpdir" 2> out && fail=1
printf \
"mv: inter-device move failed: '%s' to '%s';"\
' unable to remove target: Permission denied\n' \
  k "$other_partition_tmpdir/k" >exp

# On some (less-compliant) systems, we get EPERM in this case.
# Accept either diagnostic.
cat <<EOF > exp2
mv: cannot move 'k' to '$other_partition_tmpdir/k': Permission denied
EOF

if cmp out exp >/dev/null 2>&1; then
  :
else
  if cmp out exp2; then
    :
  else
    fail=1
  fi
fi
test $fail = 1 && compare exp out

Exit $fail
#!/bin/sh
# Ensure that hard links are preserved when moving between partitions
# and when the links are in separate command line arguments.
# For additional constraints, see the comment in copy.c.
# Before coreutils-5.2.1, this test would fail.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

touch f || framework_failure_
ln f g || framework_failure_
mkdir a b || framework_failure_
touch a/1 || framework_failure_
ln a/1 b/1 || framework_failure_


mv f g "$other_partition_tmpdir" || fail=1
mv a b "$other_partition_tmpdir" || fail=1

cd "$other_partition_tmpdir"
set $(ls -Ci f g)
test $1 = $3 || fail=1
set $(ls -Ci a/1 b/1)
test $1 = $3 || fail=1

Exit $fail
#!/bin/sh
# Test various cases for moving directories across file systems

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"


# Moving a directory specified with a trailing slash from one partition to
# another, and giving it a different name at the destination would cause mv
# to get a failed assertion.
mkdir foo || framework_failure_
mv foo/ "$other_partition_tmpdir/bar" || fail=1


# Moving a non directory from source shouldn't replace empty dir in dest
touch bar || framework_failure_
returns_ 1 mv bar "$other_partition_tmpdir/" || fail=1


# Moving a directory from source shouldn't replace non directory in dest
mkdir bar2
touch "$other_partition_tmpdir/bar2"
returns_ 1 mv bar2 "$other_partition_tmpdir/" || fail=1


# As per POSIX moving directory from source should replace empty dir in dest
mkdir bar3
touch bar3/file
mkdir "$other_partition_tmpdir/bar3"
mv bar3 "$other_partition_tmpdir/" || fail=1
test -e "$other_partition_tmpdir/bar3/file" || fail=1


# As per POSIX moving directory from source shouldn't update dir in dest
mkdir bar3
touch bar3/file2
returns_ 1 mv bar3 "$other_partition_tmpdir/" || fail=1
test -e "$other_partition_tmpdir/bar3/file2" && fail=1

Exit $fail
#!/bin/sh
# make sure cp and mv can handle many combinations of local and
# other-partition regular/symlink'd files.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp mv

cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

# On NFS on Linux 2.6.9 at least we get:
# mv: preserving permissions for 'rem_sl': Operation not supported
require_local_dir_

pwd_tmp=$(pwd)

# Unset CDPATH.  Otherwise, output from the 'cd dir' command
# can make this test fail.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH


# Four cases:
# local regular file w/symlink on another partition
#   (loc_reg, rem_sl)
#   (rem_sl, loc_reg)
# local symlink to regular file on another partition
#   (loc_sl, rem_reg)
#   (rem_reg, loc_sl)

# Exercise those four cases for each of
# cp and mv, with lots of combinations of options.

exec 1> actual

# FIXME: This should be bigger: like more than 8k
contents=XYZ

loc_reg=loc_reg
loc_sl=loc_sl
rem_reg=$other_partition_tmpdir/rem_reg
rem_sl=$other_partition_tmpdir/rem_sl

for copy in cp mv; do
  for args in \
      'loc_reg rem_sl' \
      'rem_sl loc_reg' \
      'loc_sl rem_reg' \
      'rem_reg loc_sl' \
      ; do
    for options in '' --rem '--rem -d' '--rem -b' -b -bd -d; do
      case "$options" in *d*|*--rem*) test $copy = mv && continue;; esac
      rm -rf dir || fail=1
      rm -f "$other_partition_tmpdir"/* || fail=1
      mkdir dir || fail=1
      cd dir || fail=1
      case "$args" in *loc_reg*) reg_abs="$(pwd)/$loc_reg" ;; esac
      case "$args" in *rem_reg*) reg_abs=$rem_reg ;; esac
      case "$args" in *loc_sl*) slink=$loc_sl ;; esac
      case "$args" in *rem_sl*) slink=$rem_sl ;; esac

      echo $contents > "$reg_abs" || fail=1
      ln -nsf "$reg_abs" $slink || fail=1
      actual_args=$(echo $args|sed 's,^,$,;s/ / $/')
      actual_args=$(eval echo $actual_args)

      (
        (
          # echo 1>&2 cp $options $args
          $copy $options $actual_args 2>.err
          copy_status=$?
          echo $copy_status $copy $options $args

          # Normalize the program name in the error output,
          # remove any site-dependent part of other-partition file name,
          # and put brackets around the output.
          test -s .err \
            && {
            echo ' [' | tr -d '\n'
            sed 's/^[^:][^:]*\(..\):/\1:/;s,'"$other_partition_tmpdir/,," .err |
              tr -d '\n'
            echo ']'
            }
          # Strip off all but the file names.
          # Remove any site-dependent part of each file name.
          ls=$(ls -gG --ignore=.err . \
               | sed \
                  -e '/^total /d' \
                  -e "s,$other_partition_tmpdir/,," \
                  -e "s,$pwd_tmp/,," \
                  -e 's/^[^ ]*  *[^ ]*  *[^ ]*  *[^ ]*  *[^ ]*  *[^ ]*  *//')
          ls2=$(cd "$other_partition_tmpdir" && ls -gG --ignore=.err . \
                | sed \
                  -e '/^total /d' \
                  -e "s,$other_partition_tmpdir/,," \
                  -e "s,$pwd_tmp/,," \
                  -e 's/^[^ ]*  *[^ ]*  *[^ ]*  *[^ ]*  *[^ ]*  *[^ ]*  *//')
          echo " ("$ls") ("$ls2")"

          # If the command failed, then it must not have changed the files.
          if test $copy_status != 0; then
            for f in $actual_args; do
              test -f $f ||
                { echo " $copy FAILED but removed $f"; continue; }
              case "$(cat $f)" in
                "$contents") ;;
                *) echo " $copy FAILED but modified $f";;
              esac
            done
          fi

          if test $copy = cp; then
            # Make sure the original is unchanged and that
            # the destination is a copy.
            for f in $actual_args; do
              if test -f $f; then
                if test $copy_status != 0; then
                  test
                fi
                case "$(cat $f)" in
                  "$contents") ;;
                  *) echo " $copy FAILED";;
                esac
              else
                echo " symlink-loop"
              fi
            done
          fi
        )
      ) | sed 's/  *$//'
      cd ..
    done
    echo
  done
done

test $fail = 1 &&
  { (exit 1); exit; }

cat <<\EOF > expected
1 cp loc_reg rem_sl
 [cp: 'loc_reg' and 'rem_sl' are the same file]
 (loc_reg) (rem_sl -> dir/loc_reg)
0 cp --rem loc_reg rem_sl
 (loc_reg) (rem_sl)
0 cp --rem -d loc_reg rem_sl
 (loc_reg) (rem_sl)
0 cp --rem -b loc_reg rem_sl
 (loc_reg) (rem_sl rem_sl~ -> dir/loc_reg)
0 cp -b loc_reg rem_sl
 (loc_reg) (rem_sl rem_sl~ -> dir/loc_reg)
0 cp -bd loc_reg rem_sl
 (loc_reg) (rem_sl rem_sl~ -> dir/loc_reg)
1 cp -d loc_reg rem_sl
 [cp: 'loc_reg' and 'rem_sl' are the same file]
 (loc_reg) (rem_sl -> dir/loc_reg)

1 cp rem_sl loc_reg
 [cp: 'rem_sl' and 'loc_reg' are the same file]
 (loc_reg) (rem_sl -> dir/loc_reg)
1 cp --rem rem_sl loc_reg
 [cp: 'rem_sl' and 'loc_reg' are the same file]
 (loc_reg) (rem_sl -> dir/loc_reg)
1 cp --rem -d rem_sl loc_reg
 [cp: 'rem_sl' and 'loc_reg' are the same file]
 (loc_reg) (rem_sl -> dir/loc_reg)
1 cp --rem -b rem_sl loc_reg
 [cp: 'rem_sl' and 'loc_reg' are the same file]
 (loc_reg) (rem_sl -> dir/loc_reg)
1 cp -b rem_sl loc_reg
 [cp: 'rem_sl' and 'loc_reg' are the same file]
 (loc_reg) (rem_sl -> dir/loc_reg)
0 cp -bd rem_sl loc_reg
 (loc_reg -> dir/loc_reg loc_reg~) (rem_sl -> dir/loc_reg)
 symlink-loop
 symlink-loop
1 cp -d rem_sl loc_reg
 [cp: 'rem_sl' and 'loc_reg' are the same file]
 (loc_reg) (rem_sl -> dir/loc_reg)

1 cp loc_sl rem_reg
 [cp: 'loc_sl' and 'rem_reg' are the same file]
 (loc_sl -> rem_reg) (rem_reg)
1 cp --rem loc_sl rem_reg
 [cp: 'loc_sl' and 'rem_reg' are the same file]
 (loc_sl -> rem_reg) (rem_reg)
1 cp --rem -d loc_sl rem_reg
 [cp: 'loc_sl' and 'rem_reg' are the same file]
 (loc_sl -> rem_reg) (rem_reg)
1 cp --rem -b loc_sl rem_reg
 [cp: 'loc_sl' and 'rem_reg' are the same file]
 (loc_sl -> rem_reg) (rem_reg)
1 cp -b loc_sl rem_reg
 [cp: 'loc_sl' and 'rem_reg' are the same file]
 (loc_sl -> rem_reg) (rem_reg)
0 cp -bd loc_sl rem_reg
 (loc_sl -> rem_reg) (rem_reg -> rem_reg rem_reg~)
 symlink-loop
 symlink-loop
1 cp -d loc_sl rem_reg
 [cp: 'loc_sl' and 'rem_reg' are the same file]
 (loc_sl -> rem_reg) (rem_reg)

1 cp rem_reg loc_sl
 [cp: 'rem_reg' and 'loc_sl' are the same file]
 (loc_sl -> rem_reg) (rem_reg)
0 cp --rem rem_reg loc_sl
 (loc_sl) (rem_reg)
0 cp --rem -d rem_reg loc_sl
 (loc_sl) (rem_reg)
0 cp --rem -b rem_reg loc_sl
 (loc_sl loc_sl~ -> rem_reg) (rem_reg)
0 cp -b rem_reg loc_sl
 (loc_sl loc_sl~ -> rem_reg) (rem_reg)
0 cp -bd rem_reg loc_sl
 (loc_sl loc_sl~ -> rem_reg) (rem_reg)
1 cp -d rem_reg loc_sl
 [cp: 'rem_reg' and 'loc_sl' are the same file]
 (loc_sl -> rem_reg) (rem_reg)

0 mv loc_reg rem_sl
 () (rem_sl)
0 mv -b loc_reg rem_sl
 () (rem_sl rem_sl~ -> dir/loc_reg)

1 mv rem_sl loc_reg
 [mv: 'rem_sl' and 'loc_reg' are the same file]
 (loc_reg) (rem_sl -> dir/loc_reg)
0 mv -b rem_sl loc_reg
 (loc_reg -> dir/loc_reg loc_reg~) ()

1 mv loc_sl rem_reg
 [mv: 'loc_sl' and 'rem_reg' are the same file]
 (loc_sl -> rem_reg) (rem_reg)
0 mv -b loc_sl rem_reg
 () (rem_reg -> rem_reg rem_reg~)

0 mv rem_reg loc_sl
 (loc_sl) ()
0 mv -b rem_reg loc_sl
 (loc_sl loc_sl~ -> rem_reg) ()

EOF

# Redirect to stderr, since stdout is already taken.
compare expected actual 1>&2 || fail=1

Exit $fail
#!/bin/sh
# Make sure permissions are preserved when moving from one partition to another.

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

> file || framework_failure_
chmod a=rwx file || framework_failure_

umask 077
mv file "$other_partition_tmpdir" || framework_failure_

test -f file && fail=1
test -f "$other_partition_tmpdir/file" || fail=1

# This would have failed with the mv from fileutils-4.0i.
mode=$(ls -l "$other_partition_tmpdir/file" | cut -b-10)
test "$mode" = "-rwxrwxrwx" || fail=1

Exit $fail
#!/bin/sh
# ensure that mv gives one diagnostic, not two, when failing
# due to lack of permissions

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
skip_if_root_

mkdir -p no-write/dir || framework_failure_
chmod ug-w no-write || framework_failure_


mv no-write/dir . > out 2>&1 && fail=1
cat <<\EOF > exp
mv: cannot move 'no-write/dir' to './dir': Permission denied
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# A cross-partition move of a file in a sticky tmpdir and owned by
# someone else would evoke an invalid diagnostic:
# mv: cannot remove 'x': Operation not permitted
# Affects coreutils-6.0-6.9.

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
require_root_

cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

# Set up to run a test where non-root user tries to move a root-owned
# file from a sticky tmpdir to a directory owned by that user on
# a different partition.

mkdir t || framework_failure_
chmod a=rwx,o+t t || framework_failure_
echo > t/root-owned || framework_failure_
chmod a+r t/root-owned || framework_failure_
chown "$NON_ROOT_USERNAME" "$other_partition_tmpdir" || framework_failure_

# We have to allow $NON_ROOT_USERNAME access to ".".
chmod go+x . || framework_failure_


# Ensure that $NON_ROOT_USERNAME can access the required version of mv.
version=$(
  chroot --skip-chdir --user=$NON_ROOT_USERNAME / env PATH="$PATH" \
    mv --version |
  sed -n '1s/.* //p'
)
case $version in
  $PACKAGE_VERSION) ;;
  *) skip_ "cannot access just-built mv as user $NON_ROOT_USERNAME";;
esac

chroot --skip-chdir --user=$NON_ROOT_USERNAME / env PATH="$PATH" \
  mv t/root-owned "$other_partition_tmpdir" 2> out-t && fail=1

# On some systems, we get 'Not owner'.  Convert it.
# On other systems (HPUX), we get 'Permission denied'.  Convert it, too.
onp='Operation not permitted'
sed "s/Not owner/$onp/;s/Permission denied/$onp/" out-t > out

cat <<\EOF > exp
mv: cannot remove 't/root-owned': Operation not permitted
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Demonstrate that when moving a symlink onto a hardlink-to-that-symlink,
# an error is presented.  Depending on your kernel (e.g., Linux, Solaris,
# but not NetBSD), prior to coreutils-8.16, the mv would successfully perform
# a no-op.  I.e., surprisingly, mv s1 s2 would succeed, yet fail to remove s1.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

# Create a file f, and a symlink s1 to that file.
touch f || framework_failure_
ln -s f s2 || framework_failure_

# Attempt to create a hard link to that symlink.
# On some systems, it's not possible: they create a hard link to the referent.
ln s2 s1 || framework_failure_

# If s1 is not a symlink, skip this test.
test -h s1 \
  || skip_ your kernel or file system cannot create a hard link to a symlink

for opt in '' --backup; do

  if test "$opt" = --backup; then
    mv $opt s1 s2 > out 2>&1 || fail=1
    compare /dev/null out || fail=1

    # Ensure that s1 is gone.
    test -e s1 && fail=1

    # With --backup, ensure that the backup file was created.
    ref=$(readlink s2~) || fail=1
    test "$ref" = f || fail=1
  else
    echo "mv: 's1' and 's2' are the same file" > exp
    mv $opt s1 s2 2>err && fail=1
    compare exp err || fail=1

    # Ensure that s1 is still present.
    test -e s1 || fail=1

    # Without --backup, ensure there is no backup file.
    test -e s2~ && fail=1
  fi

done

Exit $fail
#!/bin/sh
# Ensure that mv works with a few symlink-onto-hard-link cases.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

touch f || framework_failure_
ln f h || framework_failure_
ln -s f s || framework_failure_

# Given two links f and h to some important content, and a symlink s to f,
# "mv s f" must fail because it might then be hard to find the link, h.
# "mv s l" may succeed because then, s (now "l") still points to f.
# Of course, if the symlink were being moved into a different destination
# directory, things would be very different, and, I suspect, implausible.

echo "mv: 's' and 'f' are the same file" > exp || framework_failure_
mv s f > out 2> err && fail=1
compare /dev/null out || fail=1
compare exp err || fail=1

mv s l > out 2> err || fail=1
compare /dev/null out || fail=1
compare /dev/null err || fail=1

Exit $fail
#!/bin/sh
# Make sure that the copying code used in an inter-partition
# move unlinks a destination symlink before opening it.

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv
cleanup_() { rm -rf "$other_partition_tmpdir"; }
. "$abs_srcdir/tests/other-fs-tmpdir"

rem_file="$other_partition_tmpdir/file"
rem_symlink="$other_partition_tmpdir/symlink"
file=to-sym

echo local > $file || framework_failure_
echo remote > $rem_file || framework_failure_
ln -s $rem_file $rem_symlink || framework_failure_

# This mv command should succeed, unlinking the symlink
# before copying.
mv $file $rem_symlink || fail=1

# Make sure $file is gone.
test -f $file && fail=1

# Make sure $rem_file is unmodified.
test $(cat $rem_file) = remote || fail=1

Exit $fail
#!/bin/sh
# On some operating systems, e.g. SunOS-4.1.1_U1 on sun3x,
# rename() doesn't accept trailing slashes.
# Also, ensure that "mv dir non-exist-dir/" works.
# Also, ensure that "cp dir non-exist-dir/" works.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ mv

mkdir foo || framework_failure_


mv foo/ bar || fail=1

# mv and cp would misbehave for coreutils versions [5.3.0..5.97], 6.0 and 6.1
for cmd in mv 'cp -r'; do
  for opt in '' -T -u; do
    rm -rf d e || framework_failure_
    mkdir d    || framework_failure_

    $cmd $opt d e/ || fail=1
    if test "$cmd" = mv; then
      test -d d && fail=1
    else
      test -d d || fail=1
    fi
    test -d e || fail=1
  done
done

# We would like the erroneous-looking "mv any non-dir/" to fail,
# but with the current implementation, it depends on how the
# underlying rename syscall handles the trailing slash.
# It does fail, as desired, on recent Linux and Solaris systems.
#touch a a2
#returns_ 1 mv a a2/ || fail=1

# Test for a cp-specific diagnostic introduced after coreutils-8.7:
printf '%s\n' \
  "cp: cannot create regular file 'no-such/': Not a directory" \
> expected-err
touch b
cp b no-such/ 2> err

# Map "No such file..." diagnostic to the expected "Not a directory"
sed 's/No such file or directory/Not a directory/' err > k && mv k err

compare expected-err err || fail=1

Exit $fail
#!/bin/sh
# make sure --update works as advertised

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ cp mv

echo old > old || framework_failure_
touch -d yesterday old || framework_failure_
echo new > new || framework_failure_


for interactive in '' -i; do
  for cp_or_mv in cp mv; do
    # This is a no-op, with no prompt.
    # With coreutils-6.9 and earlier, using --update with -i would
    # mistakenly elicit a prompt.
    $cp_or_mv $interactive --update old new < /dev/null > out 2>&1 || fail=1
    compare /dev/null out || fail=1
    case "$(cat new)" in new) ;; *) fail=1 ;; esac
    case "$(cat old)" in old) ;; *) fail=1 ;; esac
  done
done

# This will actually perform the rename.
mv --update new old || fail=1
test -f new && fail=1
case "$(cat old)" in new) ;; *) fail=1 ;; esac

# Restore initial conditions.
echo old > old || fail=1
touch -d yesterday old || fail=1
echo new > new || fail=1

# This will actually perform the copy.
cp --update new old || fail=1
case "$(cat old)" in new) ;; *) fail=1 ;; esac
case "$(cat new)" in new) ;; *) fail=1 ;; esac

Exit $fail
#!/bin/sh
# tests for canonicalize-existing mode (readlink -e).

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ readlink pwd

pwd=$(pwd)
my_pwd=$(env pwd -P)
tmp=d

mkdir $tmp || framework_failure_
cd $tmp || framework_failure_

mkdir subdir removed || framework_failure_
touch regfile || framework_failure_

ln -s regfile link1 || framework_failure_
ln -s subdir link2 || framework_failure_
ln -s missing link3 || framework_failure_
ln -s subdir/missing link4 || framework_failure_

cd "$pwd/$tmp/removed" || framework_failure_

# Skip this test if the system doesn't let you remove the working directory.
if rmdir ../removed 2>/dev/null; then
  v=$(returns_ 1 readlink -e .) || fail=1
  test -z "$v" || fail=1
fi

cd "$pwd/$tmp" || fail=1

for p in "" "$pwd/$tmp/"; do

  v=$(readlink -e "${p}regfile") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile" || fail=1

  v=$(returns_ 1 readlink -e "${p}./regfile/") || fail=1
  test -z "$v" || fail=1

  v=$(readlink -e "${p}subdir") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(readlink -e "${p}./subdir/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(returns_ 1 readlink -e "${p}missing") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -e "${p}./missing/") || fail=1
  test -z "$v" || fail=1

  v=$(readlink -e "${p}link1") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile" || fail=1

  v=$(returns_ 1 readlink -e "${p}./link1/") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -e "${p}link1/more") || fail=1
  test -z "$v" || fail=1

  v=$(readlink -e "${p}link2") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(readlink -e "${p}./link2/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(returns_ 1 readlink -e "${p}link2/more") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -e "${p}link3") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -e "${p}./link3/") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -e "${p}link3/more") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -e "${p}link4") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -e "${p}./link4/") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -e "${p}link4/more") || fail=1
  test -z "$v" || fail=1
done

Exit $fail
#!/bin/sh
# tests for canonicalize mode (readlink -f).

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ readlink pwd

pwd=$(pwd)
my_pwd=$(env pwd -P)
tmp=d

mkdir $tmp || framework_failure_
cd $tmp || framework_failure_

mkdir subdir removed || framework_failure_
touch regfile || framework_failure_

ln -s regfile link1 || framework_failure_
ln -s subdir link2 || framework_failure_
ln -s missing link3 || framework_failure_
ln -s subdir/missing link4 || framework_failure_
ln -s link5 link5 || framework_failure_

cd "$pwd/$tmp/removed" || framework_failure_

# Skip this test if the system doesn't let you remove the working directory.
if rmdir ../removed 2>/dev/null; then
  v=$(returns_ 1 readlink -e .) || fail=1
  test -z "$v" || fail=1
fi

cd "$pwd/$tmp" || fail=1

for p in "" "$pwd/$tmp/"; do

  v=$(readlink -f "${p}regfile") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile" || fail=1

  v=$(returns_ 1 readlink -f "${p}./regfile/") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}regfile/more") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}./regfile/more/") || fail=1
  test -z "$v" || fail=1

  v=$(readlink -f "${p}subdir") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(readlink -f "${p}./subdir/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(readlink -f "${p}subdir/more") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/more" || fail=1

  v=$(readlink -f "${p}./subdir/more/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/more" || fail=1

  v=$(readlink -f "${p}missing") || fail=1
  test "$v" = "$my_pwd/$tmp/missing" || fail=1

  v=$(readlink -f "${p}./missing/") || fail=1
  test "$v" = "$my_pwd/$tmp/missing" || fail=1

  v=$(returns_ 1 readlink -f "${p}missing/more") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}./missing/more/") || fail=1
  test -z "$v" || fail=1

  v=$(readlink -f "${p}link1") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile" || fail=1

  v=$(returns_ 1 readlink -f "${p}./link1/") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}link1/more") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}./link1/more/") || fail=1
  test -z "$v" || fail=1

  v=$(readlink -f "${p}link2") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(readlink -f "${p}./link2/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(readlink -f "${p}link2/more") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/more" || fail=1

  v=$(readlink -f "${p}./link2/more/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/more" || fail=1

  v=$(returns_ 1 readlink -f "${p}link2/more/more2") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}./link2/more/more2/") || fail=1
  test -z "$v" || fail=1

  v=$(readlink -f "${p}link3") || fail=1
  test "$v" = "$my_pwd/$tmp/missing" || fail=1

  v=$(readlink -f "${p}./link3/") || fail=1
  test "$v" = "$my_pwd/$tmp/missing" || fail=1

  v=$(returns_ 1 readlink -f "${p}link3/more") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}./link3/more/") || fail=1
  test -z "$v" || fail=1

  v=$(readlink -f "${p}link4") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/missing" || fail=1

  v=$(readlink -f "${p}./link4/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/missing" || fail=1

  v=$(returns_ 1 readlink -f "${p}link4/more") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}./link4/more") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}link5") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}./link5/") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}link5/more") || fail=1
  test -z "$v" || fail=1

  v=$(returns_ 1 readlink -f "${p}./link5/more") || fail=1
  test -z "$v" || fail=1
done

Exit $fail
#!/bin/sh
# tests for canonicalize-missing mode (readlink -m).

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ readlink pwd

pwd=$(pwd)
my_pwd=$(env pwd -P)
tmp=d

mkdir $tmp || framework_failure_
cd $tmp || framework_failure_

mkdir subdir removed || framework_failure_
touch regfile || framework_failure_

ln -s regfile link1 || framework_failure_
ln -s subdir link2 || framework_failure_
ln -s missing link3 || framework_failure_
ln -s subdir/missing link4 || framework_failure_

cd "$pwd/$tmp/removed" || framework_failure_

# Skip this test if the system doesn't let you remove the working directory.
if rmdir ../removed 2>/dev/null; then
  v=$(returns_ 1 readlink -e .) || fail=1
  test -z "$v" || fail=1
fi

cd "$pwd/$tmp" || fail=1

for p in "" "$pwd/$tmp/"; do

  v=$(readlink -m "${p}regfile") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile" || fail=1

  v=$(readlink -m "${p}./regfile/") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile" || fail=1

  v=$(readlink -m "${p}regfile/more") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile/more" || fail=1

  v=$(readlink -m "${p}./regfile/more/") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile/more" || fail=1

  v=$(readlink -m "${p}subdir") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(readlink -m "${p}./subdir/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(readlink -m "${p}subdir/more") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/more" || fail=1

  v=$(readlink -m "${p}./subdir/more/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/more" || fail=1

  v=$(readlink -m "${p}missing") || fail=1
  test "$v" = "$my_pwd/$tmp/missing" || fail=1

  v=$(readlink -m "${p}./missing/") || fail=1
  test "$v" = "$my_pwd/$tmp/missing" || fail=1

  v=$(readlink -m "${p}missing/more") || fail=1
  test "$v" = "$my_pwd/$tmp/missing/more" || fail=1

  v=$(readlink -m "${p}./missing/more/") || fail=1
  test "$v" = "$my_pwd/$tmp/missing/more" || fail=1

  v=$(readlink -m "${p}link1") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile" || fail=1

  v=$(readlink -m "${p}./link1/") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile" || fail=1

  v=$(readlink -m "${p}link1/more") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile/more" || fail=1

  v=$(readlink -m "${p}./link1/more/") || fail=1
  test "$v" = "$my_pwd/$tmp/regfile/more" || fail=1

  v=$(readlink -m "${p}link2") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(readlink -m "${p}./link2/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir" || fail=1

  v=$(readlink -m "${p}link2/more") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/more" || fail=1

  v=$(readlink -m "${p}./link2/more/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/more" || fail=1

  v=$(readlink -m "${p}link2/more/more2") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/more/more2" || fail=1

  v=$(readlink -m "${p}./link2/more/more2/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/more/more2" || fail=1

  v=$(readlink -m "${p}link3") || fail=1
  test "$v" = "$my_pwd/$tmp/missing" || fail=1

  v=$(readlink -m "${p}./link3/") || fail=1
  test "$v" = "$my_pwd/$tmp/missing" || fail=1

  v=$(readlink -m "${p}link3/more") || fail=1
  test "$v" = "$my_pwd/$tmp/missing/more" || fail=1

  v=$(readlink -m "${p}./link3/more/") || fail=1
  test "$v" = "$my_pwd/$tmp/missing/more" || fail=1

  v=$(readlink -m "${p}link4") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/missing" || fail=1

  v=$(readlink -m "${p}./link4/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/missing" || fail=1

  v=$(readlink -m "${p}link4/more") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/missing/more" || fail=1

  v=$(readlink -m "${p}./link4/more/") || fail=1
  test "$v" = "$my_pwd/$tmp/subdir/missing/more" || fail=1

done

Exit $fail
#!/bin/sh
# test multiple argument handling.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ readlink

touch regfile || framework_failure_
ln -s regfile link1 || framework_failure_

readlink link1 link1 || fail=1
returns_ 1 readlink link1 link2 || fail=1
returns_ 1 readlink link1 link2 link1 || fail=1
readlink -m link1 link2 || fail=1

printf '/1\0/1\0' > exp || framework_failure_
readlink -m --zero /1 /1 > out || fail=1
compare exp out || fail=1

# The largely redundant --no-newline option is ignored with multiple args.
# Note BSD's readlink suppresses all delimiters, even with multiple args,
# but that functionality was not thought useful.
readlink -n -m --zero /1 /1 > out || fail=1
compare exp out || fail=1

# Note the edge case that the last xargs run may not have a delimiter
rm out || framework_failure_
printf '/1\0/1\0/1' > exp || framework_failure_
printf '/1 /1 /1 ' | xargs -n2 readlink -n -m --zero >> out || fail=1
compare exp out || fail=1

Exit $fail
#!/bin/sh
# test for readlink mode.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ readlink

mkdir subdir || framework_failure_
touch regfile || framework_failure_
ln -s regfile link1 || framework_failure_
ln -s missing link2 || framework_failure_


v=$(readlink link1) || fail=1
test "$v" = regfile || fail=1

v=$(readlink link2) || fail=1
test "$v" = missing || fail=1

v=$(returns_ 1 readlink subdir) || fail=1
test -z "$v" || fail=1

v=$(returns_ 1 readlink regfile) || fail=1
test -z "$v" || fail=1

v=$(returns_ 1 readlink missing) || fail=1
test -z "$v" || fail=1

Exit $fail
#!/bin/sh
# rm (coreutils-4.5.4) could be tricked into mistakenly reporting a cycle.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

mkdir -p a/b
touch a/b/file
chmod ug-w a/b


rm -rf a a 2>&1 | sed 's/:[^:]*$//' > out || fail=1
cat <<\EOF > exp
rm: cannot remove 'a/b/file'
rm: cannot remove 'a/b/file'
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test "rm --dir --verbose".

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir a || framework_failure_
> b || framework_failure_

rm --verbose --dir a b > out || fail=1

cat <<\EOF > exp || framework_failure_
removed directory 'a'
removed 'b'
EOF

test -e a && fail=1
test -e b && fail=1

# Compare expected and actual output.
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that 'rm -d dir' (i.e., without --recursive) gives a reasonable
# diagnostic when failing.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir d || framework_failure_
> d/a || framework_failure_

rm -d d 2> out && fail=1

# Accept any of these: EEXIST, ENOTEMPTY
sed 's/: File exists/: Directory not empty/' out > out2

printf "%s\n" \
    "rm: cannot remove 'd': Directory not empty" \
    > exp || framework_failure_

compare exp out2 || fail=1

Exit $fail
#!/bin/sh
# Ensure that 'rm -d -i dir' (i.e., without --recursive) gives a prompt and
# then deletes the directory if it is empty

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir d || framework_failure_

echo "y" | rm -i -d --verbose d > out 2> out.err || fail=1
printf "%s" \
    "rm: remove directory 'd'? " \
    > exp.err || framework_failure_

printf "%s\n" \
    "removed directory 'd'" \
    > exp || framework_failure_

compare exp out || fail=1
compare exp.err out.err || fail=1

Exit $fail
#!/bin/sh
# rm should not prompt before removing a dangling symlink.
# Likewise for a non-dangling symlink.
# But for fileutils-4.1.9, it would do the former and
# for fileutils-4.1.10 the latter.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

ln -s no-file dangle
ln -s / symlink

# Terminate any background processes
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

rm ---presume-input-tty dangle symlink & pid=$!
# The buggy rm (fileutils-4.1.9) would hang here, waiting for input.

# Wait up to 6.3s for rm to remove the files
check_files_removed() {
  local present=0
  sleep $1
  ls -l dangle > /dev/null 2>&1 && present=1
  ls -l symlink > /dev/null 2>&1 && present=1
  test $present = 0
}
retry_delay_ check_files_removed .1 6 || fail=1

cleanup_

Exit $fail
#!/bin/sh
# Test "rm" with a deep hierarchy.

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is a bit of a torture test for mkdir -p, too.
# GNU rm performs *much* better on systems that have a d_type member
# in the directory structure because then it does only one stat per
# command line argument.

# If this test takes too long on your system, blame the OS.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

umask 022


k20=/k/k/k/k/k/k/k/k/k/k/k/k/k/k/k/k/k/k/k/k
k200=$k20$k20$k20$k20$k20$k20$k20$k20$k20$k20

# Be careful not to exceed max file name length (usu 512?).
# Doing so wouldn't affect GNU mkdir or GNU rm, but any tool that
# operates on the full pathname (like 'test') would choke.
k_deep=$k200$k200

t=t
# Create a directory in $t with lots of 'k' components.
deep=$t$k_deep
mkdir -p $deep || fail=1

# Make sure the deep dir was created.
test -d $deep || fail=1

rm -r $t || fail=1

# Make sure all of $t was deleted.
test -d $t && fail=1

Exit $fail
#!/bin/sh
# Ensure rm -r DIR does not prompt for very long full relative names in DIR.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
require_perl_

# Root can run this test, but it always succeeds, since for root, all
# files are writable, and write_protected_non_symlink never reaches
# the offending euidaccess_stat call.
skip_if_root_

# ecryptfs for example uses some of the file name space
# for encrypting filenames, so we must check dynamically.
name_max=$(stat -f -c %l .)
test "$name_max" -ge '200' || skip_ "NAME_MAX=$name_max is not sufficient"

mkdir x || framework_failure_
cd x || framework_failure_

# Construct a hierarchy containing a relative file with a long name
: ${PERL=perl}
$PERL \
    -e 'my $d = "x" x 200; foreach my $i (1..52)' \
    -e '  { mkdir ($d, 0700) && chdir $d or die "$!" }' \
  || framework_failure_

cd .. || framework_failure_
echo n > no || framework_failure_

rm ---presume-input-tty -r x < no > out || fail=1

# expect empty output
compare /dev/null out || fail=1

# the directory must have been removed
test -d x && fail=1

Exit $fail
#!/bin/sh
# rm (without -r) must give a diagnostic for any directory.
# It must not prompt, even if that directory is unwritable.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir --mode=0500 unwritable-dir || framework_failure_


# For rm from coreutils-5.0.1, this would prompt.
rm ---presume-input-tty unwritable-dir < /dev/null > out-t 2>&1 && fail=1
cat <<\EOF > exp || fail=1
rm: cannot remove 'unwritable-dir': Is a directory
EOF

# When run by a non-privileged user we get this:
# rm: cannot remove directory 'unwritable-dir': Is a directory
# When run by root we get this:
# rm: cannot remove 'unwritable-dir': Is a directory
# Normalize the message.
sed 's/remove directory/remove/' out-t > out
rm -f out-t

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that 'rm dir' (i.e., without --recursive) gives a reasonable
# diagnostic when failing.

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir d || framework_failure_


rm d 2> out && fail=1
cat <<\EOF > exp || fail=1
rm: cannot remove 'd': Is a directory
EOF

# Before coreutils-5.93 this test would fail on Solaris 9 and newer.
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Use rm -r to remove two non-empty dot-relative directories.
# This would have failed between 2004-10-18 and 2004-10-21.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir a b || framework_failure_
touch a/f b/f || framework_failure_


rm -r a b || fail=1

Exit $fail
#!/bin/sh
# Ensure that rm -rf removes an empty-and-inaccessible directory.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

mkdir -m0 inacc || framework_failure_

# Also exercise the different code path that's taken for a directory
# that is empty (hence removable) and unreadable.
mkdir -m a-r -p a/unreadable


# This would fail for e.g., coreutils-5.93.
rm -rf inacc || fail=1
test -d inacc && fail=1

# This would fail for e.g., coreutils-5.97.
rm -rf a || fail=1
test -d a && fail=1

Exit $fail
#!/bin/sh
# ensure that "rm -rf DIR-with-many-entries" is not O(N^2)

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

very_expensive_

# Using rm -rf to remove a 400k-entry directory takes:
# - 9 seconds with the patch, on a 2-yr-old system
# - 350 seconds without the patch, on a high-end system (disk 20-30% faster)
threshold_seconds=60

# The number of entries in our test directory.
n=400000

# Choose a value that is large enough to ensure an accidentally
# regressed rm would require much longer than $threshold_seconds to remove
# the directory.  With n=400k, pre-patch GNU rm would require about 350
# seconds even on a fast disk.  On a relatively modern system, the
# patched version of rm requires about 10 seconds, so even if you
# choose to enable very expensive tests with a disk that is much slower,
# the test should still succeed.

# Skip unless "." is on an ext[34] file system.
# FIXME-maybe: try to find a suitable file system or allow
# the user to specify it via an envvar.
df -T -t ext3 -t ext4dev -t ext4 . \
  || skip_ 'this test runs only on an ext3 or ext4 file system'

# Skip if there are too few inodes free.  Require some slack.
free_inodes=$(stat -f --format=%d .) || framework_failure_
min_free_inodes=$(expr 12 \* $n / 10)
test $min_free_inodes -lt $free_inodes \
  || skip_ "too few free inodes on '.': $free_inodes;" \
      "this test requires at least $min_free_inodes"

ok=0
start=$(date +%s)
mkdir d &&
  cd d &&
    seq $n | xargs touch &&
    test -f 1 &&
    test -f $n &&
  cd .. &&
  ok=1
test $ok = 1 || framework_failure_
setup_duration=$(expr $(date +%s) - $start)
echo creating a $n-entry directory took $setup_duration seconds

# If set-up took longer than the default $threshold_seconds,
# use the longer set-up duration as the limit.
test $threshold_seconds -lt $setup_duration \
  && threshold_seconds=$setup_duration

start=$(date +%s)
timeout ${threshold_seconds}s rm -rf d; err=$?
duration=$(expr $(date +%s) - $start)

case $err in
  124) fail=1; echo rm took longer than $threshold_seconds seconds;;
  0) ;;
  *) fail=1;;
esac

echo removing a $n-entry directory took $duration seconds

Exit $fail
#!/bin/sh
# Test "rm -f" with a nonexistent file.

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir -p d || framework_failure_

rm -f d/no-such-file || fail=1

Exit $fail
#!/bin/sh
# Like fail-eperm, but the failure must be for a file encountered
# while trying to remove the containing directory with the sticky bit set.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
require_root_

# The containing directory must be owned by the user who eventually runs rm.
chown $NON_ROOT_USERNAME .

mkdir a || framework_failure_
chmod 1777 a || framework_failure_
touch a/b || framework_failure_


# Try to ensure that $NON_ROOT_USERNAME can access
# the required version of rm.
rm_version=$(
  chroot --skip-chdir --user=$NON_ROOT_USERNAME / env PATH="$PATH" \
    rm --version |
  sed -n '1s/.* //p'
)
case $rm_version in
  $PACKAGE_VERSION) ;;
  *) skip_ "cannot access just-built rm as user $NON_ROOT_USERNAME";;
esac
chroot --skip-chdir --user=$NON_ROOT_USERNAME / \
  env PATH="$PATH" rm -rf a 2> out-t && fail=1

# On some systems, we get 'Not owner'.  Convert it.
# On other systems (HPUX), we get 'Permission denied'.  Convert it, too.
onp='Operation not permitted'
sed "s/Not owner/$onp/;s/Permission denied/$onp/" out-t > out

cat <<\EOF > exp
rm: cannot remove 'a/b': Operation not permitted
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that rm -rf unremovable-non-dir gives a diagnostic.
# Test both a regular file and a symlink -- it makes a difference to rm.
# With the symlink, rm from coreutils-6.9 would fail with a misleading
# ELOOP diagnostic.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

ok=0
mkdir d           &&
  touch d/f       &&
  ln -s f d/slink &&
  chmod a-w d     &&
  ok=1
test $ok = 1 || framework_failure_

mkdir e           &&
  ln -s f e/slink &&
  chmod a-w e     &&
  ok=1
test $ok = 1 || framework_failure_


rm -rf d/f 2> out && fail=1
cat <<\EOF > exp
rm: cannot remove 'd/f': Permission denied
EOF
compare exp out || fail=1

# This used to fail with ELOOP.
rm -rf e 2> out && fail=1
cat <<\EOF > exp
rm: cannot remove 'e/slink': Permission denied
EOF
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Exercise a bug that was fixed in 4.0s.
# Before then, rm would fail occasionally, sometimes via
# a failed assertion, others with a seg fault.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
expensive_

# Create a hierarchy with 3*26 leaf directories, each at depth 153.
echo "$0: creating 78 trees, each of depth 153; this will take a while..." >&2
y=$(seq 1 150|tr -sc '\n' y|tr '\n' /)
for i in 1 2 3; do
  for j in a b c d e f g h i j k l m n o p q r s t u v w x y z; do
    mkdir -p t/$i/$j/$y || framework_failure_
  done
done


rm -r t || fail=1

Exit $fail
#!/bin/sh
# Test "rm -i".

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

t=t
mkdir -p $t || framework_failure_
echo > $t/a || framework_failure_
test -f $t/a || framework_failure_

echo y > $t/in-y
echo n > $t/in-n

rm -i $t/a < $t/in-n > /dev/null 2>&1 || fail=1
# The file should not have been removed.
test -f $t/a || fail=1

rm -i $t/a < $t/in-y > /dev/null 2>&1 || fail=1
# The file should have been removed this time.
test -f $t/a && fail=1

rm -rf $t

Exit $fail
#!/bin/sh
# Ensure that rm --interactive=never works does not prompt, even for
# an unwritable file.

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

touch f || framework_failure_
chmod 0 f || framework_failure_
touch exp || framework_failure_


rm --interactive=never f > out || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Since the rewrite for fileutils-4.1.9, 'rm -i DIR' would mistakenly
# recurse into directory DIR.  rm -i (without -r) must fail in that case.
# Fixed in coreutils-4.5.2.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir dir || framework_failure_
echo y > y || framework_failure_


# This must fail.
returns_ 1 rm -i dir < y > /dev/null 2>&1 || fail=1

# The directory must remain.
test -d dir || fail=1

Exit $fail
#!/bin/sh
# Ensure that rm -f existing-non-dir/anything exits successfully

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

touch existing-non-dir || framework_failure_


# With coreutils-6.3, this would exit nonzero.  It should not.
# Example from Andreas Schwab.
rm -f existing-non-dir/f > out 2>&1 || fail=1

Exit $fail
#!/bin/sh
# Ensure that rm works even when run from a directory
# for which the user has no access at all.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

# Skip this test if your system has neither the openat-style functions
# nor /proc/self/fd support with which to emulate them.
require_openat_support_
skip_if_root_

p=$(pwd)
mkdir abs1 abs2 no-access || framework_failure_


set +x
(cd no-access; chmod 0 . && rm -r "$p/abs1" rel "$p/abs2") 2> out && fail=1
test -d "$p/abs1" && fail=1
test -d "$p/abs2" && fail=1

cat <<\EOF > exp || fail=1
rm: cannot remove 'rel': Permission denied
EOF

# AIX 4.3.3 fails with a different diagnostic.
# Transform their diagnostic
#   ...: The file access permissions do not allow the specified action.
# to the expected one:
sed 's/: The file access permissions.*/: Permission denied/'<out>o1;mv o1 out

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test the --interactive[=WHEN] changes added to coreutils 6.0

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

touch file1-1 file1-2 file2-1 file2-2 file3-1 file3-2 file4-1 file4-2 \
  || framework_failure_
# If asked, answer no to first question, then yes to second.
echo 'n
y' > in || framework_failure_
rm -f out err || framework_failure_


# The prompt has a trailing space, and no newline, so an extra
# 'echo .' is inserted after each rm to make it obvious what was asked.

echo 'no WHEN' > err || fail=1
rm -R --interactive file1-* < in >> out 2>> err || fail=1
echo . >> err || fail=1
test -f file1-1 || fail=1
test -f file1-2 && fail=1

echo 'WHEN=never' >> err || fail=1
rm -R --interactive=never file2-* < in >> out 2>> err || fail=1
echo . >> err || fail=1
test -f file2-1 && fail=1
test -f file2-2 && fail=1

echo 'WHEN=once' >> err || fail=1
rm -R --interactive=once file3-* < in >> out 2>> err || fail=1
echo . >> err || fail=1
test -f file3-1 || fail=1
test -f file3-2 || fail=1

echo 'WHEN=always' >> err || fail=1
rm -R --interactive=always file4-* < in >> out 2>> err || fail=1
echo . >> err || fail=1
test -f file4-1 || fail=1
test -f file4-2 && fail=1

echo '-f overrides --interactive' >> err || fail=1
rm -R --interactive=once -f file1-* < in >> out 2>> err || fail=1
echo . >> err || fail=1
test -f file1-1 && fail=1

echo '--interactive overrides -f' >> err || fail=1
rm -R -f --interactive=once file4-* < in >> out 2>> err || fail=1
echo . >> err || fail=1
test -f file4-1 || fail=1

cat <<\EOF > expout || fail=1
EOF
sed 's/@remove_empty/rm: remove regular empty file/g' <<\EOF > experr || fail=1
no WHEN
@remove_empty 'file1-1'? @remove_empty 'file1-2'? .
WHEN=never
.
WHEN=once
rm: remove 2 arguments recursively? .
WHEN=always
@remove_empty 'file4-1'? @remove_empty 'file4-2'? .
-f overrides --interactive
.
--interactive overrides -f
rm: remove 1 argument recursively? .
EOF

compare expout out || fail=1
compare experr err || fail=1

Exit $fail
#!/bin/sh
# Test the -I option added to coreutils 6.0

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir -p dir1-1 dir2-1 dir2-2 || framework_failure_
touch file1-1 file2-1 file2-2 file2-3 file3-1 file3-2 file3-3 file3-4 \
  || framework_failure_
echo y > in-y || framework_failure_
echo n > in-n || framework_failure_
rm -f out err || framework_failure_


# The prompt has a trailing space, and no newline, so an extra
# 'echo .' is inserted after each rm to make it obvious what was asked.

echo 'one file, no recursion' > err || framework_failure_
rm -I file1-* < in-n >> out 2>> err || fail=1
echo . >> err || fail=1
test -f file1-1 && fail=1

echo 'one file, read only, answer no' >> err || framework_failure_
if ls /dev/stdin >/dev/null 2>&1; then
  touch file1-1 || framework_failure_
  chmod a-w file1-1 || framework_failure_
  if ! test -w file1-1; then
    # root won't get prompted
    write_prot_msg1="rm: remove write-protected regular empty file 'file1-1'? "
  fi
  rm ---presume-input-tty -I file1-* < in-n >> out 2>> err || fail=1
  echo . >> err || fail=1
  if test "$write_prot_msg1"; then
    test -f file1-1 || fail=1
  fi
else
  echo '.' >> err || framework_failure_
fi

echo 'three files, no recursion' >> err || framework_failure_
rm -I file2-* < in-n >> out 2>> err || fail=1
echo . >> err || fail=1
test -f file2-1 && fail=1
test -f file2-2 && fail=1
test -f file2-3 && fail=1

echo 'four files, no recursion, answer no' >> err || framework_failure_
rm -I file3-* < in-n >> out 2>> err || fail=1
echo . >> err || fail=1
test -f file3-1 || fail=1
test -f file3-2 || fail=1
test -f file3-3 || fail=1
test -f file3-4 || fail=1

echo 'four files, no recursion, answer yes' >> err || framework_failure_
rm -I file3-* < in-y >> out 2>> err || fail=1
echo . >> err || fail=1
test -f file3-1 && fail=1
test -f file3-2 && fail=1
test -f file3-3 && fail=1
test -f file3-4 && fail=1

echo 'four files, no recursion, 1 read only, answer yes no' >> err \
  || framework_failure_
if ls /dev/stdin >/dev/null 2>&1; then
  touch file3-1 file3-2 file3-3 file3-4 || framework_failure_
  echo non_empty > file3-4 || framework_failure_ # to shorten diagnostic
  chmod a-w file3-4 || framework_failure_
  if ! test -w file3-4; then
    # root won't get prompted
    write_prot_msg2="rm: remove write-protected regular file 'file3-4'? "
  fi
  cat in-y in-n | rm ---presume-input-tty -I file3-* >> out 2>> err || fail=1
  echo . >> err || fail=1
  test -f file3-1 && fail=1
  test -f file3-2 && fail=1
  test -f file3-3 && fail=1
  if test "$write_prot_msg2"; then
    test -f file3-4 || fail=1
  fi
else
  echo 'rm: remove 4 arguments? .' >> err || framework_failure_
fi

echo 'one file, recursion, answer no' >> err || framework_failure_
rm -I -R dir1-* < in-n >> out 2>> err || fail=1
echo . >> err || fail=1
test -d dir1-1 || fail=1

echo 'one file, recursion, answer yes' >> err || framework_failure_
rm -I -R dir1-* < in-y >> out 2>> err || fail=1
echo . >> err || fail=1
test -d dir1-1 && fail=1

echo 'multiple files, recursion, answer no' >> err || framework_failure_
rm -I -R dir2-* < in-n >> out 2>> err || fail=1
echo . >> err || fail=1
test -d dir2-1 || fail=1
test -d dir2-2 || fail=1

echo 'multiple files, recursion, answer yes' >> err || framework_failure_
rm -I -R dir2-* < in-y >> out 2>> err || fail=1
echo . >> err || fail=1
test -d dir2-1 && fail=1
test -d dir2-2 && fail=1

cat <<\EOF > expout || fail=1
EOF
cat <<EOF > experr || fail=1
one file, no recursion
.
one file, read only, answer no
$write_prot_msg1.
three files, no recursion
.
four files, no recursion, answer no
rm: remove 4 arguments? .
four files, no recursion, answer yes
rm: remove 4 arguments? .
four files, no recursion, 1 read only, answer yes no
rm: remove 4 arguments? $write_prot_msg2.
one file, recursion, answer no
rm: remove 1 argument recursively? .
one file, recursion, answer yes
rm: remove 1 argument recursively? .
multiple files, recursion, answer no
rm: remove 2 arguments recursively? .
multiple files, recursion, answer yes
rm: remove 2 arguments recursively? .
EOF

compare expout out || fail=1
compare experr err || fail=1

Exit $fail
#!/bin/sh
# Test "rm -ir".

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

t=t
mkdir -p $t $t/a $t/b $t/c || framework_failure_
> $t/a/a || framework_failure_
> $t/b/bb || framework_failure_
> $t/c/cc || framework_failure_

cat <<EOF > in
y
y
y
y
y
y
y
y
n
n
n
EOF

# Remove all but one of a, b, c -- I doubt that this test can portably
# determine which one was removed based on order of dir entries.
# This is a good argument for switching to a dejagnu-style test suite.
rm --verbose -i -r $t < in > /dev/null 2>&1 || fail=1

# $t should not have been removed.
test -d $t || fail=1

# There should be only one directory left.
case $(echo $t/*) in
  $t/[abc]) ;;
  *) fail=1 ;;
esac

Exit $fail
#!/bin/sh
# Make sure 'chown 0 f; rm f' prompts before removing f.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_


# Skip this test if there is no /dev/stdin file.
ls /dev/stdin >/dev/null 2>&1 \
  || skip_ 'there is no /dev/stdin file'

# Terminate any background processes
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

touch f
chmod 0 f
rm ---presume-input-tty f > out 2>&1 & pid=$!

# Wait a second, to give a buggy rm (as in fileutils-4.0.40)
# enough time to remove the file.
sleep 1

# The file must still exist.
test -f f || fail=1

cleanup_

# Note the trailing 'x' -- so I don't have to have a trailing
# blank in this file :-)
cat > exp <<\EOF
rm: remove write-protected regular empty file 'f'? x
EOF

# Append an 'x' and a newline.
echo x >> out

compare exp out || fail=1

Exit $fail
#!/bin/sh
# In coreutils-8.12, rm,du,chmod, etc. would use too much memory
# when processing a directory with many entries (as in > 100,000).

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm du chmod
expensive_

mkdir d2 \
  && touch d2/f || framework_failure_

# Restrict memory.  Each of these coreutils-8.12 programs would fail
# with a diagnostic like "rm: fts_read failed: Cannot allocate memory".
vm=$(get_min_ulimit_v_ du -sh d2) \
  || skip_ "this shell lacks ulimit support"

# With many files in a single directory...
mkdir d || framework_failure_
seq --format="d/%06g" 200000 | xargs touch || framework_failure_

# Allow 35MiB more memory as for the trivial case above.
(ulimit -v $(($vm + 35000)) && du -sh d) || fail=1

vm=$(get_min_ulimit_v_ chmod -R 700 d2) \
  || skip_ "this shell lacks ulimit support"
(ulimit -v $(($vm + 35000)) && chmod -R 700 d) || fail=1

vm=$(get_min_ulimit_v_ rm -rf d2) \
  || skip_ "this shell lacks ulimit support"
(ulimit -v $(($vm + 35000)) && rm -rf d) || fail=1

Exit $fail
#!/bin/sh
# With rm from coreutils-5.2.1 and earlier, 'rm -r' would mistakenly
# give up too early under some conditions.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
require_root_

mkdir d || framework_failure_
touch d/f || framework_failure_
chown -R $NON_ROOT_USERNAME d || framework_failure_

# Ensure that non-root can access files in root-owned ".".
chmod go=x . || framework_failure_


# This must fail, since '.' is not writable by $NON_ROOT_USERNAME.
returns_ 1 chroot --skip-chdir --user=$NON_ROOT_USERNAME / env PATH="$PATH" \
  rm -rf d 2>/dev/null || fail=1

# d must remain.
test -d d || fail=1

# f must have been removed.
test -f d/f && fail=1

Exit $fail
#!/bin/sh
# Demonstrate rm's new --one-file-system option.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
require_root_

cleanup_()
{
  # When you take the undesirable shortcut of making /etc/mtab a link
  # to /proc/mounts, unmounting "$other_partition_tmpdir" would fail.
  # So, here we unmount a/b instead.
  umount a/b
  rm -rf "$other_partition_tmpdir"
}
. "$abs_srcdir/tests/other-fs-tmpdir"

t=$other_partition_tmpdir
mkdir -p a/b $t/y
mount --bind $t a/b \
  || skip_ "This test requires mount with a working --bind option."

cat <<\EOF > exp || framework_failure_
rm: skipping 'a/b', since it's on a different device
EOF


rm --one-file-system -rf a 2> out && fail=1
test -d $t/y || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Verify --one-file-system does delete within a file system

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir -p a/b

rm --one-file-system -rf a || fail=1
test -d a && fail=1

Exit $fail
#!/bin/sh
# Test "rm -r --verbose".

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir a a/a || framework_failure_
> b || framework_failure_

cat <<\EOF > exp || framework_failure_
removed directory 'a/a'
removed directory 'a'
removed 'b'
EOF

rm --verbose -r a b > out || fail=1

for d in $dirs; do
  test -d $d && fail=1
done

# Compare expected and actual output.
compare exp out || fail=1

Exit $fail
#!/bin/sh
# Test "rm -r --verbose".

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir t t/a t/a/b || framework_failure_
> t/a/f || framework_failure_
> t/a/b/g || framework_failure_

# FIXME: if this fails, it's a framework failure
cat <<\EOF | sort > t/E || framework_failure_
removed directory 't/a'
removed directory 't/a/b'
removed 't/a/b/g'
removed 't/a/f'
EOF

# Note that both the expected output (above) and the actual output lines
# are sorted, because directory entries may be processed in arbitrary order.
rm --verbose -r t/a | sort > t/O || fail=1

if test -d t/a; then
  fail=1
fi

# Compare expected and actual output.
cmp t/E t/O || fail=1

Exit $fail
#!/bin/sh
# Create and remove a directory with more than 254 files.

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# An early version of my rewritten rm failed to remove all of
# the files on SunOS4 when there were 254 or more in a directory.

# And the rm from coreutils-5.0 exposes the same problem when there
# are 338 or more files in a directory on a Darwin-6.5 system

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir t || framework_failure_
cd t || framework_failure_

# Create 500 files (20 * 25).
for i in 0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j; do
  files=
  for j in a b c d e f g h i j k l m n o p q r s t u v w x y; do
    files="$files $i$j"
  done
  touch $files || framework_failure_
done

test -f 0a || framework_failure_
test -f by || framework_failure_
cd .. || framework_failure_

rm -rf t || fail=1
test -d t && fail=1

Exit $fail
#!/bin/sh
# Try to remove '.' and '..' recursively.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir d || framework_failure_
touch d/a || framework_failure_

# Expected error diagnostic as grep pattern.
exp="^rm: refusing to remove '\.' or '\.\.' directory: skipping '.*'\$"

rmtest()
{
  # Try removing - expecting failure.
  rm -fr "$1" 2> err && fail=1

  # Ensure the expected error diagnostic is output.
  grep "$exp" err || { cat err; fail=1; }

  return $fail
}

rmtest 'd/.'     || fail=1
rmtest 'd/./'    || fail=1
rmtest 'd/.////' || fail=1
rmtest 'd/..'    || fail=1
rmtest 'd/../'   || fail=1


# This test is handled more carefully in r-root.sh
# returns_ 1 rm -fr / 2>/dev/null || fail=1

test -f d/a || fail=1

Exit $fail
#!/bin/sh
# Try to remove '/' recursively.

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

# POSIX mandates rm(1) to skip '/' arguments.  This test verifies this mandated
# behavior as well as the --preserve-root and --no-preserve-root options.
# Especially the latter case is a live fire exercise as rm(1) is supposed to
# enter the unlinkat() system call.  Therefore, limit the risk as much
# as possible -- if there's a bug this test would wipe the system out!

# Faint-hearted: skip this test for the 'root' user.
skip_if_root_

# Pull the teeth from rm(1) by intercepting the unlinkat() system call via the
# LD_PRELOAD environment variable.  This requires shared libraries to work.
require_gcc_shared_

# Ensure this variable is unset as it's
# used later in the unlinkat() wrapper.
unset CU_TEST_SKIP_EXIT

# Use gdb to provide further protection by limiting calls to unlinkat().
( timeout 10s gdb --version ) > gdb.out 2>&1
case $(cat gdb.out) in
    *'GNU gdb'*) ;;
    *) skip_ "can't run gdb";;
esac

# Break on a line rather than a symbol, to cater for inline functions
break_src="$abs_top_srcdir/src/remove.c"
break_line=$(grep -n ^excise "$break_src") || framework_failure_
break_line=$(echo "$break_line" | cut -d: -f1) || framework_failure_
break_line="$break_src:$break_line"


cat > k.c <<'EOF' || framework_failure_
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int unlinkat (int dirfd, const char *pathname, int flags)
{
  /* Prove that LD_PRELOAD works: create the evidence file "x".  */
  fclose (fopen ("x", "w"));

  /* Immediately terminate, unless indicated otherwise.  */
  if (! getenv("CU_TEST_SKIP_EXIT"))
    _exit (0);

  /* Pretend success.  */
  return 0;
}
EOF

# Then compile/link it:
gcc_shared_ k.c k.so \
  || framework_failure_ 'failed to build shared library'

# Note breakpoint commands don't work in batch mode
# https://sourceware.org/bugzilla/show_bug.cgi?id=10079
# So we use python to script behavior upon hitting the breakpoint
cat > bp.py <<'EOF.py' || framework_failure_
def breakpoint_handler (event):
  if not isinstance(event, gdb.BreakpointEvent):
    return
  hit_count = event.breakpoints[0].hit_count
  if hit_count == 1:
    gdb.execute('shell touch excise.break')
    gdb.execute('continue')
  elif hit_count > 2:
    gdb.write('breakpoint hit twice already')
    gdb.execute('quit 1')
  else:
    gdb.execute('continue')

gdb.events.stop.connect(breakpoint_handler)
EOF.py

# In order of the sed expressions below, this cleans:
#
# 1. gdb uses the full path when running rm, so remove the leading dirs.
# 2. For some of the "/" synonyms, the error diagnostic slightly differs from
# that of the basic "/" case (see gnulib's fts_open' and ROOT_DEV_INO_WARN):
#   rm: it is dangerous to operate recursively on 'FILE' (same as '/')
# Strip that part off for the following comparison.
clean_rm_err_()
{
  sed "s/.*rm: /rm: /; \
       s/\(rm: it is dangerous to operate recursively on\).*$/\1 '\/'/"
}

#-------------------------------------------------------------------------------
# exercise_rm_r_root: shell function to test "rm -r '/'"
# The caller must provide the FILE to remove as well as any options
# which should be passed to 'rm'.
# Paranoia mode on:
# For the worst case where both rm(1) would fail to refuse to process the "/"
# argument (in the cases without the --no-preserve-root option), and
# intercepting the unlinkat(1) system call would fail (which actually already
# has been proven to work above), and the current non root user has
# write access to "/", limit the damage to the current file system via
# the --one-file-system option.
# Furthermore, run rm(1) via gdb that limits the number of unlinkat() calls.
exercise_rm_r_root ()
{
  # Remove the evidence files; verify that.
  rm -f x excise.break || framework_failure_
  test -f x && framework_failure_
  test -f excise.break && framework_failure_

  local skip_exit=
  if [ "$CU_TEST_SKIP_EXIT" = 1 ]; then
    # Pass on this variable into 'rm's environment.
    skip_exit='CU_TEST_SKIP_EXIT=1'
  fi

  gdb -nx --batch-silent -return-child-result				\
    --eval-command="set exec-wrapper					\
                     env 'LD_PRELOAD=$LD_PRELOAD:./k.so' $skip_exit"	\
    --eval-command="break '$break_line'"				\
    --eval-command='source bp.py'					\
    --eval-command="run -rv --one-file-system $*"			\
    --eval-command='quit'						\
    rm < /dev/null > out 2> err.t

  ret=$?

  clean_rm_err_ < err.t > err || ret=$?

  return $ret
}

# Verify that "rm -r dir" basically works.
mkdir   dir || framework_failure_
rm -r   dir || framework_failure_
test -d dir && framework_failure_

# Now verify that intercepting unlinkat() works:
# rm(1) must succeed as before, but this time both the evidence file "x"
# and the test file / directory must still exist afterward.
mkdir dir || framework_failure_
> file    || framework_failure_

skip=
for file in dir file ; do
  exercise_rm_r_root "$file" || skip=1
  test -e "$file"            || skip=1
  test -f x                  || skip=1
  test -f excise.break       || skip=1  # gdb works and breakpoint hit
  compare /dev/null err      || skip=1

  test "$skip" = 1 \
    && { cat out; cat err; \
         skip_ "internal test failure: maybe LD_PRELOAD or gdb doesn't work?"; }
done

# "rm -r /" without --no-preserve-root should output the following
# diagnostic error message.
cat <<EOD > exp || framework_failure_
rm: it is dangerous to operate recursively on '/'
rm: use --no-preserve-root to override this failsafe
EOD

#-------------------------------------------------------------------------------
# Exercise "rm -r /" without and with the --preserve-root option.
# Exercise various synonyms of "/" including symlinks to it.
# Expect a non-Zero exit status.
# Prepare a few symlinks to "/".
ln -s /        rootlink  || framework_failure_
ln -s rootlink rootlink2 || framework_failure_
ln -sr /       rootlink3 || framework_failure_

for opts in           \
  '/'                 \
  '--preserve-root /' \
  '//'                \
  '///'               \
  '////'              \
  'rootlink/'         \
  'rootlink2/'        \
  'rootlink3/'        ; do

  returns_ 1 exercise_rm_r_root $opts || fail=1

  # Expect nothing in 'out' and the above error diagnostic in 'err'.
  # As rm(1) should have skipped the "/" argument, it does not call unlinkat().
  # Therefore, the evidence file "x" should not exist.
  compare /dev/null out || fail=1
  compare exp       err || fail=1
  test -f x             && fail=1

  # Do nothing more if this test failed.
  test $fail = 1 && { cat out; cat err; Exit $fail; }
done

#-------------------------------------------------------------------------------
# Exercise "rm -r file1 / file2".
# Expect a non-Zero exit status representing failure to remove "/",
# yet 'file1' and 'file2' should be removed.
> file1 || framework_failure_
> file2 || framework_failure_

# Now that we know that 'rm' won't call the unlinkat() system function for "/",
# we could probably execute it without the LD_PRELOAD'ed safety net.
# Nevertheless, it's still better to use it for this test.
# Tell the unlinkat() replacement function to not _exit(0) immediately
# by setting the following variable.
CU_TEST_SKIP_EXIT=1

returns_ 1 exercise_rm_r_root --preserve-root file1 '/' file2 || fail=1

unset CU_TEST_SKIP_EXIT

cat <<EOD > out_removed
removed 'file1'
removed 'file2'
EOD

# The above error diagnostic should appear in 'err'.
# Both 'file1' and 'file2' should be removed.  Simply verify that in the
# "out" file, as the replacement unlinkat() dummy did not remove them.
# Expect the evidence file "x" to exist.
compare out_removed out || fail=1
compare exp         err || fail=1
test -f x               || fail=1

# Do nothing more if this test failed.
test $fail = 1 && { cat out; cat err; Exit $fail; }

#-------------------------------------------------------------------------------
# Exercise various synonyms of "/" having a trailing "." or ".." in the name.
# This triggers another check in the code first and therefore leads to a
# different diagnostic.  However, we want to test anyway to protect against
# future reordering of the checks in the code.
# Expect that other error diagnostic in 'err' and nothing in 'out'.
# Expect a non-Zero exit status.  The evidence file "x" should not exist.
for file in      \
  '//.'          \
  '/./'          \
  '/.//'         \
  '/../'         \
  '/.././'       \
  '/etc/..'      \
  'rootlink/..'  \
  'rootlink2/.'  \
  'rootlink3/./' ; do

  test -d "$file" || continue   # if e.g. /etc does not exist.

  returns_ 1 exercise_rm_r_root --preserve-root "$file" || fail=1

  grep "rm: refusing to remove '\.' or '\.\.' directory: skipping" err \
    || fail=1

  compare /dev/null out  || fail=1
  test -f x              && fail=1

  # Do nothing more if this test failed.
  test $fail = 1 && { cat out; cat err; Exit $fail; }
done

#-------------------------------------------------------------------------------
# Until now, it was all just fun.
# Now exercise the --no-preserve-root option with which rm(1) should enter
# the intercepted unlinkat() system call.
# As the interception code terminates the process immediately via _exit(0),
# the exit status should be 0.
# Use the option --interactive=never to bypass the following prompt:
#   "rm: descend into write-protected directory '/'?"
exercise_rm_r_root  --interactive=never --no-preserve-root '/' \
  || fail=1

# The 'err' file should not contain the above error diagnostic.
grep "rm: it is dangerous to operate recursively on '/'" err && fail=1

# Instead, rm(1) should have called the intercepted unlinkat() function,
# i.e., the evidence file "x" should exist.
test -f x || fail=1

test $fail = 1 && { cat out; cat err; }

Exit $fail
#!/bin/sh
# Ensure that rm -f nonexistent-file-on-read-only-fs succeeds.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
require_root_

cwd=$(pwd)
cleanup_() { cd /; umount "$cwd/mnt"; }

skip=0
# Create a file system, then mount it.
dd if=/dev/zero of=blob bs=8192 count=200 > /dev/null 2>&1 \
                                             || skip=1
mkdir mnt                                    || skip=1
mkfs -t ext2 -F blob \
  || skip_ "failed to create ext2 file system"

mount -oloop blob mnt                        || skip=1
echo test > mnt/f                            || skip=1
test -s mnt/f                                || skip=1
mount -o remount,loop,ro mnt                 || skip=1

test $skip = 1 \
  && skip_ "insufficient mount/ext2 support"

# Applying rm -f to a nonexistent file on a read-only file system must succeed.
rm -f mnt/no-such > out 2>&1 || fail=1
# It must produce no diagnostic.
compare /dev/null out || fail=1

# However, trying to remove an existing file must fail.
rm -f mnt/f > out 2>&1 && fail=1
# with a diagnostic.
compare /dev/null out && fail=1

Exit $fail
#!/bin/sh
# Exercise the Darwin/MacOS bug worked around on 2006-09-29,
# whereby rm would fail to remove all entries in a directory.

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

# Create a directory containing many files.
# What counts is a combination of the number of files and
# the lengths of their names.  For details, see
# http://lists.gnu.org/archive/html/bug-coreutils/2006-09/msg00326.html
mkdir b || framework_failure_
cd b || framework_failure_
for i in $(seq 1 250); do
  touch $(printf %040d $i) || framework_failure_
done
cd .. || framework_failure_


# On a buggy system, this would fail with the diagnostic,
# "cannot remove directory 'b': Directory not empty"
rm -rf b  || fail=1

test -d b && fail=1

Exit $fail
#!/bin/sh
# exercise another small part of remove.c

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

mkdir -p b/a/p b/c b/d || framework_failure_
chmod ug-w b/a || framework_failure_


# This should fail.
rm -rf b > out 2>&1 && fail=1
cat <<\EOF > exp
rm: cannot remove directory 'b/a/p': Permission denied
EOF

# On some systems, rm doesn't have enough information to
# say it's a directory.
cat <<\EOF > exp2
rm: cannot remove 'b/a/p': Permission denied
EOF

cmp out exp > /dev/null 2>&1 || {
  cmp out exp2 || fail=1
  }
test $fail = 1 && compare exp out

test -d b/a/p || fail=1
test -d b/c && fail=1
test -d b/d && fail=1

Exit $fail
#!/bin/sh
# exercise another small part of remove.c

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

mkdir -p a/0 || framework_failure_
mkdir -p a/1/2 b/3 || framework_failure_
mkdir a/2 a/3 || framework_failure_
chmod u-x a/1 b || framework_failure_


# Exercise two separate code paths -- though both result
# in the same sort of diagnostic.
# Both of these should fail.
rm -rf a b > out 2>&1 && fail=1
cat <<\EOF > exp
rm: cannot remove 'a/1': Permission denied
rm: cannot remove 'b': Permission denied
EOF

cat <<\EOF > exp-solaris
rm: cannot remove 'a/1/2': Permission denied
rm: cannot remove 'b/3': Permission denied
EOF

cmp out exp > /dev/null 2>&1 \
    || { cmp out exp-solaris > /dev/null 2>&1 || fail=1; }
test $fail = 1 && compare exp out

test -d a/0 && fail=1
test -d a/1 || fail=1
test -d a/2 && fail=1
test -d a/3 && fail=1

chmod u+x b
test -d b/3 || fail=1

Exit $fail
#!/bin/sh
# exercise another small part of remove.c

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

mkdir -p z || framework_failure_
cd z || framework_failure_
touch empty empty-u || framework_failure_
echo not-empty > fu
ln -s empty-f slink
ln -s . slinkdot
mkdir d du || framework_failure_
chmod u-w fu du empty-u || framework_failure_
cd ..


cat <<EOF > in
y
y
y
y
y
y
y
y
y
EOF

# Both of these should fail.
rm -ir z < in > out 2>&1 || fail=1

# Given input like 'rm: ...? rm: ...? ' (no trailing newline),
# the 'head...' part of the pipeline below removes the trailing space, so
# that sed doesn't have to deal with a line lacking a terminating newline.
# This avoids a bug whereby some vendor-provided (Tru64) versions of sed
# would mistakenly tack a newline onto the end of the output.
tr '?' '\n' < out | head --bytes=-1 | sed 's/^ //' |sort > o2
mv o2 out

sort <<EOF > exp || fail=1
rm: descend into directory 'z'
rm: remove regular empty file 'z/empty'
rm: remove write-protected regular file 'z/fu'
rm: remove write-protected regular empty file 'z/empty-u'
rm: remove symbolic link 'z/slink'
rm: remove symbolic link 'z/slinkdot'
rm: remove directory 'z/d'
rm: remove write-protected directory 'z/du'
rm: remove directory 'z'
EOF

compare exp out || fail=1

test -d z && fail=1

Exit $fail
#!/bin/sh
# ensure that 'rm dir' fails without --recursive

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

mkdir dir || framework_failure_


# This should fail.
returns_ 1 rm dir > /dev/null 2>&1 || fail=1

test -d dir || fail=1

Exit $fail
#!/bin/sh
# a basic test of rm -ri

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

mkdir -p d/e || framework_failure_
cat <<EOF > in || framework_failure_
y
y
y
EOF

cat <<\EOF > exp || framework_failure_
rm: descend into directory 'd'
rm: remove directory 'd/e'
rm: remove directory 'd'
EOF


rm -ir d < in > out 2>&1 || fail=1

# Given input like 'rm: ...? rm: ...? ' (no trailing newline),
# the 'head...' part of the pipeline below removes the trailing space, so
# that sed doesn't have to deal with a line lacking a terminating newline.
# This avoids a bug whereby some vendor-provided (Tru64) versions of sed
# would mistakenly tack a newline onto the end of the output.
tr '?' '\n' < out | head --bytes=-1 | sed 's/^ //' > o2
mv o2 out

# Make sure it's been removed.
test -d d && fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Make sure that rm -r '' fails.

# Copyright (C) 1997-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# On SunOS 4.1.3, running rm -r '' in a nonempty directory may
# actually remove files with names of entries in the current directory
# but relative to '/' rather than relative to the current directory.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

returns_ 1 rm -r '' > /dev/null 2>&1 || fail=1

Exit $fail
#!/bin/sh
# exercise one small part of remove.c

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

mkdir -p a/b || framework_failure_
chmod u-r a


# This should fail.
rm -rf a > out 2>&1 && fail=1
cat <<\EOF > exp
rm: cannot remove 'a': Permission denied
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that rm works even from an unreadable working directory.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm
skip_if_root_

mkdir -p a/1 b c d/2 e/3 || framework_failure_


t=$(pwd)
cd c
chmod u=x,go= .

# With coreutils-5.2.1, this would get a failed assertion.
rm -r "$t/a" "$t/b" || fail=1

# With coreutils-5.2.1, this would get the following:
#   rm: cannot get current directory: Permission denied
#   rm: failed to return to initial working directory: Bad file descriptor
rm -r "$t/d" "$t/e" || fail=1

test -d "$t/a" && fail=1
test -d "$t/b" && fail=1
test -d "$t/d" && fail=1
test -d "$t/e" && fail=1

Exit $fail
#!/bin/sh
# avoid extra slashes in --verbose output

# Copyright (C) 2007-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rm

mkdir a || framework_failure_
touch a/x || framework_failure_


rm --verbose -r a/// > out || fail=1
cat <<\EOF > exp || fail=1
removed 'a/x'
removed directory 'a/'
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# For unwritable directory 'd', 'rmdir -p d d/e/f' would emit
# diagnostics but would not fail.  Fixed in 5.1.2.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rmdir

mkdir d d/e d/e/f || framework_failure_
chmod a-w d || framework_failure_


# This rmdir command outputs two diagnostics.
# Before coreutils-5.1.2, it would mistakenly exit successfully.
# As of coreutils-5.1.2, it fails, as required.
returns_ 1 rmdir -p d d/e/f 2> /dev/null || fail=1

Exit $fail
#!/bin/sh
# make sure rmdir's --ignore-fail-on-non-empty option works

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rmdir

cwd=$(pwd)
mkdir -p "$cwd/a/b/c" "$cwd/a/x" || framework_failure_

rmdir -p --ignore-fail-on-non-empty "$cwd/a/b/c" || fail=1
# $cwd/a/x should remain
test -d "$cwd/a/x" || fail=1
# $cwd/a/b and $cwd/a/b/c should be gone
test -d "$cwd/a/b" && fail=1
test -d "$cwd/a/b/c" && fail=1

Exit $fail
#!/bin/sh
# make sure rmdir -p works on a directory specified with a trailing slash

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ rmdir

mkdir dir || framework_failure_


# Prior to coreutils-4.5.2, this would fail with the following:
# rmdir: 'dir': No such file or directory
rmdir -p dir/ || fail=1

Exit $fail
#!/bin/sh
# show that 'split --additional-suffix=SUFFIX' works.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split

printf '1\n2\n3\n4\n5\n' > in || framework_failure_

split --lines=2 --additional-suffix=.txt in > out || fail=1
cat <<\EOF > exp-1
1
2
EOF
cat <<\EOF > exp-2
3
4
EOF
cat <<\EOF > exp-3
5
EOF

compare exp-1 xaa.txt || fail=1
compare exp-2 xab.txt || fail=1
compare exp-3 xac.txt || fail=1

# Additional suffix must not contain slash
returns_ 1 split --lines=2 --additional-suffix=a/b in 2>/dev/null >out || fail=1

Exit $fail
#!/bin/sh
# test splitting into 3 chunks

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split

# N can be greater than the file size
# in which case no data is extracted, or empty files are written
split -n 10 /dev/null || fail=1
test "$(stat -c %s x* | uniq -c | sed 's/^ *//; s/ /x/')" = "10x0" || fail=1
rm -f x??

# Ensure --elide-empty-files is honored
split -e -n 10 /dev/null || fail=1
stat x?? 2>/dev/null && fail=1

printf '1\n2\n3\n4\n5\n' > input || framework_failure_

for file in input /proc/version /sys/kernel/profiling; do
  test -f $file || continue

  split -n 3 $file > out || fail=1
  split -n 1/3 $file > b1 || fail=1
  split -n 2/3 $file > b2 || fail=1
  split -n 3/3 $file > b3 || fail=1

  case $file in
    input)
      printf '1\n2' > exp-1
      printf '\n3\n' > exp-2
      printf '4\n5\n' > exp-3

      compare exp-1 xaa || fail=1
      compare exp-2 xab || fail=1
      compare exp-3 xac || fail=1
      ;;
  esac

  compare xaa b1 || fail=1
  compare xab b2 || fail=1
  compare xac b3 || fail=1
  cat xaa xab xac | compare - $file || fail=1
  test -f xad && fail=1
done

Exit $fail
#!/bin/sh
# split must fail when given length/count of zero.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split
getlimits_

touch in || framework_failure_


split -a 0 in 2> /dev/null || fail=1
returns_ 1 split -b 0 in 2> /dev/null || fail=1
returns_ 1 split -C 0 in 2> /dev/null || fail=1
returns_ 1 split -l 0 in 2> /dev/null || fail=1
returns_ 1 split -n 0 in 2> /dev/null || fail=1
returns_ 1 split -n 1/0 in 2> /dev/null || fail=1
returns_ 1 split -n 0/1 in 2> /dev/null || fail=1
returns_ 1 split -n 2/1 in 2> /dev/null || fail=1

# Make sure -C doesn't create empty files.
rm -f x?? || fail=1
echo x | split -C 1 || fail=1
test -f xaa && test -f xab || fail=1
test -f xac && fail=1

# Make sure that the obsolete -N notation still works
split -1 in 2> /dev/null || fail=1

# Then make sure that -0 evokes a failure.
returns_ 1 split -0 in 2> /dev/null || fail=1

split --lines=$UINTMAX_MAX in || fail=1
split --bytes=$OFF_T_MAX in || fail=1
returns_ 1 split --line-bytes=$OFF_T_OFLOW 2> /dev/null in || fail=1
returns_ 1 split --line-bytes=$SIZE_OFLOW 2> /dev/null in || fail=1
if truncate -s$SIZE_OFLOW large; then
  # Ensure we can split chunks of a large file on 32 bit hosts
  split --number=$SIZE_OFLOW/$SIZE_OFLOW large >/dev/null || fail=1
fi
split --number=r/$UINTMAX_MAX/$UINTMAX_MAX </dev/null >/dev/null || fail=1
returns_ 1 split --number=r/$UINTMAX_OFLOW </dev/null 2>/dev/null || fail=1

# Make sure that a huge obsolete option evokes the right failure.
split -99999999999999999991 2> out

# On losing systems (x86 Solaris 5.9 c89), we get a message like this:
#   split: line count option -9999999999... is too large
# while on most, we get this:
#   split: line count option -99999999999999999991... is too large
# so map them both to -99*.
sed 's/99[19]*/99*/' out > out-t
mv -f out-t out

cat <<\EOF > exp
split: line count option -99*... is too large
EOF
compare exp out || fail=1

# Make sure split fails when it can't read input
# (the current directory in this case)
if ! cat . >/dev/null; then
  # can't read() directories
  returns_ 1 split . || fail=1
fi

Exit $fail
#!/bin/sh
# Exercise split's new --filter option.

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split
xz --version || skip_ "xz (better than gzip/bzip2) required"

for total_n_lines in 5 3000 20000; do
  seq $total_n_lines > in || framework_failure_
  for i in 2 51 598; do

    # Don't create too many files/processes.
    # Starting 10k (or even "only" 1500) processes would take a long time,
    # and would provide little added benefit.
    case $i:$total_n_lines in 2:5);; *) continue;; esac

    split -l$i --filter='xz -1 > $FILE.xz' in out- || fail=1
    xz -dc out-* > out || fail=1
    compare in out || fail=1
    rm -f out*
  done
  rm -f in
done

# Show how --elide-empty-files works with --filter:
# split does not run the command (and effectively elides the file)
# only when the output to that command would have been empty.
split -e -n 10 --filter='xz > $FILE.xz' /dev/null || fail=1
stat x?? 2>/dev/null && fail=1

# Ensure this invalid combination is flagged
returns_ 1 split -n 1/2 --filter='true' /dev/null 2>&1 || fail=1

# Ensure SIGPIPEs sent by the children don't propagate back
# where they would result in a non zero exit from split.
yes | head -n200K | split -b1G --filter='head -c1 >/dev/null' || fail=1

# Ensure that endless input is ignored when all filters finish
timeout 10 yes | split --filter="head -c1 >/dev/null" -n r/1 || fail=1
timeout 10 split --filter="head -c1 >/dev/null" -n 1 /dev/zero || fail=1

Exit $fail
#!/bin/sh
# ensure split doesn't overwrite input with output.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split

seq 10 | tee exp-1 > xaa
ln -s xaa in2
ln xaa in3

returns_ 1 split -C 6 xaa || fail=1
returns_ 1 split -C 6 in2 || fail=1
returns_ 1 split -C 6 in3 || fail=1
returns_ 1 split -C 6 - < xaa || fail=1

compare exp-1 xaa || fail=1

Exit $fail
#!/bin/sh
# test splitting into newline delineated chunks (-n l/...)

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split

# invalid number of chunks
echo "split: invalid number of chunks: '1o'" > exp
split -n l/1o 2>err && fail=1
compare exp err || fail=1

echo "split: -: cannot determine file size" > exp
echo | split -n l/1 2>err && fail=1
compare exp err || fail=1

# N can be greater than the file size
# in which case no data is extracted, or empty files are written
split -n l/10 /dev/null || fail=1
test "$(stat -c %s x* | uniq -c | sed 's/^ *//; s/ /x/')" = "10x0" || fail=1
rm x??

# Ensure the correct number of files written
# even if there is more data than the reported file size
split -n l/2 /dev/zero
test "$(stat -c %s x* | wc -l)" = '2' || fail=1
rm x??

# Repeat the above,  but with 1/2, not l/2:
split -n 1/2 /dev/zero || fail=1

# Ensure --elide-empty-files is honored
split -e -n l/10 /dev/null || fail=1
stat x?? 2>/dev/null && fail=1

# 80 bytes. ~ transformed to \n below
lines=\
12345~1~12345~1~12345~1~12345~1~12345~~~12345~1~12345~1~12345~1~12345~1~12345~1~

printf "%s" "$lines" | tr '~' '\n' > in || framework_failure_

echo "split: invalid chunk number: '16'" > exp
split -n l/16/15 in 2>err.t && fail=1
sed "s/': .*/'/" < err.t > err || framework_failure_
compare exp err || fail=1

printf '%s' "\
14 16 09 15 16 10
14 08 08 10 14 08 08 10
06 08 08 02 06 08 08 02 06 08 08 10
06 08 02 06 08 00 08 02 06 08 02 06 08 00 10
06 00 08 00 02 06 00 02 06 00 08 00 01 07 00 02 06 00 08 00 02 16
" > exp || framework_failure_

sed 's/00 *//g' exp > exp.elide_empty || framework_failure_

DEBUGGING=
test "$DEBUGGING" && test "$VERBOSE" && set +x
for ELIDE_EMPTY in '' '-e'; do
  for IO_BLKSIZE in 1 2 5 10 80 100; do
    > out
    test "$DEBUGGING" && printf "\n---io-blk-size=$IO_BLKSIZE $ELIDE_EMPTY\n"
    for N in 6 8 12 15 22; do
      rm -f x*

      if test -z "$ELIDE_EMPTY"; then
        split ---io-blksize=$IO_BLKSIZE -n l/2/$N in > chunk.k
        stat x* 2>/dev/null && fail=1
      fi

      split ---io-blksize=$IO_BLKSIZE $ELIDE_EMPTY -n l/$N in
      echo $(stat -c "%02s" x*) >> out

      if test -z "$ELIDE_EMPTY"; then
        compare chunk.k xab || fail=1
      fi

      if test "$DEBUGGING"; then
        # Output partition pattern
        size=$(printf "%s" "$lines" | wc -c)
        chunk_size=$(($size/$N))
        end_size=$(($chunk_size + ($size % $N)))
        {
          yes "$(printf %${chunk_size}s ])" | head -n$(($N-1))
          printf %${end_size}s ]
        } | tr -d '\n' | sed "s/\\(^.\\{1,$size\\}\\).*/\\1/"
        echo

        # Output pattern generated for comparison
        for s in $(stat -c "%s" x*); do
          #s=0 transitions are not shown
          test "$m" = "_" && m=- || m=_
          printf "%${s}s" '' | tr ' ' $m
        done
        echo

        # Output lines for reference
        echo "$lines"
      fi
    done
    test -z "$ELIDE_EMPTY" && EXP=exp || EXP=exp.elide_empty
    compare out $EXP || fail=1
  done
done
test "$DEBUGGING" && test "$VERBOSE" && set -x


# Check extraction of particular chunks
> out
printf '1\n12345\n' > exp
split -n l/13/15 in > out
compare exp out || fail=1
> out
printf '' > exp
split -n l/14/15 in > out
compare exp out || fail=1
> out
printf '1\n12345\n1\n' > exp
split -n l/15/15 in > out
compare exp out || fail=1

# test input with no \n at end
printf '12\n34\n5' > in
printf '5' > exp
split -n l/7/7 in > out
compare exp out || fail=1

Exit $fail
#!/bin/sh
# test -C, --lines-bytes

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split

vm=$(get_min_ulimit_v_ split -C 'K' /dev/null) \
  || skip_ "this shell lacks ulimit support"

# Ensure memory is not allocated up front
(ulimit -v $vm && split -C 'G' /dev/null) || fail=1


# Ensure correct operation with various split and buffer size combinations

lines=\
1~2222~3~4

printf '%s' "$lines" | tr '~' '\n' > in || framework_failure_

cat <<\EOF > splits_exp
1 1 1 1 1 1 1 1 1 1
2 2 2 1 2 1
2 3 2 2 1
2 4 3 1
2 5 3
2 5 3
7 3
7 3
9 1
9 1
10
EOF

seq 0 9 | tr -d '\n' > no_eol_in

cat <<\EOF > no_eol_splits_exp
1 1 1 1 1 1 1 1 1 1
2 2 2 2 2
3 3 3 1
4 4 2
5 5
6 4
7 3
8 2
9 1
10
10
EOF

for b in $(seq 10); do
  > splits
  > no_eol_splits
  for s in $(seq 11); do
    rm x??
    split ---io=$b -C$s in || fail=1
    cat x* > out || framework_failure_
    compare in out || fail=1
    stat -c %s x* | paste -s -d ' ' >> splits

    rm x??
    split ---io=$b -C$s no_eol_in || fail=1
    cat x* > out || framework_failure_
    cat xaa
    compare no_eol_in out || fail=1
    stat -c %s x* | paste -s -d ' ' >> no_eol_splits
  done
  compare splits_exp splits || fail=1
  compare no_eol_splits_exp no_eol_splits || fail=1
done

Exit $fail
#!/bin/sh
# show that 'split --lines=2' works.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split

printf '1\n2\n3\n4\n5\n' > in || framework_failure_

split --lines=2 in > out || fail=1
cat <<\EOF > exp-1
1
2
EOF
cat <<\EOF > exp-2
3
4
EOF
cat <<\EOF > exp-3
5
EOF

compare exp-1 xaa || fail=1
compare exp-2 xab || fail=1
compare exp-3 xac || fail=1
test -f xad && fail=1

Exit $fail
#!/bin/sh
# Show that split --numeric-suffixes[=from] works.

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split

# Check default start from 0
printf '1\n2\n3\n4\n5\n' > in || framework_failure_
split --numeric-suffixes --lines=2 in || fail=1
cat <<\EOF > exp-1
1
2
EOF
cat <<\EOF > exp-2
3
4
EOF
cat <<\EOF > exp-3
5
EOF
compare exp-1 x00 || fail=1
compare exp-2 x01 || fail=1
compare exp-3 x02 || fail=1

# Check --numeric-suffixes=X
split --numeric-suffixes=1 --lines=2 in || fail=1
cat <<\EOF > exp-1
1
2
EOF
cat <<\EOF > exp-2
3
4
EOF
cat <<\EOF > exp-3
5
EOF
compare exp-1 x01 || fail=1
compare exp-2 x02 || fail=1
compare exp-3 x03 || fail=1

# Check that split failed when suffix length is not large enough for
# the numerical suffix start value
returns_ 1 split -a 3 --numeric-suffixes=1000 in 2>/dev/null || fail=1

# check invalid --numeric-suffixes start values are flagged
returns_ 1 split --numeric-suffixes=-1 in 2> /dev/null || fail=1
returns_ 1 split --numeric-suffixes=one in 2> /dev/null || fail=1

Exit $fail
#!/bin/sh
# test splitting into round-robin chunks

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split

# N can be greater than the file size
# in which case no data is extracted, or empty files are written
split -n r/10 /dev/null || fail=1
test "$(stat -c %s x* | uniq -c | sed 's/^ *//; s/ /x/')" = "10x0" || fail=1
rm x??

# Ensure --elide-empty-files is honored
split -e -n r/10 /dev/null || fail=1
stat x?? 2>/dev/null && fail=1

printf '1\n2\n3\n4\n5\n' > in || framework_failure_

split -n r/3 in > out || fail=1
compare /dev/null out || fail=1

split -n r/1/3 in > r1 || fail=1
split -n r/2/3 in > r2 || fail=1
split -n r/3/3 in > r3 || fail=1

printf '1\n4\n' > exp-1
printf '2\n5\n' > exp-2
printf '3\n' > exp-3

compare exp-1 xaa || fail=1
compare exp-2 xab || fail=1
compare exp-3 xac || fail=1
compare exp-1 r1 || fail=1
compare exp-2 r2 || fail=1
compare exp-3 r3 || fail=1
test -f xad && fail=1

# Test input without trailing \n
printf '1\n2\n3\n4\n5' | split -n r/2/3 > out
printf '2\n5' > exp
compare exp out || fail=1

# Ensure we fall back to appending to a file at a time
# if we hit the limit for the number of open files.
rm x*
(ulimit -n 20 && yes | head -n90 | split -n r/30 ) || fail=1
test "$(stat -c %s x* | uniq -c | sed 's/^ *//; s/ /x/')" = "30x6" || fail=1

Exit $fail
#!/bin/sh
# test split with custom record separators

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split

NL='
'

for sep in "$NL" '\0' ':'; do

  test "$sep" = "$NL" && tr='\n' || tr="$sep"

  for mode in '--lines=2' '--line-bytes=4' '--number=l/3' '--number=r/3'; do

    # Generate in default mode for comparison
    printf '1\n2\n3\n4\n5\n' > in || framework_failure_
    split $mode in || fail=1
    tr '\n' "$tr" < xaa > exp1
    tr '\n' "$tr" < xab > exp2
    tr '\n' "$tr" < xac > exp3

    rm -f x??

    # Generate output with specified --separator
    printf '1\n2\n3\n4\n5\n' | tr '\n' "$tr" > in || framework_failure_
    split $mode -t "$sep" in || fail=1

    compare exp1 xaa || fail=1
    compare exp2 xab || fail=1
    compare exp3 xac || fail=1
    test -f xad && fail=1
  done

done


#
# Test usage edge cases
#

# Should fail: '-t' requires an argument
returns_ 1 split -t </dev/null ||
  { warn_ "-t without argument did not trigger an error" ; fail=1 ; }

# should fail: multi-character separator
returns_ 1 split -txx </dev/null ||
  { warn_ "-txx did not trigger an error" ; fail=1 ; }

# should fail: different separators used
returns_ 1 split -ta -tb </dev/null ||
  { warn_ "-ta -tb did not trigger an error" ; fail=1 ; }

# should fail: different separators used, including default
returns_ 1 split -t"$NL" -tb </dev/null ||
  { warn_ "-t\$NL -tb did not trigger an error" ; fail=1 ; }

# should not fail: same separator used multiple times
split -t: -t: </dev/null ||
  { warn_ "-t: -t: triggered an error" ; fail=1 ; }


Exit $fail
#!/bin/sh
# Test the suffix auto width functionality

# Copyright (C) 2012-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split


# ensure auto widening is off when start number specified
truncate -s12 file.in || framework_failure_
returns_ 1 split file.in -b1 --numeric=89 || fail=1
test "$(ls -1 x* | wc -l)" = 11 || fail=1
rm -f x*

# ensure auto widening works when no start num specified
truncate -s91 file.in || framework_failure_
for prefix in 'x' 'xx' ''; do
    for add_suffix in '.txt' ''; do
      split file.in "$prefix" -b1 --numeric --additional-suffix="$add_suffix" \
        || fail=1
      test "$(ls -1 $prefix*[0-9]*$add_suffix | wc -l)" = 91 || fail=1
      test -e "${prefix}89$add_suffix" || fail=1
      test -e "${prefix}9000$add_suffix" || fail=1
      rm -f $prefix*[0-9]*$add_suffix
    done
done

# ensure auto width with --number and start num < number of files
# That's the single run use case which is valid to adjust suffix len
truncate -s100 file.in || framework_failure_
split --numeric-suffixes=1 --number=r/100 file.in || fail=1
rm -f x*

# ensure no auto width with --number and start num >= number of files
# That's the multi run use case which is invalid to adjust suffix len
# as that would result in an incorrect order for the total output file set
returns_ 1 split --numeric-suffixes=100 --number=r/100 file.in || fail=1

Exit $fail
#!/bin/sh
# Show that split -a works.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ split

a_z='a b c d e f g h i j k l m n o p q r s t u v w x y z'

# Generate a 27-byte file
printf %s $a_z 0 |tr -d ' ' > in || framework_failure_

files=
for i in $a_z; do
  files="${files}xa$i "
done
files="${files}xba"

for f in $files; do
  printf "creating file '%s'"'\n' $f
done > exp || framework_failure_

echo split: output file suffixes exhausted \
  > exp-too-short || framework_failure_


# This should fail.
split -b 1 -a 1 in 2> err && fail=1
test -f xa || fail=1
test -f xz || fail=1
test -f xaa && fail=1
test -f xaz && fail=1
rm -f x*
compare exp-too-short err || fail=1

# With a longer suffix, it must succeed.
split --verbose -b 1 -a 2 in > err || fail=1
compare exp err || fail=1

# Ensure that xbb is *not* created.
test -f xbb && fail=1

# Ensure that the 27 others files *were* created, and with expected contents.
n=1
for f in $files; do
  expected_byte=$(cut -b $n in)
  b=$(cat $f) || fail=1
  test "$b" = "$expected_byte" || fail=1
  n=$(expr $n + 1)
done

# Ensure that -a is independent of -[bCl]
split -a2 -b1000 < /dev/null || fail=1
split -a2 -l1000 < /dev/null || fail=1
split -a2 -C1000 < /dev/null || fail=1

# Ensure that -a fails early with a -n that is too large
rm -f x*
returns_ 1 split -a2 -n1000 < /dev/null || fail=1
test -f xaa && fail=1

Exit $fail
#!/bin/sh
# Ensure tail -F distinguishes output with the correct headers
# Between coreutils 7.5 and 8.23 inclusive, 'tail -F ...' would
# not output headers for or created/renamed files in certain cases.

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out ||
    { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

for mode in '' '---disable-inotify'; do
  rm -f a b out

  tail $mode -F $fastpoll a b > out 2>&1 & pid=$!

  # Wait up to 12.7s for tail to start.
  tail_re="cannot open 'b'" retry_delay_ check_tail_output .1 7 ||
    { cat out; fail=1; }

  echo x > a
  # Wait up to 12.7s for a's header to appear in the output:
  tail_re='==> a <==' retry_delay_ check_tail_output .1 7 ||
    { echo "$0: a: unexpected delay?"; cat out; fail=1; }

  echo y > b
  # Wait up to 12.7s for b's header to appear in the output:
  tail_re='==> b <==' retry_delay_ check_tail_output .1 7 ||
    { echo "$0: b: unexpected delay?"; cat out; fail=1; }

  cleanup_
done

Exit $fail
#!/bin/sh
# demonstrate that tail -F works for currently missing dirs
# Before coreutils-8.6, tail -F missing/file would not
# notice any subsequent availability of the missing/file.

# Copyright (C) 2010-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out > /dev/null ||
    { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

for mode in '' '---disable-inotify'; do
  rm -rf out missing

  tail $mode -F $fastpoll missing/file > out 2>&1 & pid=$!

  # Wait up to 12.7s for tail to start with diagnostic:
  # tail: cannot open 'missing/file' for reading: No such file or directory
  tail_re='cannot open' retry_delay_ check_tail_output .1 7 ||
    { cat out; fail=1; }

  mkdir missing || framework_failure_
  (cd missing && echo x > file) || framework_failure_

  # Wait up to 12.7s for this to appear in the output:
  # "tail: '...' has appeared;  following new file"
  tail_re='has appeared' retry_delay_ check_tail_output .1 7 ||
    { echo "$0: file: unexpected delay?"; cat out; fail=1; }

  cleanup_
done


Exit $fail
#!/bin/sh
# Demonstrate that tail -F works when renaming the tailed files.
# Between coreutils 7.5 and 8.2 inclusive, 'tail -F a b' would
# stop tracking additions to b after 'mv a b'.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out ||
    { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

for mode in '' '---disable-inotify'; do
  rm -f a b out
  touch a b || framework_failure_

  tail $mode -F $fastpoll a b > out 2>&1 & pid=$!

  # Wait up to 12.7s for tail to start.
  echo x > a
  tail_re='^x$' retry_delay_ check_tail_output .1 7 || { cat out; fail=1; }

  mv a b || framework_failure_

  # Wait 12.7s for this diagnostic:
  # tail: 'a' has become inaccessible: No such file or directory
  tail_re='inaccessible' retry_delay_ check_tail_output .1 7 ||
    { cat out; fail=1; }

  echo x > a
  # Wait up to 12.7s for this to appear in the output:
  # "tail: '...' has appeared;  following new file"
  tail_re='has appeared' retry_delay_ check_tail_output .1 7 ||
    { echo "$0: a: unexpected delay?"; cat out; fail=1; }

  echo y >> b
  # Wait up to 12.7s for "y" to appear in the output:
  tail_f_vs_rename_2() {
    local delay="$1"
    tr '\n' @ < out | grep '@@==> b <==@y@$' > /dev/null ||
      { sleep $delay; return 1; }
  }
  retry_delay_ tail_f_vs_rename_2 .1 7 ||
    { echo "$0: b: unexpected delay?"; cat out; fail=1; }

  echo z >> a
  # Wait up to 12.7s for "z" to appear in the output:
  tail_f_vs_rename_3() {
    local delay="$1"
    tr '\n' @ < out | grep '@@==> a <==@z@$' > /dev/null ||
      { sleep $delay; return 1; }
  }
  retry_delay_ tail_f_vs_rename_3 .1 7 ||
    { echo "$0: a: unexpected delay?"; cat out; fail=1; }

  cleanup_
done

Exit $fail
#!/bin/sh
# Ensure that tail -f works on an append-only file
# Requires root access to do chattr +a, as well as an ext[23] or xfs file system

# Copyright (C) 2006-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail
require_root_

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

chattr_a_works=1
touch f
chattr +a f 2>/dev/null || chattr_a_works=0
( echo x > f ) 2>/dev/null && chattr_a_works=0
echo x >> f || chattr_a_works=0

if test $chattr_a_works = 0; then
  skip_ "chattr +a doesn't work on this file system"
fi


for mode in '' '---disable-inotify'; do
  sleep 1 & pid=$!
  tail --pid=$pid -f $mode f || fail=1
  cleanup_
done

chattr -a f 2>/dev/null

Exit $fail
#!/bin/sh
# This variant of 'assert' would get a Uninit Mem Read reliably in 2.0.9.
# Due to a race condition in the test, the 'assert' script would get
# the UMR on Solaris only some of the time, and not at all on Linux/GNU.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out ||
    { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

for mode in '' '---disable-inotify'; do
  rm -f a foo out
  touch a || framework_failure_

  tail $mode --follow=name $fastpoll a foo > out 2>&1 & pid=$!

  # Wait up to 12.7s for tail to start.
  echo x > a || framework_failure_
  tail_re='^x$' retry_delay_ check_tail_output .1 7 ||
    { cat out; fail=1; break; }

  # Wait up to 12.7s for tail to notice new foo file
  ok='ok ok ok'
  echo "$ok" > foo || framework_failure_
  tail_re="^$ok$" retry_delay_ check_tail_output .1 7 ||
    { echo "$0: foo: unexpected delay?"; cat out; fail=1; break; }

  cleanup_
done

Exit $fail
#!/bin/sh
# Test for assertion failure in "test".

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# This test fails with tail from textutils-2.0.
# It would get something like this:
#   tail: tail.c:718: recheck: Assertion 'valid_file_spec (f)' failed.
#   Aborted
# due to a race condition in which a dev/inode pair is reused.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out ||
    { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

for mode in '' '---disable-inotify'; do
  rm -f a foo out
  touch a foo || framework_failure_

  tail $mode --follow=name $fastpoll a foo > out 2>&1 & pid=$!

  # Wait up to 12.7s for tail to start.
  echo x > a || framework_failure_
  tail_re='^x$' retry_delay_ check_tail_output .1 7 ||
    { cat out; fail=1; break; }

  # Wait 12.7s for this diagnostic:
  # tail: foo: No such file or directory
  rm foo || framework_failure_
  tail_re='No such file' retry_delay_ check_tail_output .1 7 ||
    { cat out; fail=1; break; }

  # Wait up to 12.7s for tail to notice new foo file
  ok='ok ok ok'
  echo "$ok" > foo || framework_failure_
  tail_re="^$ok$" retry_delay_ check_tail_output .1 7 ||
    { echo "$0: foo: unexpected delay?"; cat out; fail=1; break; }

  cleanup_
done

Exit $fail
#!/bin/sh
# Demonstrate a bug in 'tail -cN' when operating on files of size 4G and larger
# Fixed in coreutils-4.5.2.

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail
expensive_

# Create a file of size exactly 4GB (2^32) with 8 bytes
# at the beginning and another set of 8 bytes at the end.
# The rest will be NUL bytes.  On most modern systems, the following
# creates a file that takes up only a few KB.  Here, du -sh says 16K.
echo abcdefgh | tr -d '\n' > big || framework_failure_
echo 87654321 | tr -d '\n' > tmp || framework_failure_
# Seek 4GB - 8
dd bs=1 seek=4294967288 if=tmp of=big 2> err || dd_failed=1
if test "$dd_failed" = 1; then
  cat err 1>&2
  skip_ \
'cannot create a file large enough for this test,
possibly because this system does not support large files;
Consider rerunning this test on a different file system.'
fi


tail -c1 big > out || fail=1
# Append a newline.
echo >> out
cat <<\EOF > exp
1
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Demonstrate that tail -f works when renaming the tailed files.
# Between coreutils 7.5 and 8.23 inclusive, 'tail -f a' would
# stop tracking additions to b after 'mv a b'.

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out ||
    { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

for mode in '' '---disable-inotify'; do
  rm -f a out
  touch a || framework_failure_

  tail $mode $fastpoll -f a > out 2>&1 & pid=$!

  # Wait up to 12.7s for tail to start.
  echo x > a
  tail_re='^x$' retry_delay_ check_tail_output .1 7 || { cat out; fail=1; }

  mv a b || framework_failure_

  echo y >> b
  # Wait up to 12.7s for "y" to appear in the output:
  tail_re='^y$' retry_delay_ check_tail_output .1 7 || { cat out; fail=1; }

  cleanup_
done

Exit $fail
#!/bin/sh
# inotify-based tail -f didn't flush its initial output before blocking

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

echo line > in || framework_failure_
# Output should be buffered since we're writing to file
# so we're depending on the flush to write out
tail $fastpoll -f in > out & pid=$!

# Wait for 3.1s for the file to be flushed.
tail_flush()
{
  local delay="$1"
  sleep $delay
  test -s out
}
retry_delay_ tail_flush .1 5 || fail=1

cleanup_

Exit $fail
#!/bin/sh
# ensure that --follow=name does not imply --retry

# Copyright (C) 2011-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

cat <<\EOF > exp || framework_failure_
tail: cannot open 'no-such' for reading: No such file or directory
tail: no files remaining
EOF

timeout 10 tail --follow=name no-such > out 2> err
test $? = 1 || fail=1

# Remove an inconsequential inotify warning so
# we can compare against the above error
sed '/inotify cannot be used/d' err > k && mv k err

compare exp err || fail=1

Exit $fail
#!/bin/sh
# tail -f - would fail with the initial inotify implementation

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out ||
    { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

echo line > in || framework_failure_
echo line > exp || framework_failure_

for mode in '' '---disable-inotify'; do
  > out || framework_failure_

  tail $mode -f $fastpoll < in > out 2> err & pid=$!

  # Wait up to 12.7s for output to appear:
  tail_re='line' retry_delay_ check_tail_output .1 7 ||
    { echo "$0: a: unexpected delay?"; cat out; fail=1; }

  # Ensure there was no error output.
  compare /dev/null err || fail=1

  cleanup_
done

Exit $fail
#!/bin/sh
# Exercise an abort-inducing flaw in inotify-enabled tail -F.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

# 9 is a magic number, related to internal details of tail.c and hash.c
n=9
seq $n | xargs touch || framework_failure_

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out > /dev/null ||
    { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

for mode in '' '---disable-inotify'; do
  rm -f out

  tail $mode $fastpoll -qF $(seq $n) > out 2>&1 & pid=$!

  # Wait up to 12.7s for tail to start
  echo x > $n
  tail_re='^x$' retry_delay_ check_tail_output .1 7 ||
    { cat out; fail=1; }

  mv 1 f || framework_failure_

  # Wait 12.7s for this diagnostic:
  # tail: '1' has become inaccessible: No such file or directory
  tail_re='inaccessible' retry_delay_ check_tail_output .1 7 ||
    { cat out; fail=1; }

  # Trigger the bug.  Before the fix, this would provoke the abort.
  echo a > 1 || framework_failure_

  # Wait up to 6.3s for the "tail: '1' has appeared; ..." message
  # (or for the buggy tail to die)
  tail_re='has appeared' retry_delay_ check_tail_output .1 6 ||
    { cat out; fail=1; }

  # Double check that tail hasn't aborted
  kill -0 $pid || fail=1

  cleanup_
done


Exit $fail
#!/bin/sh
# Exercise an abort-inducing flaw in inotify-enabled tail -F.
# Like inotify-hash-abuse, but without a hard-coded "9".

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

for mode in '' '---disable-inotify'; do
  touch f || framework_failure_

  tail $mode $fastpoll -F f & pid=$!

  for i in $(seq 200); do
    kill -0 $pid || break;
    mv f g
    touch f
  done

  # Ensure tail hasn't aborted
  kill -0 $pid || fail=1

  cleanup_
done

Exit $fail
#!/bin/sh
# Ensure that tail does not ignore data that is appended to a tailed-forever
# file between tail's initial read-to-EOF, and when the inotify watches
# are established in tail_forever_inotify.  That data could be ignored
# indefinitely if no *other* data is appended, but it would be printed as
# soon as any additional appended data is detected.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail sleep

# Terminate any background gdb/tail process
cleanup_() {
  kill $pid 2>/dev/null && wait $pid
  kill $sleep 2>/dev/null && wait $sleep
}

touch file || framework_failure_
touch tail.out || framework_failure_

( timeout 10s gdb --version ) > gdb.out 2>&1
case $(cat gdb.out) in
    *'GNU gdb'*) ;;
    *) skip_ "can't run gdb";;
esac

# Break on a line rather than a symbol, to cater for inline functions
break_src="$abs_top_srcdir/src/tail.c"
break_line=$(grep -n ^tail_forever_inotify "$break_src") || framework_failure_
break_line=$(echo "$break_line" | cut -d: -f1) || framework_failure_


# Note we get tail to monitor a background sleep process
# rather than using timeout(1), as timeout sends SIGCONT
# signals to its monitored process, and gdb (7.9 at least)
# has _intermittent_ issues with this.
# Sending SIGCONT resulted in either delayed child termination,
# or no child termination resulting in a hung test.
# See https://sourceware.org/bugzilla/show_bug.cgi?id=18364

env sleep 10 & sleep=$!

# See if gdb works and
# tail_forever_inotify is compiled and run
gdb -nx --batch-silent \
    --eval-command="break $break_line"             \
    --eval-command="run --pid=$sleep -f file"      \
    --eval-command='quit'                          \
    tail < /dev/null > gdb.out 2>&1

kill $sleep || skip_ 'breakpoint not hit'
wait $sleep

# FIXME: The above is seen to _intermittently_ fail with:
# warning: .dynamic section for "/lib/libc.so.6" is not at the expected address
# warning: difference appears to be caused by prelink, adjusting expectations
compare /dev/null gdb.out || skip_ "can't set breakpoints in tail"

env sleep 10 & sleep=$!

# Run "tail -f file", stopping to append a line just before
# inotify initialization, and then continue.  Before the fix,
# that just-appended line would never be output.
gdb -nx --batch-silent \
    --eval-command="break $break_line"             \
    --eval-command="run --pid=$sleep -f file >> tail.out"       \
    --eval-command='shell echo never-seen-with-tail-7.5 >> file' \
    --eval-command='continue'                      \
    --eval-command='quit'                          \
    tail < /dev/null > /dev/null 2>&1 & pid=$!

tail --pid=$pid -f tail.out | (read REPLY; kill $pid)

# gdb has a bug in Debian's gdb-6.8-3 at least that causes it to not
# cleanup and exit correctly when it receives a SIGTERM, but
# killing sleep, should cause the tail process and thus gdb to exit.
kill $sleep
wait $sleep

wait $pid

compare /dev/null tail.out && fail=1

Exit $fail
#!/bin/sh
# Ensure that tail does not ignore a tailed-forever file that has been
# replaced between tail's initial read-to-EOF, and when the inotify watches
# are established in tail_forever_inotify.  That new file would be ignored
# indefinitely.

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail sleep

# Terminate any background gdb/tail process
cleanup_() {
  kill $pid 2>/dev/null && wait $pid
  kill $sleep 2>/dev/null && wait $sleep
}

touch file || framework_failure_
touch tail.out || framework_failure_

( timeout 10s gdb --version ) > gdb.out 2>&1
case $(cat gdb.out) in
    *'GNU gdb'*) ;;
    *) skip_ "can't run gdb";;
esac

# Break on a line rather than a symbol, to cater for inline functions
break_src="$abs_top_srcdir/src/tail.c"
break_line=$(grep -n ^tail_forever_inotify "$break_src") || framework_failure_
break_line=$(echo "$break_line" | cut -d: -f1) || framework_failure_


# Note we get tail to monitor a background sleep process
# rather than using timeout(1), as timeout sends SIGCONT
# signals to its monitored process, and gdb (7.9 at least)
# has _intermittent_ issues with this.
# Sending SIGCONT resulted in either delayed child termination,
# or no child termination resulting in a hung test.
# See https://sourceware.org/bugzilla/show_bug.cgi?id=18364

env sleep 10 & sleep=$!

# See if gdb works and
# tail_forever_inotify is compiled and run
gdb -nx --batch-silent \
    --eval-command="break $break_line"             \
    --eval-command="run --pid=$sleep -f file"      \
    --eval-command='quit'                          \
    tail < /dev/null > gdb.out 2>&1

kill $sleep || skip_ 'breakpoint not hit'
wait $sleep

# FIXME: The above is seen to _intermittently_ fail with:
# warning: .dynamic section for "/lib/libc.so.6" is not at the expected address
# warning: difference appears to be caused by prelink, adjusting expectations
compare /dev/null gdb.out || skip_ "can't set breakpoints in tail"

env sleep 10 & sleep=$!

echo never-seen-with-tail-8.23 > file.new || framework_failure_

# Run "tail -F file", stopping to replace with a new file before
# inotify initialization, and then continue.  Before the fix,
# changes to the new file would effectively be ignored.
gdb -nx --batch-silent \
    --eval-command="break $break_line"             \
    --eval-command="run --pid=$sleep -F file 2>tail.err >>tail.out"       \
    --eval-command='shell mv file.new file'        \
    --eval-command='continue'                      \
    --eval-command='quit'                          \
    tail < /dev/null > /dev/null 2>&1 & pid=$!

# Note even updating the watched 'file' wouldn't have output
# anything between coreutils 7.5 and 8.23 inclusive as
# The old file descriptor (still held open by tail) was being fstat().

tail --pid=$pid -f tail.out | (read REPLY; kill $pid)

# gdb has a bug in Debian's gdb-6.8-3 at least that causes it to not
# cleanup and exit correctly when it receives a SIGTERM, but
# killing sleep, should cause the tail process and thus gdb to exit.
kill $sleep
wait $sleep

wait $pid

compare /dev/null tail.out && { cat tail.err; fail=1; }

Exit $fail
#!/bin/sh
# ensure that tail -F doesn't leak inotify resources

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

grep '^#define HAVE_INOTIFY 1' "$CONFIG_HEADER" >/dev/null \
  || skip_ 'inotify required'

require_strace_ 'inotify_add_watch,inotify_rm_watch'

# Quickly skip on remote file systems
is_local_dir_ . || skip_ 'inotify not used on remote file system'

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out > /dev/null ||
    { sleep $delay; return 1; }
}

# Wait up to 25.5 seconds for grep REGEXP 'out' to succeed.
grep_timeout() { tail_re="$1" retry_delay_ check_tail_output .1 8; }

check_strace()
{
  local delay="$1"
  grep "$strace_re" strace.out > /dev/null ||
    { sleep $delay; return 1; }
}

cleanup_fail()
{
  cat out
  warn_ $1
  fail=1
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

fastpoll='-s.1 --max-unchanged-stats=1'

touch k || framework_failure_

# Note the timeout guard isn't strictly necessary here,
# however without it strace will ignore SIGTERM.
# strace does always honor SIGTERM with the -I2 option,
# though that's not available on RHEL6 for example.
timeout 180 strace -e inotify_add_watch,inotify_rm_watch -o strace.out \
  tail -F $fastpoll k >> out 2>&1 & pid=$!

reverted_to_polling_=0
for i in $(seq 2); do
    echo $i

    echo 'tailed' > k;

    # Wait for watch on (new) file
    strace_re='inotify_add_watch.*MODIFY' retry_delay_ check_strace .1 8 ||
      no_watch_=1

    # Assume this is not because we're leaking
    # (resources may already be depleted)
    # The explicit check for inotify_rm_watch should confirm that.
    grep -F 'reverting to polling' out >/dev/null && skip_ 'inotify unused'

    # Otherwise failure is unknown
    test "$no_watch_" && { cat out; framework_failure_ 'no inotify_add_watch'; }

    mv k k.tmp
    # wait for tail to detect the rename
    grep_timeout 'inaccessible' ||
      { cleanup_fail 'failed to detect rename'; break; }

    # Note we strace here rather than consuming all available watches
    # to be more efficient, but more importantly avoid depleting resources.
    # Note also available resources can currently be tuned with:
    #  sudo sysctl -w fs.inotify.max_user_watches=$smallish_number
    # However that impacts all processes for the current user, and also
    # may not be supported in future, instead being auto scaled to RAM
    # like the Linux epoll resources were.
    if test "$i" -gt 1; then
      strace_re='inotify_rm_watch' retry_delay_ check_strace .1 8 ||
        { cleanup_fail 'failed to find inotify_rm_watch syscall'; break; }
    fi

    >out && >strace.out || framework_failure_ 'failed to reset output files'
done

cleanup_

Exit $fail
#!/bin/sh
# ensure that tail -F handles rotation

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

grep '^#define HAVE_INOTIFY 1' "$CONFIG_HEADER" >/dev/null \
  || expensive_

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out > /dev/null ||
    { sleep $delay; return 1; }
}

# Wait up to 25.5 seconds for grep REGEXP 'out' to succeed.
grep_timeout() { tail_re="$1" retry_delay_ check_tail_output .1 8; }

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

cleanup_fail()
{
  cat out
  warn_ $1
  cleanup_
  fail=1
}

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

# Perform at least this many iterations, because on multi-core systems
# the offending sequence of events can be surprisingly uncommon.
# See: http://lists.gnu.org/archive/html/bug-coreutils/2009-11/msg00213.html
for i in $(seq 50); do
    echo $i
    rm -f k x out

    # Normally less than a second is required here, but with heavy load
    # and a lot of disk activity, even 20 seconds is insufficient, which
    # leads to this timeout killing tail before the "ok" is written below.
    >k && >x || framework_failure_ failed to initialize files
    timeout 60 tail $fastpoll -F k > out 2>&1 & pid=$!

    echo 'tailed' > k;
    # wait for 'tailed' to appear in out
    grep_timeout 'tailed' || { cleanup_fail 'failed to find "tailed"'; break; }

    mv x k
    # wait for tail to detect the rename
    grep_timeout 'tail:' || { cleanup_fail 'failed to detect rename'; break; }

    echo ok >> k
    # wait for "ok" to appear in 'out'
    grep_timeout 'ok' || { cleanup_fail 'failed to detect echoed ok'; break; }

    cleanup_
done

Exit $fail
#!/bin/sh
# Test the --pid option of tail.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail
getlimits_

touch empty here || framework_failure_

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

for mode in '' '---disable-inotify'; do
  # Use tail itself to create a background process to monitor,
  # which will auto exit when "here" is removed.
  tail -f $mode here & pid=$!

  # Ensure that tail --pid=PID does not exit when PID is alive.
  timeout 1 tail -f -s.1 --pid=$pid $mode here
  test $? = 124 || fail=1

  cleanup_

  # Ensure that tail --pid=PID exits with success status when PID is dead.
  # Use an unlikely-to-be-live PID
  timeout 10 tail -f -s.1 --pid=$PID_T_MAX $mode empty
  ret=$?
  test $ret = 124 && skip_ "pid $PID_T_MAX present or tail too slow"
  test $ret = 0 || fail=1

  # Ensure tail doesn't wait for data when PID is dead
  timeout 10 tail -f -s10 --pid=$PID_T_MAX $mode empty
  test $? = 124 && fail=1
done

Exit $fail
#!/bin/sh
# ensure that :|tail -f doesn't hang, per POSIX

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

echo foo | timeout 10 tail -f -c3 > out || fail=1
echo oo > exp || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that "tail -f fifo" tails indefinitely.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

mkfifo_or_skip_ fifo

echo 1 > fifo &
echo 1 > exp || framework_failure_

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

timeout 10 tail $fastpoll -f fifo > out & pid=$!

check_tail_output() { sleep $1; test -s out; }

# Wait 12.7s for tail to write something.
retry_delay_ check_tail_output .1 7 || fail=1

compare exp out || fail=1

# Ensure tail is still running
kill -0 $pid || fail=1

cleanup_

Exit $fail
#!/bin/sh
# Prior to textutils-2.0.17, 'tail /proc/ksyms' would segfault on Linux.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail


ksyms=/proc/ksyms
if test -r $ksyms; then
  tail $ksyms > /dev/null || fail=1
fi

Exit $fail
#!/bin/sh
# Exercise tail's behavior regarding missing files with/without --retry.

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

# Function to count number of lines from tail
# while ignoring transient errors due to resource limits
countlines_ ()
{
  grep -Ev 'inotify (resources exhausted|cannot be used)' out | wc -l
}

# Function to check the expected line count in 'out'.
# Called via retry_delay_().  Sleep some time - see retry_delay_() - if the
# line count is still smaller than expected.
wait4lines_ ()
{
  local delay=$1
  local elc=$2   # Expected line count.
  [ "$(countlines_)" -ge "$elc" ] || { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

# === Test:
# Retry without --follow results in a warning.
touch file
tail --retry file > out 2>&1 || fail=1
[ "$(countlines_)" = 1 ]                     || { cat out; fail=1; }
grep -F 'tail: warning: --retry ignored' out || { cat out; fail=1; }

# === Test:
# The same with a missing file: expect error message and exit 1.
tail --retry missing > out 2>&1 && fail=1
[ "$(countlines_)" = 2 ]                     || { cat out; fail=1; }
grep -F 'tail: warning: --retry ignored' out || { cat out; fail=1; }

# === Test:
# Ensure that "tail --retry --follow=name" waits for the file to appear.
# Clear 'out' so that we can check its contents without races
>out                            || framework_failure_
timeout 10 tail $fastpoll --follow=name --retry missing >out 2>&1 & pid=$!
# Wait for "cannot open" error.
retry_delay_ wait4lines_ .1 6 1 || { cat out; fail=1; }
echo "X" > missing              || framework_failure_
# Wait for the expected output.
retry_delay_ wait4lines_ .1 6 3 || { cat out; fail=1; }
cleanup_
# Expect 3 lines in the output file.
[ "$(countlines_)" = 3 ]   || { fail=1; cat out; }
grep -F 'cannot open' out  || { fail=1; cat out; }
grep -F 'has appeared' out || { fail=1; cat out; }
grep '^X$' out             || { fail=1; cat out; }
rm -f missing out          || framework_failure_

# === Test:
# Ensure that "tail --retry --follow=descriptor" waits for the file to appear.
# tail-8.21 failed at this (since the implementation of the inotify support).
timeout 10 tail $fastpoll --follow=descriptor --retry missing >out 2>&1 & pid=$!
# Wait for "cannot open" error.
retry_delay_ wait4lines_ .1 6 2 || { cat out; fail=1; }
echo "X" > missing              || framework_failure_
# Wait for the expected output.
retry_delay_ wait4lines_ .1 6 4 || { cat out; fail=1; }
cleanup_
# Expect 4 lines in the output file.
[ "$(countlines_)" = 4 ]   || { fail=1; cat out; }
grep -F 'retry only effective for the initial open' out \
                           || { fail=1; cat out; }
grep -F 'cannot open' out  || { fail=1; cat out; }
grep -F 'has appeared' out || { fail=1; cat out; }
grep '^X$' out             || { fail=1; cat out; }
rm -f missing out          || framework_failure_

# === Test:
# Ensure that tail --follow=descriptor --retry exits when the file appears
# untailable. Expect exit status 1.
timeout 10 tail $fastpoll --follow=descriptor --retry missing >out 2>&1 & pid=$!
# Wait for "cannot open" error.
retry_delay_ wait4lines_ .1 6 2 || { cat out; fail=1; }
mkdir missing                   || framework_failure_  # Create untailable
# Wait for the expected output.
retry_delay_ wait4lines_ .1 6 4 || { cat out; fail=1; }
wait $pid
rc=$?
[ "$(countlines_)" = 4 ]                       || { fail=1; cat out; }
grep -F 'retry only effective for the initial open' out \
                                               || { fail=1; cat out; }
grep -F 'cannot open' out                      || { fail=1; cat out; }
grep -F 'replaced with an untailable file' out || { fail=1; cat out; }
grep -F 'no files remaining' out               || { fail=1; cat out; }
[ $rc = 1 ]                                    || { fail=1; cat out; }
rm -fd missing out                             || framework_failure_

# === Test:
# Ensure that --follow=descriptor (without --retry) does *not wait* for the
# file to appear.  Expect 2 lines in the output file ("cannot open" +
# "no files remaining") and exit status 1.
tail --follow=descriptor missing >out 2>&1 && fail=1
[ "$(countlines_)" = 2 ]         || { fail=1; cat out; }
grep -F 'cannot open' out        || { fail=1; cat out; }
grep -F 'no files remaining' out || { fail=1; cat out; }

# === Test:
# Likewise for --follow=name (without --retry).
tail --follow=name missing >out 2>&1 && fail=1
[ "$(countlines_)" = 2 ]         || { fail=1; cat out; }
grep -F 'cannot open' out        || { fail=1; cat out; }
grep -F 'no files remaining' out || { fail=1; cat out; }

Exit $fail
#!/bin/sh
# Verify that tail works even when it's reading from a file
# that is not at its beginning.  Based on a report from John Roll.

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

(echo 1; echo 2) > k || framework_failure_


sh -c 'read x; tail' < k > out || fail=1
cat <<EOF > exp
2
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure tail tracks symlinks properly.

# Copyright (C) 2013-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

# Function to count number of lines from tail
# while ignoring transient errors due to resource limits
countlines_ ()
{
  grep -Ev 'inotify (resources exhausted|cannot be used)' out | wc -l
}

# Function to check the expected line count in 'out'.
# Called via retry_delay_().  Sleep some time - see retry_delay_() - if the
# line count is still smaller than expected.
wait4lines_ ()
{
  local delay=$1
  local elc=$2   # Expected line count.
  [ "$(countlines_)" -ge "$elc" ] || { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# speedup non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

# Ensure changing targets of cli specified symlinks are handled.
# Prior to v8.22, inotify would fail to recognize changes in the targets.
# Clear 'out' so that we can check its contents without races.
>out                            || framework_failure_
ln -nsf target symlink          || framework_failure_
timeout 10 tail $fastpoll -F symlink >out 2>&1 & pid=$!
# Wait for "cannot open..."
retry_delay_ wait4lines_ .1 6 1 || { cat out; fail=1; }
echo "X" > target               || framework_failure_
# Wait for the expected output.
retry_delay_ wait4lines_ .1 6 3 || { cat out; fail=1; }
cleanup_
# Expect 3 lines in the output file.
[ "$(countlines_)" = 3 ]   || { fail=1; cat out; }
grep -F 'cannot open' out  || { fail=1; cat out; }
grep -F 'has appeared' out || { fail=1; cat out; }
grep '^X$' out             || { fail=1; cat out; }
rm -f target out           || framework_failure_

# Ensure we correctly handle the source symlink itself changing.
# I.e., that we don't operate solely on the targets.
# Clear 'out' so that we can check its contents without races.
>out                            || framework_failure_
echo "X1" > target1             || framework_failure_
ln -nsf target1 symlink         || framework_failure_
timeout 10 tail $fastpoll -F symlink >out 2>&1 & pid=$!
# Wait for the expected output.
retry_delay_ wait4lines_ .1 6 1 || { cat out; fail=1; }
ln -nsf target2 symlink         || framework_failure_
# Wait for "become inaccess..."
retry_delay_ wait4lines_ .1 6 2 || { cat out; fail=1; }
echo "X2" > target2             || framework_failure_
# Wait for the expected output.
retry_delay_ wait4lines_ .1 6 4 || { cat out; fail=1; }
cleanup_
# Expect 4 lines in the output file.
[ "$(countlines_)" = 4 ]    || { fail=1; cat out; }
grep -F 'become inacce' out || { fail=1; cat out; }
grep -F 'has appeared' out  || { fail=1; cat out; }
grep '^X1$' out             || { fail=1; cat out; }
grep '^X2$' out             || { fail=1; cat out; }
rm -f target1 target2 out   || framework_failure_

# Note other symlink edge cases are currently just diagnosed
# rather than being handled.  I.e., if you specify a missing item,
# or existing file that later change to a symlink, if inotify
# is in use, you'll get a diagnostic saying that link will
# no longer be tailed.

Exit $fail
#!/bin/sh
# exercise tail -c

# Copyright 2014-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

# Make sure it works on funny files in /proc and /sys.

for file in /proc/version /sys/kernel/profiling; do
  if test -r $file; then
    cp -f $file copy &&
    tail -c -1 copy > exp1 || framework_failure_

    tail -c -1 $file > out1 || fail=1
    compare exp1 out1 || fail=1
  fi
done

Exit $fail
#!/bin/sh
# Make sure that 'tail -n0 -f' and 'tail -c0 -f' sleep
# rather than doing what amounted to a busy-wait.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This bug was fixed for 5.0.91
# It skips the test if your system lacks a /proc/$pid/status
# file, or if its contents don't look right.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

require_proc_pid_status_

touch empty || framework_failure_
echo anything > nonempty || framework_failure_

# First verify that -[nc]0 without -f, exit without reading
touch unreadable || framework_failure_
chmod 0 unreadable || framework_failure_
tail -c0 unreadable || fail=1
tail -n0 unreadable || fail=1

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

for mode in '' '---disable-inotify'; do
  for file in empty nonempty; do
    for c_or_n in c n; do
      tail --sleep=4 -${c_or_n} 0 -f $mode $file & pid=$!
      tail_sleeping()
      {
        local delay="$1"; sleep $delay
        state=$(get_process_status_ $pid)
        case $state in
          S*) ;;
          *) return 1;;
        esac
      }
      # Wait up to 1.5s for tail to sleep
      retry_delay_ tail_sleeping .1 4 ||
        { echo $0: process in unexpected state: $state >&2; fail=1; }
      cleanup_
    done
  done
done

Exit $fail
#!/bin/sh
# Ensure all logs are output upon file truncation

# Copyright (C) 2015-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

check_tail_output()
{
  local delay="$1"
  grep "$tail_re" out > /dev/null ||
    { sleep $delay; return 1; }
}

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# Speedup the non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

for follow in '-f' '-F'; do
  for mode in '' '---disable-inotify'; do
    rm -f out
    seq 10 > f || framework_failure_

    tail $follow $mode $fastpoll f > out 2>&1 & pid=$!

    # Wait up to 12.7s for tail to start
    tail_re='^10$' retry_delay_ check_tail_output .1 7 ||
      { cat out; fail=1; }

    seq 11 15 > f || framework_failure_

    # Wait up to 12.7s for new data
    tail_re='^15$' retry_delay_ check_tail_output .1 7 ||
      { cat out; fail=1; }

    cleanup_
  done
done

Exit $fail
#!/bin/sh
# Make sure that 'tail -f' returns immediately if a file doesn't exist
# while 'tail -F' waits for it to appear.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ tail

grep '^#define HAVE_INOTIFY 1' "$CONFIG_HEADER" >/dev/null \
  && HAVE_INOTIFY=1

inotify_failed_re='inotify (resources exhausted|cannot be used)'

touch here || framework_failure_
{ touch unreadable && chmod a-r unreadable; } || framework_failure_

# Terminate any background tail process
cleanup_() { kill $pid 2>/dev/null && wait $pid; }

# speedup non inotify case
fastpoll='-s.1 --max-unchanged-stats=1'

for mode in '' '---disable-inotify'; do
  timeout 10 tail $fastpoll -f $mode not_here
  test $? = 124 && fail=1

  if test ! -r unreadable; then # can't test this when root
    timeout 10 tail $fastpoll -f $mode unreadable
    test $? = 124 && fail=1
  fi

  timeout .1 tail $fastpoll -f $mode here 2>tail.err
  test $? = 124 || fail=1

  # 'tail -F' must wait in any case.

  timeout .1 tail $fastpoll -F $mode here 2>>tail.err
  test $? = 124 || fail=1

  if test ! -r unreadable; then # can't test this when root
    timeout .1 tail $fastpoll -F $mode unreadable
    test $? = 124 || fail=1
  fi

  timeout .1 tail $fastpoll -F $mode not_here
  test $? = 124 || fail=1

  grep -Ev "$inotify_failed_re" tail.err > x
  mv x tail.err
  compare /dev/null tail.err || fail=1
  >tail.err
done

if test "$HAVE_INOTIFY" && test -z "$mode" && is_local_dir_ .; then
  # Ensure -F never follows a descriptor after rename
  # either with tiny or significant delays between operations
  tail_F()
  {
    local delay="$1"

    > k && > tail.out && > tail.err || framework_failure_
    tail $fastpoll -F $mode k >tail.out 2>tail.err & pid=$!
    sleep $delay
    mv k l
    sleep $delay
    touch k
    mv k l
    sleep $delay
    echo NO >> l
    sleep $delay
    cleanup_
    rm -f k l

    test -s tail.out \
      && ! grep -E "$inotify_failed_re" tail.err >/dev/null
  }

  retry_delay_ tail_F 0 1 && { cat tail.out; fail=1; }
  retry_delay_ tail_F .2 1 && { cat tail.out; fail=1; }
fi

Exit $fail
#!/bin/sh
# touch -t would mistakenly reject a time specifying "60" seconds

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch

echo 60.000000000 > exp || framework_failure_


# Before coreutils-7.7, this would fail, complaining of
# an 'invalid date format'.  Specifying 60 seconds *is* valid.
TZ=UTC0 touch -t 197001010000.60 f || fail=1

stat --p='%.9Y\n' f > out || fail=1

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Make sure touch can create a file through a dangling symlink.
# This was broken in the 4.0[e-i] test releases.

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch

rm -f touch-target t-symlink
ln -s touch-target t-symlink

# This used to infloop.
touch t-symlink || fail=1

test -f touch-target || fail=1
rm -f touch-target t-symlink

if test $fail = 1; then
  case $host_triplet in
    *linux-gnu*)
      case "$(uname -r)" in
        2.3.9[0-9]*)
          skip_ \
'****************************************************
WARNING!!!
This version of the Linux kernel causes touch to fail
when operating on dangling symlinks.
****************************************************'
          ;;
      esac
      ;;
  esac
fi

Exit $fail
#!/bin/sh
# Make sure touch can operate on a directory.
# This was broken in the 4.0[efg] test releases.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch

touch . || fail=1
Exit $fail
#!/bin/sh
# Make sure touch can set the mtime on an empty file.

# Copyright (C) 1998-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Volker Borchert reported that touch 3.16r (and presumably all before that)
# fails to work on SunOS 4.1.3 with 'most of the recommended patches' when
# the empty file is on an NFS-mounted 4.2 volume.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch

DEFAULT_SLEEP_SECONDS=2
SLEEP_SECONDS=${SLEEP_SECONDS=$DEFAULT_SLEEP_SECONDS}


# FIXME: find writable directories on other partitions
# and run the test in those directories, too.

: ${TOUCH_DIR_LIST=.}


for d in $TOUCH_DIR_LIST; do
  rm -rf $d/a $d/b $d/c
  > $d/a || framework_failure_
  test -f $d/a || framework_failure_
  > $d/b || framework_failure_
  test -f $d/b || framework_failure_
  > $d/c || framework_failure_
  test -f $d/c || framework_failure_
done

echo sleeping for $SLEEP_SECONDS seconds...
sleep $SLEEP_SECONDS
for d in $TOUCH_DIR_LIST; do
  touch $d/a || fail=1
  set x $(ls -t $d/a $d/b)
  test "$*" = "x $d/a $d/b" || fail=1
done

echo sleeping for $SLEEP_SECONDS seconds...
sleep $SLEEP_SECONDS
for d in $TOUCH_DIR_LIST; do
  touch $d/b
  set x $(ls -t $d/a $d/b)
  test "$*" = "x $d/b $d/a" || fail=1

  if touch - 1< $d/c 2> /dev/null; then
    set x $(ls -t $d/a $d/c)
    test "$*" = "x $d/c $d/a" || fail=1
  fi

  rm -rf $d/a $d/b $d/c
done

if test $fail != 0; then
  cat 1>&2 <<EOF
*** This test has just failed.  That can happen when the test is run in an
*** NFS-mounted directory on a system whose clock is not well synchronized
*** with that of the NFS server.  If you think that is the reason, set the
*** environment variable SLEEP_SECONDS to some number of seconds larger than
*** the default of $DEFAULT_SLEEP_SECONDS and rerun the test.
EOF
fi

Exit $fail
#!/bin/sh
# make sure touch gives reasonable diagnostics

# Copyright (C) 2001-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch
skip_if_root_

file=/no-such-dir/file

touch $file > out 2>&1 && fail=1
cat <<EOF > exp
touch: cannot touch '$file': No such file or directory
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Make sure touch works on fifos without hanging.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch

mkfifo_or_skip_ fifo


touch fifo || fail=1

Exit $fail
#!/bin/sh
# Ensure that touch -c no-such-file no longer fails (it did in 4.1.8).

# Copyright (C) 2002-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch test


touch -c no-file > /dev/null 2>&1 || fail=1
touch -cm no-file > /dev/null 2>&1 || fail=1
touch -ca no-file > /dev/null 2>&1 || fail=1

# If >&- works, test "touch -c -" etc.
# >&- apparently does not work in HP-UX 11.23.
# This test is ineffective unless /dev/stdout also works.
if env test -w /dev/stdout >/dev/null &&
   env test ! -w /dev/stdout >&-; then
  touch -c - >&- 2> /dev/null || fail=1
  touch -cm - >&- 2> /dev/null || fail=1
  touch -ca - >&- 2> /dev/null || fail=1
fi

Exit $fail
#!/bin/sh
# Ensure that touch -h works.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch test

ln -s nowhere dangling || framework_failure_
touch file || framework_failure_
ln -s file link || framework_failure_


# These first tests should work on every platform.
# -h does not create files, but it warns.  Use -c to silence warning.
returns_ 1 touch -h no-file 2> err || fail=1
compare /dev/null err && fail=1
touch -h -c no-file 2> err || fail=1
compare /dev/null err || fail=1

# -h works on regular files
touch -h file || fail=1

# -h coupled with -r uses timestamp of the symlink, not the referent.
touch -h -r dangling file || fail=1
test -f nowhere && fail=1

# The remaining tests of -h require kernel support for changing symlink times.
grep '^#define HAVE_UTIMENSAT 1' "$CONFIG_HEADER" > /dev/null ||
grep '^#define HAVE_LUTIMES 1' "$CONFIG_HEADER" > /dev/null ||
  skip_ 'this system lacks the utimensat function'

# Changing time of dangling symlink is okay.
# Skip the test if this fails, but the error text corresponds to
# ENOSYS (possible with old kernel but new glibc).
touch -h dangling 2> err
case $? in
  0) test -f nowhere && fail=1
     compare /dev/null err || fail=1;;
  1) grep 'Function not implemented' err \
       && skip_ 'this system lacks the utimensat function'
     fail=1;;
  *) fail=1;;
esac

# Change the mtime of a symlink.
touch -m -h -d 2009-10-10 link || fail=1
case $(stat --format=%y link) in
  2009-10-10*) ;;
  *) fail=1 ;;
esac
case $(stat --format=%y file) in
  2009-10-10*) fail=1;;
esac

# Test interactions with -.
touch -h - > file || fail=1

# If >&- works, test "touch -ch -" etc.
# >&- apparently does not work in HP-UX 11.23.
# This test is ineffective unless /dev/stdout also works.
# If stdout is open, it is not a symlink.
if env test -w /dev/stdout >/dev/null &&
   env test ! -w /dev/stdout >&-; then
  returns_ 1 touch -h - >&- || fail=1
  touch -h -c - >&- || fail=1
fi

Exit $fail
#!/bin/sh
# Make sure touch can update the times on a file that is neither
# readable nor writable.

# Copyright (C) 1999-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch

# Make sure t2 is newer than t1.
touch -d '2000-01-01 00:00' t1 || framework_failure_
touch -d '2000-01-02 00:00' t2 || framework_failure_

set x $(ls -t t1 t2)
test "$*" = "x t2 t1" || framework_failure_


chmod 0 t1
touch -d '2000-01-03 00:00' -c t1 || fail=1

set x $(ls -t t1 t2)
test "$*" = "x t1 t2" || fail=1

# Also test the combination of --no-create and -a.
touch -a --no-create t1 || fail=1

Exit $fail
#!/bin/sh
# Make sure that touch gives reasonable diagnostics when applied
# to an unwritable directory owned by some other user.

# Copyright (C) 2003-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch

if env -- test -w /; then
  skip_ you have write access to /.
fi

if env -- test -O / || env -- test -G /; then
  skip_ "you own /."
fi

skip_if_root_


# Before fileutils-4.1, we'd get the following misleading
# diagnostic instead of '...: Permission denied'.
# touch: creating '/': Is a directory
touch / > out 2>&1 && fail=1

# On SunOS4, EPERM is 'Not owner'.
# On some *BSD systems it's 'Operation not permitted'.
# On a system where root file system is mounted read-only
# it's 'Read-only file system'.
for msg in 'Not owner' 'Operation not permitted' 'Permission denied' \
           'Read-only file system'; do
  cat > exp <<EOF
touch: setting times of '/': $msg
EOF

  cmp out exp > /dev/null 2>&1 && { match=1; break; }
done
test "$match" = 1 || fail=1

test $fail = 1 && compare exp out

Exit $fail
#!/bin/sh
# Demonstrate that "touch -d now writable-but-owned-by-other" works.

# Copyright (C) 2008-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch
require_root_

# Create a file owned by root, and writable by $NON_ROOT_USERNAME.
echo > root-owned || framework_failure_
chgrp +$NON_ROOT_GID . root-owned || framework_failure_
chmod g+w root-owned

# Ensure that the current directory is searchable by $NON_ROOT_USERNAME.
chmod g+x .

chroot --skip-chdir --user=$NON_ROOT_USERNAME / env PATH="$PATH" \
  touch -d now root-owned || fail=1

Exit $fail
#!/bin/sh
# Test touch with obsolescent 8- or 10-digit time stamps.

# Copyright (C) 2000-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch

_POSIX2_VERSION=199209; export _POSIX2_VERSION
POSIXLY_CORRECT=1; export POSIXLY_CORRECT


yearstart=01010000

for ones in 11111111 1111111111; do
  for args in $ones "-- $ones" "$yearstart $ones" "-- $yearstart $ones"; do
    touch $args || fail=1
    test -f $ones || fail=1
    test -f $yearstart && fail=1
    rm -f $ones || fail=1
  done
done

y2000=0101000000
rm -f $y2000 file || fail=1
touch $y2000 file && test -f $y2000 && test -f file || fail=1

Exit $fail
#!/bin/sh
# ensure that touch can operate on read-only files

# Copyright (C) 2005-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch
skip_if_root_

> read-only || framework_failure_
chmod 444 read-only || framework_failure_


touch read-only || fail=1

touch - 1< read-only 2> /dev/null && { test ! -f - || fail=1; }

Exit $fail
#!/bin/sh
# Demonstrate using a combination of --reference and --date to
# set the time of a file back by an arbitrary amount.

# Copyright (C) 2004-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch

TZ=UTC0 touch --date='2004-01-16 12:00 +0000' f || framework_failure_


# Set times back by 5 days.
touch --ref f --date='-5 days' f || fail=1

TZ=UTC0 ls -og --time-style=+%Y-%m-%d f > out.1 || fail
sed 's/ f$//;s/.* //' out.1 > out

cat <<\EOF > exp || fail=1
2004-01-11
EOF

compare exp out || fail=1

Exit $fail
#!/bin/sh
# Ensure that touch honors trailing slash.

# Copyright (C) 2009-2016 Free Software Foundation, Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

. "${srcdir=.}/tests/init.sh"; path_prepend_ ./src
print_ver_ touch

ln -s nowhere dangling || framework_failure_
ln -s loop loop || framework_failure_
touch file || framework_failure_
ln -s file link1 || framework_failure_
mkdir dir || framework_failure_
ln -s dir link2 || framework_failure_


# Trailing slash can only appear on directory or symlink-to-directory.
# Up through coreutils 8.0, Solaris 9 failed these tests.
returns_ 1 touch no-file/ || fail=1
returns_ 1 touch file/ || fail=1
returns_ 1 touch dangling/ || fail=1
returns_ 1 touch loop/ || fail=1
returns_ 1 touch link1/ || fail=1
touch dir/ || fail=1

# -c silences ENOENT, but not ENOTDIR or ELOOP
touch -c no-file/ || fail=1
returns_ 1 touch -c file/ || fail=1
touch -c dangling/ || fail=1
returns_ 1 touch -c loop/ || fail=1
returns_ 1 touch -c link1/ || fail=1
touch -c dir/ || fail=1
returns_ 1 test -f no-file || fail=1
returns_ 1 test -f nowhere || fail=1

# Trailing slash dereferences a symlink, even with -h.
# mtime is sufficient to show pass (besides, lstat changes atime of
# symlinks and directories under Cygwin 1.5).
touch -d 2009-10-10 -h link2/ || fail=1
touch -h -r link2/ file || fail=1
case $(stat --format=%y dir) in
  2009-10-10*) ;;
  *) fail=1 ;;
esac
case $(stat --format=%y link2) in
  2009-10-10*) fail=1 ;;
esac
case $(stat --format=%y file) in
  2009-10-10*) ;;
  *) fail=1 ;;
esac

Exit $fail
